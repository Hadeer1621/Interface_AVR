
Smart_Home_Pro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  00004568  000045fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001fc  008001fc  00004798  2**0
                  ALLOC
  3 .stab         00004854  00000000  00000000  00004798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001cea  00000000  00000000  00008fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000acd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  0000ae76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228f  00000000  00000000  0000b065  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012bb  00000000  00000000  0000d2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d6  00000000  00000000  0000e5af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c6  00000000  00000000  0000f848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094a  00000000  00000000  0000fb0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_10>
      2c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b2 21 	call	0x4364	; 0x4364 <main>
      8a:	0c 94 b2 22 	jmp	0x4564	; 0x4564 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ee       	ldi	r26, 0xE4	; 228
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ee       	ldi	r24, 0xE4	; 228
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 22 	jmp	0x452e	; 0x452e <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 87 22 	jmp	0x450e	; 0x450e <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 a3 22 	jmp	0x4546	; 0x4546 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 8b 04 	call	0x916	; 0x916 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 a7 22 	jmp	0x454e	; 0x454e <__epilogue_restores__+0x20>

00000916 <__clzsi2>:
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	e8 16       	cp	r14, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f8 06       	cpc	r15, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 07       	cpc	r16, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	18 07       	cpc	r17, r24
     932:	88 f4       	brcc	.+34     	; 0x956 <__clzsi2+0x40>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e8 16       	cp	r14, r24
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <__clzsi2+0x36>
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x36>
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <__clzsi2+0x64>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	12 c0       	rjmp	.+36     	; 0x97a <__clzsi2+0x64>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	18 07       	cpc	r17, r24
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x5c>
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__clzsi2+0x64>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	20 e2       	ldi	r18, 0x20	; 32
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__clzsi2+0x7e>
     98c:	16 95       	lsr	r17
     98e:	07 95       	ror	r16
     990:	f7 94       	ror	r15
     992:	e7 94       	ror	r14
     994:	8a 95       	dec	r24
     996:	d2 f7       	brpl	.-12     	; 0x98c <__clzsi2+0x76>
     998:	f7 01       	movw	r30, r14
     99a:	e4 51       	subi	r30, 0x14	; 20
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 81       	ld	r24, Z
     9a0:	28 1b       	sub	r18, r24
     9a2:	31 09       	sbc	r19, r1
     9a4:	41 09       	sbc	r20, r1
     9a6:	51 09       	sbc	r21, r1
     9a8:	c9 01       	movw	r24, r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <__pack_f>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 80       	ldd	r14, Z+4	; 0x04
     9c2:	f5 80       	ldd	r15, Z+5	; 0x05
     9c4:	06 81       	ldd	r16, Z+6	; 0x06
     9c6:	17 81       	ldd	r17, Z+7	; 0x07
     9c8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__pack_f+0x2e>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e8 2a       	or	r14, r24
     9da:	f9 2a       	or	r15, r25
     9dc:	0a 2b       	or	r16, r26
     9de:	1b 2b       	or	r17, r27
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <__pack_f+0x178>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__pack_f+0x34>
     9e6:	9f c0       	rjmp	.+318    	; 0xb26 <__pack_f+0x172>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__pack_f+0x40>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__pack_f+0x4a>
     9f4:	e1 14       	cp	r14, r1
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	19 f4       	brne	.+6      	; 0xa04 <__pack_f+0x50>
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	96 c0       	rjmp	.+300    	; 0xb30 <__pack_f+0x17c>
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	73 81       	ldd	r23, Z+3	; 0x03
     a08:	9f ef       	ldi	r25, 0xFF	; 255
     a0a:	62 38       	cpi	r22, 0x82	; 130
     a0c:	79 07       	cpc	r23, r25
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__pack_f+0x5e>
     a10:	5b c0       	rjmp	.+182    	; 0xac8 <__pack_f+0x114>
     a12:	22 e8       	ldi	r18, 0x82	; 130
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	26 1b       	sub	r18, r22
     a18:	37 0b       	sbc	r19, r23
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	31 05       	cpc	r19, r1
     a1e:	2c f0       	brlt	.+10     	; 0xa2a <__pack_f+0x76>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	2a c0       	rjmp	.+84     	; 0xa7e <__pack_f+0xca>
     a2a:	b8 01       	movw	r22, r16
     a2c:	a7 01       	movw	r20, r14
     a2e:	02 2e       	mov	r0, r18
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x86>
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	57 95       	ror	r21
     a38:	47 95       	ror	r20
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x7e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x9c>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	2a 95       	dec	r18
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__pack_f+0x94>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	a1 09       	sbc	r26, r1
     a58:	b1 09       	sbc	r27, r1
     a5a:	8e 21       	and	r24, r14
     a5c:	9f 21       	and	r25, r15
     a5e:	a0 23       	and	r26, r16
     a60:	b1 23       	and	r27, r17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	21 f0       	breq	.+8      	; 0xa72 <__pack_f+0xbe>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	9a 01       	movw	r18, r20
     a74:	ab 01       	movw	r20, r22
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	da 01       	movw	r26, r20
     a80:	c9 01       	movw	r24, r18
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	a0 70       	andi	r26, 0x00	; 0
     a88:	b0 70       	andi	r27, 0x00	; 0
     a8a:	80 34       	cpi	r24, 0x40	; 64
     a8c:	91 05       	cpc	r25, r1
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__pack_f+0xee>
     a94:	27 ff       	sbrs	r18, 7
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__pack_f+0xf6>
     a98:	20 5c       	subi	r18, 0xC0	; 192
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	4f 4f       	sbci	r20, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0xf6>
     aa2:	21 5c       	subi	r18, 0xC1	; 193
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	4f 4f       	sbci	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	e0 e0       	ldi	r30, 0x00	; 0
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	3a 07       	cpc	r19, r26
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	4a 07       	cpc	r20, r26
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	5a 07       	cpc	r21, r26
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__pack_f+0x10e>
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	79 01       	movw	r14, r18
     ac4:	8a 01       	movw	r16, r20
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__pack_f+0x162>
     ac8:	60 38       	cpi	r22, 0x80	; 128
     aca:	71 05       	cpc	r23, r1
     acc:	64 f5       	brge	.+88     	; 0xb26 <__pack_f+0x172>
     ace:	fb 01       	movw	r30, r22
     ad0:	e1 58       	subi	r30, 0x81	; 129
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	c7 01       	movw	r24, r14
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	a0 70       	andi	r26, 0x00	; 0
     ade:	b0 70       	andi	r27, 0x00	; 0
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__pack_f+0x144>
     aea:	e7 fe       	sbrs	r14, 7
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__pack_f+0x154>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__pack_f+0x14c>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e8 0e       	add	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	0a 1f       	adc	r16, r26
     b06:	1b 1f       	adc	r17, r27
     b08:	17 ff       	sbrs	r17, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__pack_f+0x162>
     b0c:	16 95       	lsr	r17
     b0e:	07 95       	ror	r16
     b10:	f7 94       	ror	r15
     b12:	e7 94       	ror	r14
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	16 95       	lsr	r17
     b1a:	07 95       	ror	r16
     b1c:	f7 94       	ror	r15
     b1e:	e7 94       	ror	r14
     b20:	8a 95       	dec	r24
     b22:	d1 f7       	brne	.-12     	; 0xb18 <__pack_f+0x164>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__pack_f+0x17c>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	ef ef       	ldi	r30, 0xFF	; 255
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	6e 2f       	mov	r22, r30
     b32:	67 95       	ror	r22
     b34:	66 27       	eor	r22, r22
     b36:	67 95       	ror	r22
     b38:	90 2f       	mov	r25, r16
     b3a:	9f 77       	andi	r25, 0x7F	; 127
     b3c:	d7 94       	ror	r13
     b3e:	dd 24       	eor	r13, r13
     b40:	d7 94       	ror	r13
     b42:	8e 2f       	mov	r24, r30
     b44:	86 95       	lsr	r24
     b46:	49 2f       	mov	r20, r25
     b48:	46 2b       	or	r20, r22
     b4a:	58 2f       	mov	r21, r24
     b4c:	5d 29       	or	r21, r13
     b4e:	b7 01       	movw	r22, r14
     b50:	ca 01       	movw	r24, r20
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	08 95       	ret

00000b5e <__unpack_f>:
     b5e:	fc 01       	movw	r30, r24
     b60:	db 01       	movw	r26, r22
     b62:	40 81       	ld	r20, Z
     b64:	51 81       	ldd	r21, Z+1	; 0x01
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	62 2f       	mov	r22, r18
     b6a:	6f 77       	andi	r22, 0x7F	; 127
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	22 1f       	adc	r18, r18
     b70:	22 27       	eor	r18, r18
     b72:	22 1f       	adc	r18, r18
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	89 2f       	mov	r24, r25
     b78:	88 0f       	add	r24, r24
     b7a:	82 2b       	or	r24, r18
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	99 1f       	adc	r25, r25
     b82:	99 27       	eor	r25, r25
     b84:	99 1f       	adc	r25, r25
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	9c 93       	st	X, r25
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	a9 f5       	brne	.+106    	; 0xbfc <__unpack_f+0x9e>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__unpack_f+0x42>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	37 c0       	rjmp	.+110    	; 0xc0e <__unpack_f+0xb0>
     ba0:	82 e8       	ldi	r24, 0x82	; 130
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	6a 95       	dec	r22
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0x54>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <__unpack_f+0x80>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	20 30       	cpi	r18, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	38 07       	cpc	r19, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	48 07       	cpc	r20, r24
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	58 07       	cpc	r21, r24
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__unpack_f+0x66>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	2d 93       	st	X+, r18
     bf2:	3d 93       	st	X+, r19
     bf4:	4d 93       	st	X+, r20
     bf6:	5c 93       	st	X, r21
     bf8:	17 97       	sbiw	r26, 0x07	; 7
     bfa:	08 95       	ret
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f4       	brne	.+30     	; 0xc20 <__unpack_f+0xc2>
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__unpack_f+0xb4>
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8c 93       	st	X, r24
     c10:	08 95       	ret
     c12:	64 ff       	sbrs	r22, 4
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__unpack_f+0xbe>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 93       	st	X, r24
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <__unpack_f+0xe2>
     c1c:	1c 92       	st	X, r1
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <__unpack_f+0xe2>
     c20:	2f 57       	subi	r18, 0x7F	; 127
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <__unpack_f+0xd4>
     c3e:	70 64       	ori	r23, 0x40	; 64
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	4d 93       	st	X+, r20
     c44:	5d 93       	st	X+, r21
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	17 97       	sbiw	r26, 0x07	; 7
     c4c:	08 95       	ret

00000c4e <__fpcmp_parts_f>:
     c4e:	1f 93       	push	r17
     c50:	dc 01       	movw	r26, r24
     c52:	fb 01       	movw	r30, r22
     c54:	9c 91       	ld	r25, X
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__fpcmp_parts_f+0xe>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <__fpcmp_parts_f+0x9c>
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__fpcmp_parts_f+0x16>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <__fpcmp_parts_f+0x9c>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	51 f4       	brne	.+20     	; 0xc7c <__fpcmp_parts_f+0x2e>
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	1c 91       	ld	r17, X
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	99 f5       	brne	.+102    	; 0xcd6 <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	61 1b       	sub	r22, r17
     c78:	71 09       	sbc	r23, r1
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <__fpcmp_parts_f+0xac>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fpcmp_parts_f+0x3a>
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	31 f4       	brne	.+12     	; 0xc90 <__fpcmp_parts_f+0x42>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f1       	breq	.+110    	; 0xcf6 <__fpcmp_parts_f+0xa8>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <__fpcmp_parts_f+0x9c>
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	1c 91       	ld	r17, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	f1 f0       	breq	.+60     	; 0xcd6 <__fpcmp_parts_f+0x88>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	18 17       	cp	r17, r24
     c9e:	d9 f4       	brne	.+54     	; 0xcd6 <__fpcmp_parts_f+0x88>
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	94 f0       	brlt	.+36     	; 0xcd6 <__fpcmp_parts_f+0x88>
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	bc f0       	brlt	.+46     	; 0xce6 <__fpcmp_parts_f+0x98>
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8d 91       	ld	r24, X+
     cbc:	9d 91       	ld	r25, X+
     cbe:	0d 90       	ld	r0, X+
     cc0:	bc 91       	ld	r27, X
     cc2:	a0 2d       	mov	r26, r0
     cc4:	24 81       	ldd	r18, Z+4	; 0x04
     cc6:	35 81       	ldd	r19, Z+5	; 0x05
     cc8:	46 81       	ldd	r20, Z+6	; 0x06
     cca:	57 81       	ldd	r21, Z+7	; 0x07
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	4a 07       	cpc	r20, r26
     cd2:	5b 07       	cpc	r21, r27
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <__fpcmp_parts_f+0x8e>
     cd6:	11 23       	and	r17, r17
     cd8:	41 f0       	breq	.+16     	; 0xcea <__fpcmp_parts_f+0x9c>
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	a4 07       	cpc	r26, r20
     ce2:	b5 07       	cpc	r27, r21
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fpcmp_parts_f+0xa8>
     ce6:	11 23       	and	r17, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__fpcmp_parts_f+0xac>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__fpcmp_parts_f+0xac>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <M_Timer0_voidInit>:
void (*pv_CallBackArr[2]) (void) = {NULL};
void (*pv_ICUcallBackPtr) (void) = NULL;


void M_Timer0_voidInit(void)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
      #else
          #error ("wrong OC0 mode")
      #endif
///////////////////////////////////////////////////////////////// FAST_PWM
#elif (TIMER0_MODE == TIMER0_FAST_PWM_MODE)
	  SetBit(TIMER0_TCCR0,TIMER0_WGM00);
     d08:	a3 e5       	ldi	r26, 0x53	; 83
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e3 e5       	ldi	r30, 0x53	; 83
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8c 93       	st	X, r24
	  SetBit(TIMER0_TCCR0,TIMER0_WGM01);
     d16:	a3 e5       	ldi	r26, 0x53	; 83
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	88 60       	ori	r24, 0x08	; 8
     d22:	8c 93       	st	X, r24
	  //2- choose OC0 Mode
      #if (TIMER0_OC0_MODE == TIMER0_OC0_FAST_INVERTED  || TIMER0_OC0_MODE == TIMER0_OC0_FAST_NONINVERTED )
      	TIMER0_TCCR0 &= TIMER0_OC0_MASK ;
     d24:	a3 e5       	ldi	r26, 0x53	; 83
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e3 e5       	ldi	r30, 0x53	; 83
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7c       	andi	r24, 0xCF	; 207
     d30:	8c 93       	st	X, r24
      	TIMER0_TCCR0 |= TIMER0_OC0_MODE;
     d32:	a3 e5       	ldi	r26, 0x53	; 83
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e3 e5       	ldi	r30, 0x53	; 83
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	8c 93       	st	X, r24
      #endif
/////////////////////////////////////////////////////////////////
#else
      #error ("wrong Timer mode")
#endif
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <M_Timer0_voidTimerStop>:

void M_Timer0_voidTimerStop(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0 &= TIMER0_PRESCALER_MASK;
     d4e:	a3 e5       	ldi	r26, 0x53	; 83
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e3 e5       	ldi	r30, 0x53	; 83
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	88 7f       	andi	r24, 0xF8	; 248
     d5a:	8c 93       	st	X, r24
	TIMER0_TCCR0 |=  TIMER0_NO_CLOCK ;
     d5c:	a3 e5       	ldi	r26, 0x53	; 83
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e3 e5       	ldi	r30, 0x53	; 83
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	8c 93       	st	X, r24
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <M_Timer0_voidTimerStart>:

void M_Timer0_voidTimerStart(void)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
	TIMER0_TCCR0 &= TIMER0_PRESCALER_MASK;
     d76:	a3 e5       	ldi	r26, 0x53	; 83
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e3 e5       	ldi	r30, 0x53	; 83
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	88 7f       	andi	r24, 0xF8	; 248
     d82:	8c 93       	st	X, r24
	TIMER0_TCCR0 |=  TIMER0_PRESCALLER;
     d84:	a3 e5       	ldi	r26, 0x53	; 83
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e3 e5       	ldi	r30, 0x53	; 83
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	8c 93       	st	X, r24
}
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <M_Timer0_voidSetPreload>:

void M_Timer0_voidSetPreload(u8 copy_u8Preload)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	0f 92       	push	r0
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_TCNT0 = copy_u8Preload;
     da4:	e2 e5       	ldi	r30, 0x52	; 82
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	80 83       	st	Z, r24
}
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <M_Timer0_voidSetCompareMatch>:

void M_Timer0_voidSetCompareMatch(u8 copy_u8CmpValue)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	89 83       	std	Y+1, r24	; 0x01
   TIMER0_OCR0 = copy_u8CmpValue;
     dc0:	ec e5       	ldi	r30, 0x5C	; 92
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	80 83       	st	Z, r24
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <M_Timer0_voidSetCallBack>:

void M_Timer0_voidSetCallBack(void(*copy_ptrCallBack)(void) ,u8 copy_u8IntID)
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <M_Timer0_voidSetCallBack+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <M_Timer0_voidSetCallBack+0x8>
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	9a 83       	std	Y+2, r25	; 0x02
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	6b 83       	std	Y+3, r22	; 0x03
   switch (copy_u8IntID)
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3d 83       	std	Y+5, r19	; 0x05
     dec:	2c 83       	std	Y+4, r18	; 0x04
     dee:	8c 81       	ldd	r24, Y+4	; 0x04
     df0:	9d 81       	ldd	r25, Y+5	; 0x05
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	31 f0       	breq	.+12     	; 0xe02 <M_Timer0_voidSetCallBack+0x32>
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	3d 81       	ldd	r19, Y+5	; 0x05
     dfa:	21 30       	cpi	r18, 0x01	; 1
     dfc:	31 05       	cpc	r19, r1
     dfe:	41 f0       	breq	.+16     	; 0xe10 <M_Timer0_voidSetCallBack+0x40>
     e00:	0d c0       	rjmp	.+26     	; 0xe1c <M_Timer0_voidSetCallBack+0x4c>
   {
   case TIMER0_OVF_INT_ID :
	   pv_CallBackArr[TIMER0_OVF_INT_ID]=  copy_ptrCallBack;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	90 93 fd 01 	sts	0x01FD, r25
     e0a:	80 93 fc 01 	sts	0x01FC, r24
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <M_Timer0_voidSetCallBack+0x4c>
	   break;
   case TIMER0_CTC_INT_ID:
	   pv_CallBackArr[TIMER0_CTC_INT_ID]=  copy_ptrCallBack;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	90 93 ff 01 	sts	0x01FF, r25
     e18:	80 93 fe 01 	sts	0x01FE, r24
	   break;
   default:
	   return ; //you can return error state here
   }
}
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <M_Timer0_voidInterruptEnable>:

void M_Timer0_voidInterruptEnable(u8 copy_u8IntID)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <M_Timer0_voidInterruptEnable+0x6>
     e32:	0f 92       	push	r0
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_u8IntID)
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	3b 83       	std	Y+3, r19	; 0x03
     e42:	2a 83       	std	Y+2, r18	; 0x02
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	31 f0       	breq	.+12     	; 0xe58 <M_Timer0_voidInterruptEnable+0x2c>
     e4c:	2a 81       	ldd	r18, Y+2	; 0x02
     e4e:	3b 81       	ldd	r19, Y+3	; 0x03
     e50:	21 30       	cpi	r18, 0x01	; 1
     e52:	31 05       	cpc	r19, r1
     e54:	49 f0       	breq	.+18     	; 0xe68 <M_Timer0_voidInterruptEnable+0x3c>
     e56:	0f c0       	rjmp	.+30     	; 0xe76 <M_Timer0_voidInterruptEnable+0x4a>
	{
	case TIMER0_OVF_INT_ID:
		SetBit(TIMER_TIMSK,TIMER_TOIE0 );
     e58:	a9 e5       	ldi	r26, 0x59	; 89
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e9 e5       	ldi	r30, 0x59	; 89
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	81 60       	ori	r24, 0x01	; 1
     e64:	8c 93       	st	X, r24
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <M_Timer0_voidInterruptEnable+0x4a>
		break;
	case TIMER0_CTC_INT_ID:
		SetBit(TIMER_TIMSK,TIMER_OCIE0);
     e68:	a9 e5       	ldi	r26, 0x59	; 89
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	8c 93       	st	X, r24
		break;
	default :
		return ;// error state
	}
}
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <M_Timer0_voidInterruptDisable>:

void M_Timer0_voidInterruptDisable(u8 copy_u8IntID)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <M_Timer0_voidInterruptDisable+0x6>
     e88:	0f 92       	push	r0
     e8a:	cd b7       	in	r28, 0x3d	; 61
     e8c:	de b7       	in	r29, 0x3e	; 62
     e8e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8IntID)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	3b 83       	std	Y+3, r19	; 0x03
     e98:	2a 83       	std	Y+2, r18	; 0x02
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	9b 81       	ldd	r25, Y+3	; 0x03
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	31 f0       	breq	.+12     	; 0xeae <M_Timer0_voidInterruptDisable+0x2c>
     ea2:	2a 81       	ldd	r18, Y+2	; 0x02
     ea4:	3b 81       	ldd	r19, Y+3	; 0x03
     ea6:	21 30       	cpi	r18, 0x01	; 1
     ea8:	31 05       	cpc	r19, r1
     eaa:	49 f0       	breq	.+18     	; 0xebe <M_Timer0_voidInterruptDisable+0x3c>
     eac:	0f c0       	rjmp	.+30     	; 0xecc <M_Timer0_voidInterruptDisable+0x4a>
	{
	case TIMER0_OVF_INT_ID:
		ClrBit(TIMER_TIMSK,TIMER_TOIE0 );
     eae:	a9 e5       	ldi	r26, 0x59	; 89
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e9 e5       	ldi	r30, 0x59	; 89
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8e 7f       	andi	r24, 0xFE	; 254
     eba:	8c 93       	st	X, r24
     ebc:	07 c0       	rjmp	.+14     	; 0xecc <M_Timer0_voidInterruptDisable+0x4a>
		break;
	case TIMER0_CTC_INT_ID:
		ClrBit(TIMER_TIMSK,TIMER_OCIE0);
     ebe:	a9 e5       	ldi	r26, 0x59	; 89
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e9 e5       	ldi	r30, 0x59	; 89
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8d 7f       	andi	r24, 0xFD	; 253
     eca:	8c 93       	st	X, r24
		break;
	default :
		return ;// error state
	}
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <M_Timer0_voidSetFastPWM>:

void M_Timer0_voidSetFastPWM(u8 copy_u8DutyCycle)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	#if (TIMER0_OC0_MODE == TIMER0_OC0_FAST_NONINVERTED )
	TIMER0_OCR0 =  (((copy_u8DutyCycle *256) / 100) -1);
     ee4:	ec e5       	ldi	r30, 0x5C	; 92
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	98 2f       	mov	r25, r24
     ef0:	88 27       	eor	r24, r24
     ef2:	24 e6       	ldi	r18, 0x64	; 100
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	b9 01       	movw	r22, r18
     ef8:	0e 94 17 22 	call	0x442e	; 0x442e <__divmodhi4>
     efc:	cb 01       	movw	r24, r22
     efe:	81 50       	subi	r24, 0x01	; 1
     f00:	80 83       	st	Z, r24
	#elif (TIMER0_OC0_MODE == TIMER0_OC0_FAST_INVERTED )
	TIMER0_OCR0 = abs (255 - (( copy_u8DutyCycle * 256)/100));
	#else
	#endif
}
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	08 95       	ret

00000f0a <M_Timer0_voidSetPhasePWM>:
void M_Timer0_voidSetPhasePWM(u8 copy_u8DutyCycle)
{
     f0a:	df 93       	push	r29
     f0c:	cf 93       	push	r28
     f0e:	0f 92       	push	r0
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	89 83       	std	Y+1, r24	; 0x01
	#if (TIMER0_OC0_MODE == TIMER0_OC0_PHASE_NONINVERTED )
	TIMER0_OCR0 =  ((copy_u8DutyCycle *255) / 100);
     f16:	ec e5       	ldi	r30, 0x5C	; 92
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	48 2f       	mov	r20, r24
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	ca 01       	movw	r24, r20
     f22:	9c 01       	movw	r18, r24
     f24:	22 0f       	add	r18, r18
     f26:	33 1f       	adc	r19, r19
     f28:	c9 01       	movw	r24, r18
     f2a:	96 95       	lsr	r25
     f2c:	98 2f       	mov	r25, r24
     f2e:	88 27       	eor	r24, r24
     f30:	97 95       	ror	r25
     f32:	87 95       	ror	r24
     f34:	82 1b       	sub	r24, r18
     f36:	93 0b       	sbc	r25, r19
     f38:	84 0f       	add	r24, r20
     f3a:	95 1f       	adc	r25, r21
     f3c:	24 e6       	ldi	r18, 0x64	; 100
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	b9 01       	movw	r22, r18
     f42:	0e 94 17 22 	call	0x442e	; 0x442e <__divmodhi4>
     f46:	cb 01       	movw	r24, r22
     f48:	80 83       	st	Z, r24
	#elif (TIMER0_OC0_MODE == TIMER0_OC0_PHASE_INVERTED )
	TIMER0_OCR0 = 255 - ((copy_u8DutyCycle * 255)/100);
	#else
	#endif
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <__vector_11>:
ISR( TIMER0_OVF_vect)
{
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	ef 93       	push	r30
     f72:	ff 93       	push	r31
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	if(pv_CallBackArr[TIMER0_OVF_INT_ID] !=  NULL )
     f7c:	80 91 fc 01 	lds	r24, 0x01FC
     f80:	90 91 fd 01 	lds	r25, 0x01FD
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	29 f0       	breq	.+10     	; 0xf92 <__vector_11+0x40>
	    pv_CallBackArr[TIMER0_OVF_INT_ID]();
     f88:	e0 91 fc 01 	lds	r30, 0x01FC
     f8c:	f0 91 fd 01 	lds	r31, 0x01FD
     f90:	09 95       	icall
}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	bf 91       	pop	r27
     f9c:	af 91       	pop	r26
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	7f 91       	pop	r23
     fa4:	6f 91       	pop	r22
     fa6:	5f 91       	pop	r21
     fa8:	4f 91       	pop	r20
     faa:	3f 91       	pop	r19
     fac:	2f 91       	pop	r18
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	if(pv_CallBackArr[TIMER0_CTC_INT_ID] !=  NULL )
     fe2:	80 91 fe 01 	lds	r24, 0x01FE
     fe6:	90 91 ff 01 	lds	r25, 0x01FF
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	29 f0       	breq	.+10     	; 0xff8 <__vector_10+0x40>
	   pv_CallBackArr[TIMER0_CTC_INT_ID]();
     fee:	e0 91 fe 01 	lds	r30, 0x01FE
     ff2:	f0 91 ff 01 	lds	r31, 0x01FF
     ff6:	09 95       	icall
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0
    101a:	1f 90       	pop	r1
    101c:	18 95       	reti

0000101e <M_Timer1_voidInit>:

/////////////////////////////////////////////////////////
void M_Timer1_voidInit(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
	 // Mode -> Normal Mode, Prescaler = 8
	 ClrBit(TIMER1_TCCR1B, TIMER1_CS10);
    1026:	ae e4       	ldi	r26, 0x4E	; 78
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ee e4       	ldi	r30, 0x4E	; 78
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8e 7f       	andi	r24, 0xFE	; 254
    1032:	8c 93       	st	X, r24
	 SetBit(TIMER1_TCCR1B, TIMER1_CS11);
    1034:	ae e4       	ldi	r26, 0x4E	; 78
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ee e4       	ldi	r30, 0x4E	; 78
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	8c 93       	st	X, r24
	 ClrBit(TIMER1_TCCR1B, TIMER1_CS12);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
}
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <M_ICU_voidInit>:
void M_ICU_voidInit(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
	//Set Trigger and Enable Interrupt
	// Trigger => Positive Edge
	SetBit(TIMER1_TCCR1B, TIMER1_ICES1);
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	8c 93       	st	X, r24
	// Enable ICU Interrupt
	SetBit(TIMER_TIMSK, TIMER_TICIE1);
    106c:	a9 e5       	ldi	r26, 0x59	; 89
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e9 e5       	ldi	r30, 0x59	; 89
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 62       	ori	r24, 0x20	; 32
    1078:	8c 93       	st	X, r24
}
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <M_ICU_voidReadInputValue>:
void M_ICU_voidReadInputValue(u16* copy_ptrValue)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <M_ICU_voidReadInputValue+0x6>
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01
	*copy_ptrValue = TIMER1_ICR1;
    108e:	e6 e4       	ldi	r30, 0x46	; 70
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	e9 81       	ldd	r30, Y+1	; 0x01
    1098:	fa 81       	ldd	r31, Y+2	; 0x02
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <M_ICU_voidSetTrigger>:
void M_ICU_voidSetTrigger(u8 copyu8Trigger)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <M_ICU_voidSetTrigger+0x6>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
	switch(copyu8Trigger)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3b 83       	std	Y+3, r19	; 0x03
    10be:	2a 83       	std	Y+2, r18	; 0x02
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	69 f0       	breq	.+26     	; 0x10e2 <M_ICU_voidSetTrigger+0x3a>
    10c8:	2a 81       	ldd	r18, Y+2	; 0x02
    10ca:	3b 81       	ldd	r19, Y+3	; 0x03
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	31 05       	cpc	r19, r1
    10d0:	79 f4       	brne	.+30     	; 0x10f0 <M_ICU_voidSetTrigger+0x48>
	{
		case ICU_TRIGGER_RAISING_EDGE:
			SetBit(TIMER1_TCCR1B, TIMER1_ICES1);
    10d2:	ae e4       	ldi	r26, 0x4E	; 78
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ee e4       	ldi	r30, 0x4E	; 78
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	8c 93       	st	X, r24
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <M_ICU_voidSetTrigger+0x48>
			break;
		case ICU_TRIGGER_FALLING_EDGE:
			ClrBit(TIMER1_TCCR1B, TIMER1_ICES1);
    10e2:	ae e4       	ldi	r26, 0x4E	; 78
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	ee e4       	ldi	r30, 0x4E	; 78
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	8f 7b       	andi	r24, 0xBF	; 191
    10ee:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	08 95       	ret

000010fc <M_ICU_voidEnableInt>:
void M_ICU_voidEnableInt(void)
{
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
	// Enable ICU Interrupt
	SetBit(TIMER_TIMSK, TIMER_TICIE1);
    1104:	a9 e5       	ldi	r26, 0x59	; 89
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e9 e5       	ldi	r30, 0x59	; 89
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 62       	ori	r24, 0x20	; 32
    1110:	8c 93       	st	X, r24
}
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <M_ICU_voidDisableInt>:
void M_ICU_voidDisableInt(void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	// Disable ICU Interrupt
	ClrBit(TIMER_TIMSK, TIMER_TICIE1);
    1120:	a9 e5       	ldi	r26, 0x59	; 89
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e9 e5       	ldi	r30, 0x59	; 89
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 7d       	andi	r24, 0xDF	; 223
    112c:	8c 93       	st	X, r24
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <M_ICU_voidSetCallBack>:
void M_ICU_voidSetCallBack(void(*copy_ptrCallBack)(void))
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <M_ICU_voidSetCallBack+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	9a 83       	std	Y+2, r25	; 0x02
    1140:	89 83       	std	Y+1, r24	; 0x01
	pv_ICUcallBackPtr = copy_ptrCallBack;
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	9a 81       	ldd	r25, Y+2	; 0x02
    1146:	90 93 01 02 	sts	0x0201, r25
    114a:	80 93 00 02 	sts	0x0200, r24
}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1158:	1f 92       	push	r1
    115a:	0f 92       	push	r0
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	0f 92       	push	r0
    1160:	11 24       	eor	r1, r1
    1162:	2f 93       	push	r18
    1164:	3f 93       	push	r19
    1166:	4f 93       	push	r20
    1168:	5f 93       	push	r21
    116a:	6f 93       	push	r22
    116c:	7f 93       	push	r23
    116e:	8f 93       	push	r24
    1170:	9f 93       	push	r25
    1172:	af 93       	push	r26
    1174:	bf 93       	push	r27
    1176:	ef 93       	push	r30
    1178:	ff 93       	push	r31
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	pv_ICUcallBackPtr();
    1182:	e0 91 00 02 	lds	r30, 0x0200
    1186:	f0 91 01 02 	lds	r31, 0x0201
    118a:	09 95       	icall
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <M_GIE_voidEnbale>:
#include "reg.h"
#include "Gie.h"


void M_GIE_voidEnbale(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	//SetBit(SREG,7);
	asm("SEI");
    11ba:	78 94       	sei
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <M_GIE_voidDisable>:
void M_GIE_voidDisable(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	//ClrBit(SREG,7);
	asm("CLI");
    11ca:	f8 94       	cli
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <M_ExtInt_Init>:

#include "ExtInt.h"
void (*CallBack)(void);

void M_ExtInt_Init(void)
{
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
	// to select falling for INT0
	#if   SENSE_CONTROL         ==        FALLING_ED
	ClrBit(MCUCR_REG,0);
    11da:	a5 e5       	ldi	r26, 0x55	; 85
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e5 e5       	ldi	r30, 0x55	; 85
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8e 7f       	andi	r24, 0xFE	; 254
    11e6:	8c 93       	st	X, r24
	SetBit(MCUCR_REG,1);
    11e8:	a5 e5       	ldi	r26, 0x55	; 85
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e5 e5       	ldi	r30, 0x55	; 85
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	8c 93       	st	X, r24
	#elif   SENSE_CONTROL       ==        LOW_LEVEL
	ClrBit(MCUCR_REG,0);
	ClrBit(MCUCR_REG,1);
	#endif
	// to enable INT0
	SetBit(GICR_REG, 6);
    11f6:	ab e5       	ldi	r26, 0x5B	; 91
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	eb e5       	ldi	r30, 0x5B	; 91
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	80 64       	ori	r24, 0x40	; 64
    1202:	8c 93       	st	X, r24
	// to enable global interrupt
	SetBit(SREG_REG, 7);
    1204:	af e5       	ldi	r26, 0x5F	; 95
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ef e5       	ldi	r30, 0x5F	; 95
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	80 68       	ori	r24, 0x80	; 128
    1210:	8c 93       	st	X, r24
}
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <M_ExtInt_SetCallBack>:

void M_ExtInt_SetCallBack(void(*ptr)(void))
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <M_ExtInt_SetCallBack+0x6>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	CallBack = ptr;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	9a 81       	ldd	r25, Y+2	; 0x02
    122a:	90 93 04 02 	sts	0x0204, r25
    122e:	80 93 03 02 	sts	0x0203, r24
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <__vector_1>:

ISR(INT0_vect)
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	2f 93       	push	r18
    1248:	3f 93       	push	r19
    124a:	4f 93       	push	r20
    124c:	5f 93       	push	r21
    124e:	6f 93       	push	r22
    1250:	7f 93       	push	r23
    1252:	8f 93       	push	r24
    1254:	9f 93       	push	r25
    1256:	af 93       	push	r26
    1258:	bf 93       	push	r27
    125a:	ef 93       	push	r30
    125c:	ff 93       	push	r31
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	CallBack();
    1266:	e0 91 03 02 	lds	r30, 0x0203
    126a:	f0 91 04 02 	lds	r31, 0x0204
    126e:	09 95       	icall
	//H_Led_Tog(BLU_LED);
}
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	ff 91       	pop	r31
    1276:	ef 91       	pop	r30
    1278:	bf 91       	pop	r27
    127a:	af 91       	pop	r26
    127c:	9f 91       	pop	r25
    127e:	8f 91       	pop	r24
    1280:	7f 91       	pop	r23
    1282:	6f 91       	pop	r22
    1284:	5f 91       	pop	r21
    1286:	4f 91       	pop	r20
    1288:	3f 91       	pop	r19
    128a:	2f 91       	pop	r18
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <M_Dio_PinMode>:
 *      Author: Eng hadeer
 */

#include "Dio.h"
void M_Dio_PinMode(u8 Local_u8_Num, u8 Local_u8_Mode)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	2a 97       	sbiw	r28, 0x0a	; 10
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	8b 83       	std	Y+3, r24	; 0x03
    12ac:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9a e0       	ldi	r25, 0x0A	; 10
    12b2:	69 2f       	mov	r22, r25
    12b4:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    12b8:	89 2f       	mov	r24, r25
    12ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9a e0       	ldi	r25, 0x0A	; 10
    12c0:	69 2f       	mov	r22, r25
    12c2:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    12c6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3a 87       	std	Y+10, r19	; 0x0a
    12d0:	29 87       	std	Y+9, r18	; 0x09
    12d2:	89 85       	ldd	r24, Y+9	; 0x09
    12d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	39 f0       	breq	.+14     	; 0x12e8 <M_Dio_PinMode+0x52>
    12da:	29 85       	ldd	r18, Y+9	; 0x09
    12dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12de:	21 30       	cpi	r18, 0x01	; 1
    12e0:	31 05       	cpc	r19, r1
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <M_Dio_PinMode+0x50>
    12e4:	76 c0       	rjmp	.+236    	; 0x13d2 <M_Dio_PinMode+0x13c>
    12e6:	e4 c0       	rjmp	.+456    	; 0x14b0 <M_Dio_PinMode+0x21a>
	{
	case INPUT:
		switch(Local_u8_Port)
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	38 87       	std	Y+8, r19	; 0x08
    12f0:	2f 83       	std	Y+7, r18	; 0x07
    12f2:	8f 81       	ldd	r24, Y+7	; 0x07
    12f4:	98 85       	ldd	r25, Y+8	; 0x08
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	91 05       	cpc	r25, r1
    12fa:	61 f1       	breq	.+88     	; 0x1354 <M_Dio_PinMode+0xbe>
    12fc:	2f 81       	ldd	r18, Y+7	; 0x07
    12fe:	38 85       	ldd	r19, Y+8	; 0x08
    1300:	23 30       	cpi	r18, 0x03	; 3
    1302:	31 05       	cpc	r19, r1
    1304:	34 f4       	brge	.+12     	; 0x1312 <M_Dio_PinMode+0x7c>
    1306:	8f 81       	ldd	r24, Y+7	; 0x07
    1308:	98 85       	ldd	r25, Y+8	; 0x08
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	91 05       	cpc	r25, r1
    130e:	69 f0       	breq	.+26     	; 0x132a <M_Dio_PinMode+0x94>
    1310:	cf c0       	rjmp	.+414    	; 0x14b0 <M_Dio_PinMode+0x21a>
    1312:	2f 81       	ldd	r18, Y+7	; 0x07
    1314:	38 85       	ldd	r19, Y+8	; 0x08
    1316:	23 30       	cpi	r18, 0x03	; 3
    1318:	31 05       	cpc	r19, r1
    131a:	89 f1       	breq	.+98     	; 0x137e <M_Dio_PinMode+0xe8>
    131c:	8f 81       	ldd	r24, Y+7	; 0x07
    131e:	98 85       	ldd	r25, Y+8	; 0x08
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	91 05       	cpc	r25, r1
    1324:	09 f4       	brne	.+2      	; 0x1328 <M_Dio_PinMode+0x92>
    1326:	40 c0       	rjmp	.+128    	; 0x13a8 <M_Dio_PinMode+0x112>
    1328:	c3 c0       	rjmp	.+390    	; 0x14b0 <M_Dio_PinMode+0x21a>
		{
		case 1: ClrBit(DDRA_REG,Local_u8_Pin); break;
    132a:	aa e3       	ldi	r26, 0x3A	; 58
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	ea e3       	ldi	r30, 0x3A	; 58
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	48 2f       	mov	r20, r24
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	02 2e       	mov	r0, r18
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <M_Dio_PinMode+0xb2>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	0a 94       	dec	r0
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <M_Dio_PinMode+0xae>
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	ae c0       	rjmp	.+348    	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 2: ClrBit(DDRB_REG,Local_u8_Pin); break;
    1354:	a7 e3       	ldi	r26, 0x37	; 55
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e7 e3       	ldi	r30, 0x37	; 55
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <M_Dio_PinMode+0xdc>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <M_Dio_PinMode+0xd8>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	99 c0       	rjmp	.+306    	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 3: ClrBit(DDRC_REG,Local_u8_Pin); break;
    137e:	a4 e3       	ldi	r26, 0x34	; 52
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e4 e3       	ldi	r30, 0x34	; 52
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <M_Dio_PinMode+0x106>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <M_Dio_PinMode+0x102>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	84 c0       	rjmp	.+264    	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 4: ClrBit(DDRD_REG,Local_u8_Pin); break;
    13a8:	a1 e3       	ldi	r26, 0x31	; 49
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e1 e3       	ldi	r30, 0x31	; 49
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <M_Dio_PinMode+0x130>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <M_Dio_PinMode+0x12c>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	6f c0       	rjmp	.+222    	; 0x14b0 <M_Dio_PinMode+0x21a>
		default:                           break;
		}
	    break;
	case OUTPUT:
		switch(Local_u8_Port)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	2d 83       	std	Y+5, r18	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	91 05       	cpc	r25, r1
    13e4:	51 f1       	breq	.+84     	; 0x143a <M_Dio_PinMode+0x1a4>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	23 30       	cpi	r18, 0x03	; 3
    13ec:	31 05       	cpc	r19, r1
    13ee:	34 f4       	brge	.+12     	; 0x13fc <M_Dio_PinMode+0x166>
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	91 05       	cpc	r25, r1
    13f8:	61 f0       	breq	.+24     	; 0x1412 <M_Dio_PinMode+0x17c>
    13fa:	5a c0       	rjmp	.+180    	; 0x14b0 <M_Dio_PinMode+0x21a>
    13fc:	2d 81       	ldd	r18, Y+5	; 0x05
    13fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1400:	23 30       	cpi	r18, 0x03	; 3
    1402:	31 05       	cpc	r19, r1
    1404:	71 f1       	breq	.+92     	; 0x1462 <M_Dio_PinMode+0x1cc>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	91 05       	cpc	r25, r1
    140e:	e9 f1       	breq	.+122    	; 0x148a <M_Dio_PinMode+0x1f4>
    1410:	4f c0       	rjmp	.+158    	; 0x14b0 <M_Dio_PinMode+0x21a>
		{
		case 1: SetBit(DDRA_REG,Local_u8_Pin); break;
    1412:	aa e3       	ldi	r26, 0x3A	; 58
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ea e3       	ldi	r30, 0x3A	; 58
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <M_Dio_PinMode+0x19a>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <M_Dio_PinMode+0x196>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	3b c0       	rjmp	.+118    	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 2: SetBit(DDRB_REG,Local_u8_Pin); break;
    143a:	a7 e3       	ldi	r26, 0x37	; 55
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e7 e3       	ldi	r30, 0x37	; 55
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <M_Dio_PinMode+0x1c2>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <M_Dio_PinMode+0x1be>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	27 c0       	rjmp	.+78     	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 3: SetBit(DDRC_REG,Local_u8_Pin); break;
    1462:	a4 e3       	ldi	r26, 0x34	; 52
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e4 e3       	ldi	r30, 0x34	; 52
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <M_Dio_PinMode+0x1ea>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <M_Dio_PinMode+0x1e6>
    1484:	84 2b       	or	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	13 c0       	rjmp	.+38     	; 0x14b0 <M_Dio_PinMode+0x21a>
		case 4: SetBit(DDRD_REG,Local_u8_Pin); break;
    148a:	a1 e3       	ldi	r26, 0x31	; 49
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e1 e3       	ldi	r30, 0x31	; 49
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	48 2f       	mov	r20, r24
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	28 2f       	mov	r18, r24
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 2e       	mov	r0, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <M_Dio_PinMode+0x212>
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	0a 94       	dec	r0
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <M_Dio_PinMode+0x20e>
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
		default:                           break;
		}
	    break;
	default:                               break;
	}
}
    14b0:	2a 96       	adiw	r28, 0x0a	; 10
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <M_Dio_PinWrite>:

void M_Dio_PinWrite(u8 Local_u8_Num, u8 Local_u8_Mode)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	2a 97       	sbiw	r28, 0x0a	; 10
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9a e0       	ldi	r25, 0x0A	; 10
    14de:	69 2f       	mov	r22, r25
    14e0:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    14e4:	89 2f       	mov	r24, r25
    14e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	9a e0       	ldi	r25, 0x0A	; 10
    14ec:	69 2f       	mov	r22, r25
    14ee:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    14f2:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Mode)
    14f4:	8c 81       	ldd	r24, Y+4	; 0x04
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3a 87       	std	Y+10, r19	; 0x0a
    14fc:	29 87       	std	Y+9, r18	; 0x09
    14fe:	89 85       	ldd	r24, Y+9	; 0x09
    1500:	9a 85       	ldd	r25, Y+10	; 0x0a
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	39 f0       	breq	.+14     	; 0x1514 <M_Dio_PinWrite+0x52>
    1506:	29 85       	ldd	r18, Y+9	; 0x09
    1508:	3a 85       	ldd	r19, Y+10	; 0x0a
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	31 05       	cpc	r19, r1
    150e:	09 f4       	brne	.+2      	; 0x1512 <M_Dio_PinWrite+0x50>
    1510:	76 c0       	rjmp	.+236    	; 0x15fe <M_Dio_PinWrite+0x13c>
    1512:	e4 c0       	rjmp	.+456    	; 0x16dc <M_Dio_PinWrite+0x21a>
	{
	case LOW:
		switch(Local_u8_Port)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	38 87       	std	Y+8, r19	; 0x08
    151c:	2f 83       	std	Y+7, r18	; 0x07
    151e:	8f 81       	ldd	r24, Y+7	; 0x07
    1520:	98 85       	ldd	r25, Y+8	; 0x08
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	91 05       	cpc	r25, r1
    1526:	61 f1       	breq	.+88     	; 0x1580 <M_Dio_PinWrite+0xbe>
    1528:	2f 81       	ldd	r18, Y+7	; 0x07
    152a:	38 85       	ldd	r19, Y+8	; 0x08
    152c:	23 30       	cpi	r18, 0x03	; 3
    152e:	31 05       	cpc	r19, r1
    1530:	34 f4       	brge	.+12     	; 0x153e <M_Dio_PinWrite+0x7c>
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	98 85       	ldd	r25, Y+8	; 0x08
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	69 f0       	breq	.+26     	; 0x1556 <M_Dio_PinWrite+0x94>
    153c:	cf c0       	rjmp	.+414    	; 0x16dc <M_Dio_PinWrite+0x21a>
    153e:	2f 81       	ldd	r18, Y+7	; 0x07
    1540:	38 85       	ldd	r19, Y+8	; 0x08
    1542:	23 30       	cpi	r18, 0x03	; 3
    1544:	31 05       	cpc	r19, r1
    1546:	89 f1       	breq	.+98     	; 0x15aa <M_Dio_PinWrite+0xe8>
    1548:	8f 81       	ldd	r24, Y+7	; 0x07
    154a:	98 85       	ldd	r25, Y+8	; 0x08
    154c:	84 30       	cpi	r24, 0x04	; 4
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <M_Dio_PinWrite+0x92>
    1552:	40 c0       	rjmp	.+128    	; 0x15d4 <M_Dio_PinWrite+0x112>
    1554:	c3 c0       	rjmp	.+390    	; 0x16dc <M_Dio_PinWrite+0x21a>
		{
		case 1: ClrBit(PORTA_REG,Local_u8_Pin); break;
    1556:	ab e3       	ldi	r26, 0x3B	; 59
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	eb e3       	ldi	r30, 0x3B	; 59
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <M_Dio_PinWrite+0xb2>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <M_Dio_PinWrite+0xae>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	ae c0       	rjmp	.+348    	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 2: ClrBit(PORTB_REG,Local_u8_Pin); break;
    1580:	a8 e3       	ldi	r26, 0x38	; 56
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 e3       	ldi	r30, 0x38	; 56
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <M_Dio_PinWrite+0xdc>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <M_Dio_PinWrite+0xd8>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	99 c0       	rjmp	.+306    	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 3: ClrBit(PORTC_REG,Local_u8_Pin); break;
    15aa:	a5 e3       	ldi	r26, 0x35	; 53
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e5 e3       	ldi	r30, 0x35	; 53
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <M_Dio_PinWrite+0x106>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <M_Dio_PinWrite+0x102>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	84 c0       	rjmp	.+264    	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 4: ClrBit(PORTD_REG,Local_u8_Pin); break;
    15d4:	a2 e3       	ldi	r26, 0x32	; 50
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e2 e3       	ldi	r30, 0x32	; 50
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <M_Dio_PinWrite+0x130>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <M_Dio_PinWrite+0x12c>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
    15fc:	6f c0       	rjmp	.+222    	; 0x16dc <M_Dio_PinWrite+0x21a>
		default:                            break;
		}
	    break;
	case HIGH:
		switch(Local_u8_Port)
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3e 83       	std	Y+6, r19	; 0x06
    1606:	2d 83       	std	Y+5, r18	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 05       	cpc	r25, r1
    1610:	51 f1       	breq	.+84     	; 0x1666 <M_Dio_PinWrite+0x1a4>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	31 05       	cpc	r19, r1
    161a:	34 f4       	brge	.+12     	; 0x1628 <M_Dio_PinWrite+0x166>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	81 30       	cpi	r24, 0x01	; 1
    1622:	91 05       	cpc	r25, r1
    1624:	61 f0       	breq	.+24     	; 0x163e <M_Dio_PinWrite+0x17c>
    1626:	5a c0       	rjmp	.+180    	; 0x16dc <M_Dio_PinWrite+0x21a>
    1628:	2d 81       	ldd	r18, Y+5	; 0x05
    162a:	3e 81       	ldd	r19, Y+6	; 0x06
    162c:	23 30       	cpi	r18, 0x03	; 3
    162e:	31 05       	cpc	r19, r1
    1630:	71 f1       	breq	.+92     	; 0x168e <M_Dio_PinWrite+0x1cc>
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	91 05       	cpc	r25, r1
    163a:	e9 f1       	breq	.+122    	; 0x16b6 <M_Dio_PinWrite+0x1f4>
    163c:	4f c0       	rjmp	.+158    	; 0x16dc <M_Dio_PinWrite+0x21a>
		{
		case 1: SetBit(PORTA_REG,Local_u8_Pin); break;
    163e:	ab e3       	ldi	r26, 0x3B	; 59
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e3       	ldi	r30, 0x3B	; 59
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <M_Dio_PinWrite+0x19a>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <M_Dio_PinWrite+0x196>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	3b c0       	rjmp	.+118    	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 2: SetBit(PORTB_REG,Local_u8_Pin); break;
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <M_Dio_PinWrite+0x1c2>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <M_Dio_PinWrite+0x1be>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	27 c0       	rjmp	.+78     	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 3: SetBit(PORTC_REG,Local_u8_Pin); break;
    168e:	a5 e3       	ldi	r26, 0x35	; 53
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e5 e3       	ldi	r30, 0x35	; 53
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <M_Dio_PinWrite+0x1ea>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <M_Dio_PinWrite+0x1e6>
    16b0:	84 2b       	or	r24, r20
    16b2:	8c 93       	st	X, r24
    16b4:	13 c0       	rjmp	.+38     	; 0x16dc <M_Dio_PinWrite+0x21a>
		case 4: SetBit(PORTD_REG,Local_u8_Pin); break;
    16b6:	a2 e3       	ldi	r26, 0x32	; 50
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	e2 e3       	ldi	r30, 0x32	; 50
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <M_Dio_PinWrite+0x212>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <M_Dio_PinWrite+0x20e>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
		default:                            break;
		}
	    break;
	default:                                break;
	}
}
    16dc:	2a 96       	adiw	r28, 0x0a	; 10
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <M_Dio_PinTog>:
void M_Dio_PinTog(u8 Local_u8_Num)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	00 d0       	rcall	.+0      	; 0x16f4 <M_Dio_PinTog+0x6>
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <M_Dio_PinTog+0x8>
    16f6:	0f 92       	push	r0
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9a e0       	ldi	r25, 0x0A	; 10
    1702:	69 2f       	mov	r22, r25
    1704:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    1708:	89 2f       	mov	r24, r25
    170a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Port = Local_u8_Num / 10;
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	9a e0       	ldi	r25, 0x0A	; 10
    1710:	69 2f       	mov	r22, r25
    1712:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    1716:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Port)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	3d 83       	std	Y+5, r19	; 0x05
    1720:	2c 83       	std	Y+4, r18	; 0x04
    1722:	8c 81       	ldd	r24, Y+4	; 0x04
    1724:	9d 81       	ldd	r25, Y+5	; 0x05
    1726:	82 30       	cpi	r24, 0x02	; 2
    1728:	91 05       	cpc	r25, r1
    172a:	51 f1       	breq	.+84     	; 0x1780 <M_Dio_PinTog+0x92>
    172c:	2c 81       	ldd	r18, Y+4	; 0x04
    172e:	3d 81       	ldd	r19, Y+5	; 0x05
    1730:	23 30       	cpi	r18, 0x03	; 3
    1732:	31 05       	cpc	r19, r1
    1734:	34 f4       	brge	.+12     	; 0x1742 <M_Dio_PinTog+0x54>
    1736:	8c 81       	ldd	r24, Y+4	; 0x04
    1738:	9d 81       	ldd	r25, Y+5	; 0x05
    173a:	81 30       	cpi	r24, 0x01	; 1
    173c:	91 05       	cpc	r25, r1
    173e:	61 f0       	breq	.+24     	; 0x1758 <M_Dio_PinTog+0x6a>
    1740:	5a c0       	rjmp	.+180    	; 0x17f6 <M_Dio_PinTog+0x108>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	23 30       	cpi	r18, 0x03	; 3
    1748:	31 05       	cpc	r19, r1
    174a:	71 f1       	breq	.+92     	; 0x17a8 <M_Dio_PinTog+0xba>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	91 05       	cpc	r25, r1
    1754:	e9 f1       	breq	.+122    	; 0x17d0 <M_Dio_PinTog+0xe2>
    1756:	4f c0       	rjmp	.+158    	; 0x17f6 <M_Dio_PinTog+0x108>
	{
	case 1: TogBit(PORTA_REG,Local_u8_Pin); break;
    1758:	ab e3       	ldi	r26, 0x3B	; 59
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	eb e3       	ldi	r30, 0x3B	; 59
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <M_Dio_PinTog+0x88>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <M_Dio_PinTog+0x84>
    177a:	84 27       	eor	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <M_Dio_PinTog+0x108>
	case 2: TogBit(PORTB_REG,Local_u8_Pin); break;
    1780:	a8 e3       	ldi	r26, 0x38	; 56
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	48 2f       	mov	r20, r24
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	02 2e       	mov	r0, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <M_Dio_PinTog+0xb0>
    179a:	88 0f       	add	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <M_Dio_PinTog+0xac>
    17a2:	84 27       	eor	r24, r20
    17a4:	8c 93       	st	X, r24
    17a6:	27 c0       	rjmp	.+78     	; 0x17f6 <M_Dio_PinTog+0x108>
	case 3: TogBit(PORTC_REG,Local_u8_Pin); break;
    17a8:	a5 e3       	ldi	r26, 0x35	; 53
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <M_Dio_PinTog+0xd8>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <M_Dio_PinTog+0xd4>
    17ca:	84 27       	eor	r24, r20
    17cc:	8c 93       	st	X, r24
    17ce:	13 c0       	rjmp	.+38     	; 0x17f6 <M_Dio_PinTog+0x108>
	case 4: TogBit(PORTD_REG,Local_u8_Pin); break;
    17d0:	a2 e3       	ldi	r26, 0x32	; 50
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	48 2f       	mov	r20, r24
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	02 2e       	mov	r0, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <M_Dio_PinTog+0x100>
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	0a 94       	dec	r0
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <M_Dio_PinTog+0xfc>
    17f2:	84 27       	eor	r24, r20
    17f4:	8c 93       	st	X, r24
	default:                            break;
	}
}
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <M_Dio_PinRead>:
u8   M_Dio_PinRead(u8 Local_u8_Num)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	00 d0       	rcall	.+0      	; 0x180c <M_Dio_PinRead+0x6>
    180c:	00 d0       	rcall	.+0      	; 0x180e <M_Dio_PinRead+0x8>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <M_Dio_PinRead+0xa>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8_Pin  = Local_u8_Num % 10;
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	9a e0       	ldi	r25, 0x0A	; 10
    181a:	69 2f       	mov	r22, r25
    181c:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    1820:	89 2f       	mov	r24, r25
    1822:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8_Port = Local_u8_Num / 10;
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	9a e0       	ldi	r25, 0x0A	; 10
    1828:	69 2f       	mov	r22, r25
    182a:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    182e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Reading = 0;
    1830:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_u8_Port)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	3e 83       	std	Y+6, r19	; 0x06
    183a:	2d 83       	std	Y+5, r18	; 0x05
    183c:	4d 81       	ldd	r20, Y+5	; 0x05
    183e:	5e 81       	ldd	r21, Y+6	; 0x06
    1840:	42 30       	cpi	r20, 0x02	; 2
    1842:	51 05       	cpc	r21, r1
    1844:	41 f1       	breq	.+80     	; 0x1896 <M_Dio_PinRead+0x90>
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	83 30       	cpi	r24, 0x03	; 3
    184c:	91 05       	cpc	r25, r1
    184e:	34 f4       	brge	.+12     	; 0x185c <M_Dio_PinRead+0x56>
    1850:	2d 81       	ldd	r18, Y+5	; 0x05
    1852:	3e 81       	ldd	r19, Y+6	; 0x06
    1854:	21 30       	cpi	r18, 0x01	; 1
    1856:	31 05       	cpc	r19, r1
    1858:	61 f0       	breq	.+24     	; 0x1872 <M_Dio_PinRead+0x6c>
    185a:	52 c0       	rjmp	.+164    	; 0x1900 <M_Dio_PinRead+0xfa>
    185c:	4d 81       	ldd	r20, Y+5	; 0x05
    185e:	5e 81       	ldd	r21, Y+6	; 0x06
    1860:	43 30       	cpi	r20, 0x03	; 3
    1862:	51 05       	cpc	r21, r1
    1864:	51 f1       	breq	.+84     	; 0x18ba <M_Dio_PinRead+0xb4>
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	84 30       	cpi	r24, 0x04	; 4
    186c:	91 05       	cpc	r25, r1
    186e:	b9 f1       	breq	.+110    	; 0x18de <M_Dio_PinRead+0xd8>
    1870:	47 c0       	rjmp	.+142    	; 0x1900 <M_Dio_PinRead+0xfa>
	{
	case 1: Local_u8_Reading = GetBit(PINA_REG,Local_u8_Pin); break;
    1872:	e9 e3       	ldi	r30, 0x39	; 57
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <M_Dio_PinRead+0x84>
    1886:	55 95       	asr	r21
    1888:	47 95       	ror	r20
    188a:	8a 95       	dec	r24
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <M_Dio_PinRead+0x80>
    188e:	ca 01       	movw	r24, r20
    1890:	81 70       	andi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	35 c0       	rjmp	.+106    	; 0x1900 <M_Dio_PinRead+0xfa>
	case 2: Local_u8_Reading = GetBit(PINB_REG,Local_u8_Pin); break;
    1896:	e6 e3       	ldi	r30, 0x36	; 54
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 2f       	mov	r24, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	a9 01       	movw	r20, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <M_Dio_PinRead+0xa8>
    18aa:	55 95       	asr	r21
    18ac:	47 95       	ror	r20
    18ae:	8a 95       	dec	r24
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <M_Dio_PinRead+0xa4>
    18b2:	ca 01       	movw	r24, r20
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	23 c0       	rjmp	.+70     	; 0x1900 <M_Dio_PinRead+0xfa>
	case 3: Local_u8_Reading = GetBit(PINC_REG,Local_u8_Pin); break;
    18ba:	e3 e3       	ldi	r30, 0x33	; 51
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <M_Dio_PinRead+0xcc>
    18ce:	55 95       	asr	r21
    18d0:	47 95       	ror	r20
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <M_Dio_PinRead+0xc8>
    18d6:	ca 01       	movw	r24, r20
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	11 c0       	rjmp	.+34     	; 0x1900 <M_Dio_PinRead+0xfa>
	case 4: Local_u8_Reading = GetBit(PIND_REG,Local_u8_Pin); break;
    18de:	e0 e3       	ldi	r30, 0x30	; 48
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	88 2f       	mov	r24, r24
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	a9 01       	movw	r20, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <M_Dio_PinRead+0xf0>
    18f2:	55 95       	asr	r21
    18f4:	47 95       	ror	r20
    18f6:	8a 95       	dec	r24
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <M_Dio_PinRead+0xec>
    18fa:	ca 01       	movw	r24, r20
    18fc:	81 70       	andi	r24, 0x01	; 1
    18fe:	89 83       	std	Y+1, r24	; 0x01
	default:                                              break;
	}
	return Local_u8_Reading;
    1900:	89 81       	ldd	r24, Y+1	; 0x01
}
    1902:	26 96       	adiw	r28, 0x06	; 6
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <M_Dio_PortMode>:

void M_Dio_PortMode(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	28 97       	sbiw	r28, 0x08	; 8
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Local_u8_Mode)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	38 87       	std	Y+8, r19	; 0x08
    1934:	2f 83       	std	Y+7, r18	; 0x07
    1936:	8f 81       	ldd	r24, Y+7	; 0x07
    1938:	98 85       	ldd	r25, Y+8	; 0x08
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	31 f0       	breq	.+12     	; 0x194a <M_Dio_PortMode+0x36>
    193e:	2f 81       	ldd	r18, Y+7	; 0x07
    1940:	38 85       	ldd	r19, Y+8	; 0x08
    1942:	21 30       	cpi	r18, 0x01	; 1
    1944:	31 05       	cpc	r19, r1
    1946:	89 f1       	breq	.+98     	; 0x19aa <M_Dio_PortMode+0x96>
    1948:	63 c0       	rjmp	.+198    	; 0x1a10 <M_Dio_PortMode+0xfc>
	{
		case INPUT :
		switch(Local_u8_Num)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3e 83       	std	Y+6, r19	; 0x06
    1952:	2d 83       	std	Y+5, r18	; 0x05
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	91 05       	cpc	r25, r1
    195c:	d1 f0       	breq	.+52     	; 0x1992 <M_Dio_PortMode+0x7e>
    195e:	2d 81       	ldd	r18, Y+5	; 0x05
    1960:	3e 81       	ldd	r19, Y+6	; 0x06
    1962:	23 30       	cpi	r18, 0x03	; 3
    1964:	31 05       	cpc	r19, r1
    1966:	34 f4       	brge	.+12     	; 0x1974 <M_Dio_PortMode+0x60>
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	91 05       	cpc	r25, r1
    1970:	61 f0       	breq	.+24     	; 0x198a <M_Dio_PortMode+0x76>
    1972:	4e c0       	rjmp	.+156    	; 0x1a10 <M_Dio_PortMode+0xfc>
    1974:	2d 81       	ldd	r18, Y+5	; 0x05
    1976:	3e 81       	ldd	r19, Y+6	; 0x06
    1978:	23 30       	cpi	r18, 0x03	; 3
    197a:	31 05       	cpc	r19, r1
    197c:	71 f0       	breq	.+28     	; 0x199a <M_Dio_PortMode+0x86>
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	84 30       	cpi	r24, 0x04	; 4
    1984:	91 05       	cpc	r25, r1
    1986:	69 f0       	breq	.+26     	; 0x19a2 <M_Dio_PortMode+0x8e>
    1988:	43 c0       	rjmp	.+134    	; 0x1a10 <M_Dio_PortMode+0xfc>
		{
			case A: DDRA_REG = 0; break;
    198a:	ea e3       	ldi	r30, 0x3A	; 58
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	10 82       	st	Z, r1
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <M_Dio_PortMode+0xfc>
			case B: DDRB_REG = 0; break;
    1992:	e7 e3       	ldi	r30, 0x37	; 55
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	10 82       	st	Z, r1
    1998:	3b c0       	rjmp	.+118    	; 0x1a10 <M_Dio_PortMode+0xfc>
			case C: DDRC_REG = 0; break;
    199a:	e4 e3       	ldi	r30, 0x34	; 52
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	10 82       	st	Z, r1
    19a0:	37 c0       	rjmp	.+110    	; 0x1a10 <M_Dio_PortMode+0xfc>
			case D: DDRD_REG = 0; break;
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	10 82       	st	Z, r1
    19a8:	33 c0       	rjmp	.+102    	; 0x1a10 <M_Dio_PortMode+0xfc>
			default:	      break;
		}
		break;
		case OUTPUT :
		switch(Local_u8_Num)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3c 83       	std	Y+4, r19	; 0x04
    19b2:	2b 83       	std	Y+3, r18	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	91 05       	cpc	r25, r1
    19bc:	d9 f0       	breq	.+54     	; 0x19f4 <M_Dio_PortMode+0xe0>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	23 30       	cpi	r18, 0x03	; 3
    19c4:	31 05       	cpc	r19, r1
    19c6:	34 f4       	brge	.+12     	; 0x19d4 <M_Dio_PortMode+0xc0>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	91 05       	cpc	r25, r1
    19d0:	61 f0       	breq	.+24     	; 0x19ea <M_Dio_PortMode+0xd6>
    19d2:	1e c0       	rjmp	.+60     	; 0x1a10 <M_Dio_PortMode+0xfc>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	81 f0       	breq	.+32     	; 0x19fe <M_Dio_PortMode+0xea>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	84 30       	cpi	r24, 0x04	; 4
    19e4:	91 05       	cpc	r25, r1
    19e6:	81 f0       	breq	.+32     	; 0x1a08 <M_Dio_PortMode+0xf4>
    19e8:	13 c0       	rjmp	.+38     	; 0x1a10 <M_Dio_PortMode+0xfc>
		{
			case A: DDRA_REG = 0xFF; break;
    19ea:	ea e3       	ldi	r30, 0x3A	; 58
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	80 83       	st	Z, r24
    19f2:	0e c0       	rjmp	.+28     	; 0x1a10 <M_Dio_PortMode+0xfc>
			case B: DDRB_REG = 0xFF; break;
    19f4:	e7 e3       	ldi	r30, 0x37	; 55
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	80 83       	st	Z, r24
    19fc:	09 c0       	rjmp	.+18     	; 0x1a10 <M_Dio_PortMode+0xfc>
			case C: DDRC_REG = 0xFF; break;
    19fe:	e4 e3       	ldi	r30, 0x34	; 52
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	80 83       	st	Z, r24
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <M_Dio_PortMode+0xfc>
			case D: DDRD_REG = 0xFF; break;
    1a08:	e1 e3       	ldi	r30, 0x31	; 49
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	80 83       	st	Z, r24
			default:	         break;
		}
		break;
		default:                 break;
	}
}
    1a10:	28 96       	adiw	r28, 0x08	; 8
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <M_Dio_PortWrite>:
void M_Dio_PortWrite(u8 Local_u8_Num,u8 Local_u8_Mode)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	28 97       	sbiw	r28, 0x08	; 8
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	6a 83       	std	Y+2, r22	; 0x02
	switch(Local_u8_Mode)
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	38 87       	std	Y+8, r19	; 0x08
    1a42:	2f 83       	std	Y+7, r18	; 0x07
    1a44:	8f 81       	ldd	r24, Y+7	; 0x07
    1a46:	98 85       	ldd	r25, Y+8	; 0x08
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	31 f0       	breq	.+12     	; 0x1a58 <M_Dio_PortWrite+0x36>
    1a4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a4e:	38 85       	ldd	r19, Y+8	; 0x08
    1a50:	21 30       	cpi	r18, 0x01	; 1
    1a52:	31 05       	cpc	r19, r1
    1a54:	89 f1       	breq	.+98     	; 0x1ab8 <M_Dio_PortWrite+0x96>
    1a56:	63 c0       	rjmp	.+198    	; 0x1b1e <M_Dio_PortWrite+0xfc>
	{
		case LOW :
		switch(Local_u8_Num)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3e 83       	std	Y+6, r19	; 0x06
    1a60:	2d 83       	std	Y+5, r18	; 0x05
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	82 30       	cpi	r24, 0x02	; 2
    1a68:	91 05       	cpc	r25, r1
    1a6a:	d1 f0       	breq	.+52     	; 0x1aa0 <M_Dio_PortWrite+0x7e>
    1a6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a70:	23 30       	cpi	r18, 0x03	; 3
    1a72:	31 05       	cpc	r19, r1
    1a74:	34 f4       	brge	.+12     	; 0x1a82 <M_Dio_PortWrite+0x60>
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	61 f0       	breq	.+24     	; 0x1a98 <M_Dio_PortWrite+0x76>
    1a80:	4e c0       	rjmp	.+156    	; 0x1b1e <M_Dio_PortWrite+0xfc>
    1a82:	2d 81       	ldd	r18, Y+5	; 0x05
    1a84:	3e 81       	ldd	r19, Y+6	; 0x06
    1a86:	23 30       	cpi	r18, 0x03	; 3
    1a88:	31 05       	cpc	r19, r1
    1a8a:	71 f0       	breq	.+28     	; 0x1aa8 <M_Dio_PortWrite+0x86>
    1a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	91 05       	cpc	r25, r1
    1a94:	69 f0       	breq	.+26     	; 0x1ab0 <M_Dio_PortWrite+0x8e>
    1a96:	43 c0       	rjmp	.+134    	; 0x1b1e <M_Dio_PortWrite+0xfc>
		{
			case A: PORTA_REG = 0; break;
    1a98:	eb e3       	ldi	r30, 0x3B	; 59
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	10 82       	st	Z, r1
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case B: PORTB_REG = 0; break;
    1aa0:	e8 e3       	ldi	r30, 0x38	; 56
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	10 82       	st	Z, r1
    1aa6:	3b c0       	rjmp	.+118    	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case C: PORTC_REG = 0; break;
    1aa8:	e5 e3       	ldi	r30, 0x35	; 53
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	10 82       	st	Z, r1
    1aae:	37 c0       	rjmp	.+110    	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case D: PORTD_REG = 0; break;
    1ab0:	e2 e3       	ldi	r30, 0x32	; 50
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	10 82       	st	Z, r1
    1ab6:	33 c0       	rjmp	.+102    	; 0x1b1e <M_Dio_PortWrite+0xfc>
			default:	       break;
		}
		break;
		case HIGH :
		switch(Local_u8_Num)
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	3c 83       	std	Y+4, r19	; 0x04
    1ac0:	2b 83       	std	Y+3, r18	; 0x03
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	91 05       	cpc	r25, r1
    1aca:	d9 f0       	breq	.+54     	; 0x1b02 <M_Dio_PortWrite+0xe0>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	23 30       	cpi	r18, 0x03	; 3
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	34 f4       	brge	.+12     	; 0x1ae2 <M_Dio_PortWrite+0xc0>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	91 05       	cpc	r25, r1
    1ade:	61 f0       	breq	.+24     	; 0x1af8 <M_Dio_PortWrite+0xd6>
    1ae0:	1e c0       	rjmp	.+60     	; 0x1b1e <M_Dio_PortWrite+0xfc>
    1ae2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae6:	23 30       	cpi	r18, 0x03	; 3
    1ae8:	31 05       	cpc	r19, r1
    1aea:	81 f0       	breq	.+32     	; 0x1b0c <M_Dio_PortWrite+0xea>
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	91 05       	cpc	r25, r1
    1af4:	81 f0       	breq	.+32     	; 0x1b16 <M_Dio_PortWrite+0xf4>
    1af6:	13 c0       	rjmp	.+38     	; 0x1b1e <M_Dio_PortWrite+0xfc>
		{
			case A: PORTA_REG = 0xFF; break;
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	80 83       	st	Z, r24
    1b00:	0e c0       	rjmp	.+28     	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case B: PORTB_REG = 0xFF; break;
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	8f ef       	ldi	r24, 0xFF	; 255
    1b08:	80 83       	st	Z, r24
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case C: PORTC_REG = 0xFF; break;
    1b0c:	e5 e3       	ldi	r30, 0x35	; 53
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	8f ef       	ldi	r24, 0xFF	; 255
    1b12:	80 83       	st	Z, r24
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <M_Dio_PortWrite+0xfc>
			case D: PORTD_REG = 0xFF; break;
    1b16:	e2 e3       	ldi	r30, 0x32	; 50
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	80 83       	st	Z, r24
			default:	          break;
		}
		break;
		default:                 break;
	}
}
    1b1e:	28 96       	adiw	r28, 0x08	; 8
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <M_Adc_Init>:


#include "Adc.h"

void M_Adc_Init(void)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	#if      V_REF ==      AVCC
	SetBit(ADMUX_REG, 6);
    1b38:	a7 e2       	ldi	r26, 0x27	; 39
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e7 e2       	ldi	r30, 0x27	; 39
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	80 64       	ori	r24, 0x40	; 64
    1b44:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG, 7);
    1b46:	a7 e2       	ldi	r26, 0x27	; 39
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e7 e2       	ldi	r30, 0x27	; 39
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 77       	andi	r24, 0x7F	; 127
    1b52:	8c 93       	st	X, r24
	#elif    V_REF  ==     _2_5_VOLT
	SetBit(ADMUX_REG, 6);
	SetBit(ADMUX_REG, 7);
	#endif

	ClrBit(ADMUX_REG, 5); // to select right adjust
    1b54:	a7 e2       	ldi	r26, 0x27	; 39
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e7 e2       	ldi	r30, 0x27	; 39
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 7d       	andi	r24, 0xDF	; 223
    1b60:	8c 93       	st	X, r24

	// to select ADC0
	ClrBit(ADMUX_REG, 0);
    1b62:	a7 e2       	ldi	r26, 0x27	; 39
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e7 e2       	ldi	r30, 0x27	; 39
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG, 1);
    1b70:	a7 e2       	ldi	r26, 0x27	; 39
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e7 e2       	ldi	r30, 0x27	; 39
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8d 7f       	andi	r24, 0xFD	; 253
    1b7c:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG, 2);
    1b7e:	a7 e2       	ldi	r26, 0x27	; 39
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e7 e2       	ldi	r30, 0x27	; 39
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8b 7f       	andi	r24, 0xFB	; 251
    1b8a:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG, 3);
    1b8c:	a7 e2       	ldi	r26, 0x27	; 39
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e7 e2       	ldi	r30, 0x27	; 39
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	87 7f       	andi	r24, 0xF7	; 247
    1b98:	8c 93       	st	X, r24
	ClrBit(ADMUX_REG, 4);
    1b9a:	a7 e2       	ldi	r26, 0x27	; 39
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e7 e2       	ldi	r30, 0x27	; 39
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8f 7e       	andi	r24, 0xEF	; 239
    1ba6:	8c 93       	st	X, r24

	#if       PRESCALER_DF         ==     128
	SetBit(ADCSRA_REG, 0);
    1ba8:	a6 e2       	ldi	r26, 0x26	; 38
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e6 e2       	ldi	r30, 0x26	; 38
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	81 60       	ori	r24, 0x01	; 1
    1bb4:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG, 1);
    1bb6:	a6 e2       	ldi	r26, 0x26	; 38
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e2       	ldi	r30, 0x26	; 38
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG, 2);
    1bc4:	a6 e2       	ldi	r26, 0x26	; 38
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e6 e2       	ldi	r30, 0x26	; 38
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	84 60       	ori	r24, 0x04	; 4
    1bd0:	8c 93       	st	X, r24
	ClrBit(ADCSRA_REG, 0);
	SetBit(ADCSRA_REG, 1);
	SetBit(ADCSRA_REG, 2);
	#endif

	SetBit(ADCSRA_REG, 5); // enable Auto trigger circuit
    1bd2:	a6 e2       	ldi	r26, 0x26	; 38
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e6 e2       	ldi	r30, 0x26	; 38
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 62       	ori	r24, 0x20	; 32
    1bde:	8c 93       	st	X, r24
	SetBit(ADCSRA_REG, 7); // enable ADC circuit
    1be0:	a6 e2       	ldi	r26, 0x26	; 38
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e6 e2       	ldi	r30, 0x26	; 38
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 68       	ori	r24, 0x80	; 128
    1bec:	8c 93       	st	X, r24

}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <M_Adc_Read>:

u16 M_Adc_Read(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
	SetBit(ADCSRA_REG, 6); // to start conversion
    1bfc:	a6 e2       	ldi	r26, 0x26	; 38
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e6 e2       	ldi	r30, 0x26	; 38
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	80 64       	ori	r24, 0x40	; 64
    1c08:	8c 93       	st	X, r24
	while(GetBit(ADCSRA_REG, 4) == 0);
    1c0a:	e6 e2       	ldi	r30, 0x26	; 38
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	82 95       	swap	r24
    1c12:	8f 70       	andi	r24, 0x0F	; 15
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	81 70       	andi	r24, 0x01	; 1
    1c1a:	90 70       	andi	r25, 0x00	; 0
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	a9 f3       	breq	.-22     	; 0x1c0a <M_Adc_Read+0x16>

	return ADC_REG;
    1c20:	e4 e2       	ldi	r30, 0x24	; 36
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <H_TempSensor_Init>:


#include "TempSensor.h"

void H_TempSensor_Init(void)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
	M_Adc_Init();
    1c36:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <M_Adc_Init>
}
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <H_TempSensor_Read>:


u16 H_TempSensor_Read(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <H_TempSensor_Read+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <H_TempSensor_Read+0x8>
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16_AdcReading = M_Adc_Read();
    1c4c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <M_Adc_Read>
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16_temp       =  (((u32)Local_u16_AdcReading*500) /1023);
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	cc 01       	movw	r24, r24
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	24 ef       	ldi	r18, 0xF4	; 244
    1c60:	31 e0       	ldi	r19, 0x01	; 1
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	50 e0       	ldi	r21, 0x00	; 0
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 df 21 	call	0x43be	; 0x43be <__mulsi3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	2f ef       	ldi	r18, 0xFF	; 255
    1c74:	33 e0       	ldi	r19, 0x03	; 3
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 2a 22 	call	0x4454	; 0x4454 <__udivmodsi4>
    1c82:	da 01       	movw	r26, r20
    1c84:	c9 01       	movw	r24, r18
    1c86:	9a 83       	std	Y+2, r25	; 0x02
    1c88:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16_temp;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <H_PushButton_Init>:


#include "PushButton.h"

void H_PushButton_Init(u8 Local_u8_PushButton)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	00 d0       	rcall	.+0      	; 0x1ca2 <H_PushButton_Init+0x6>
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_PushButton)
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	3b 83       	std	Y+3, r19	; 0x03
    1cb2:	2a 83       	std	Y+2, r18	; 0x02
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	91 05       	cpc	r25, r1
    1cbc:	d9 f0       	breq	.+54     	; 0x1cf4 <H_PushButton_Init+0x58>
    1cbe:	2a 81       	ldd	r18, Y+2	; 0x02
    1cc0:	3b 81       	ldd	r19, Y+3	; 0x03
    1cc2:	23 30       	cpi	r18, 0x03	; 3
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	34 f4       	brge	.+12     	; 0x1cd4 <H_PushButton_Init+0x38>
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	9b 81       	ldd	r25, Y+3	; 0x03
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	91 05       	cpc	r25, r1
    1cd0:	61 f0       	breq	.+24     	; 0x1cea <H_PushButton_Init+0x4e>
    1cd2:	1e c0       	rjmp	.+60     	; 0x1d10 <H_PushButton_Init+0x74>
    1cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd6:	3b 81       	ldd	r19, Y+3	; 0x03
    1cd8:	23 30       	cpi	r18, 0x03	; 3
    1cda:	31 05       	cpc	r19, r1
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <H_PushButton_Init+0x62>
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	84 30       	cpi	r24, 0x04	; 4
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	81 f0       	breq	.+32     	; 0x1d08 <H_PushButton_Init+0x6c>
    1ce8:	13 c0       	rjmp	.+38     	; 0x1d10 <H_PushButton_Init+0x74>
	{
		case PUSH_BUTTON_1: M_Dio_PinMode(PUSH_BUTTON_1_PIN,INPUT); break;
    1cea:	8a e2       	ldi	r24, 0x2A	; 42
    1cec:	60 e0       	ldi	r22, 0x00	; 0
    1cee:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    1cf2:	0e c0       	rjmp	.+28     	; 0x1d10 <H_PushButton_Init+0x74>
		case PUSH_BUTTON_2: M_Dio_PinMode(PUSH_BUTTON_2_PIN,INPUT); break;
    1cf4:	8b e2       	ldi	r24, 0x2B	; 43
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    1cfc:	09 c0       	rjmp	.+18     	; 0x1d10 <H_PushButton_Init+0x74>
		case PUSH_BUTTON_3: M_Dio_PinMode(PUSH_BUTTON_3_PIN,INPUT); break;
    1cfe:	8c e2       	ldi	r24, 0x2C	; 44
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    1d06:	04 c0       	rjmp	.+8      	; 0x1d10 <H_PushButton_Init+0x74>
		case PUSH_BUTTON_4: M_Dio_PinMode(PUSH_BUTTON_4_PIN,INPUT); break;
    1d08:	8d e2       	ldi	r24, 0x2D	; 45
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
		default:													break;
	}
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <H_PushButton_Read>:
u8   H_PushButton_Read(u8 Local_u8_PushButton)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	ec 97       	sbiw	r28, 0x3c	; 60
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	8a af       	std	Y+58, r24	; 0x3a
	u8 Local_u8_Reading = RELEASED;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	89 af       	std	Y+57, r24	; 0x39
	switch(Local_u8_PushButton)
    1d36:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3c af       	std	Y+60, r19	; 0x3c
    1d3e:	2b af       	std	Y+59, r18	; 0x3b
    1d40:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d42:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d44:	82 30       	cpi	r24, 0x02	; 2
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <H_PushButton_Read+0x30>
    1d4a:	9d c0       	rjmp	.+314    	; 0x1e86 <H_PushButton_Read+0x16a>
    1d4c:	2b ad       	ldd	r18, Y+59	; 0x3b
    1d4e:	3c ad       	ldd	r19, Y+60	; 0x3c
    1d50:	23 30       	cpi	r18, 0x03	; 3
    1d52:	31 05       	cpc	r19, r1
    1d54:	34 f4       	brge	.+12     	; 0x1d62 <H_PushButton_Read+0x46>
    1d56:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d58:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <H_PushButton_Read+0x60>
    1d60:	1f c2       	rjmp	.+1086   	; 0x21a0 <H_PushButton_Read+0x484>
    1d62:	2b ad       	ldd	r18, Y+59	; 0x3b
    1d64:	3c ad       	ldd	r19, Y+60	; 0x3c
    1d66:	23 30       	cpi	r18, 0x03	; 3
    1d68:	31 05       	cpc	r19, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <H_PushButton_Read+0x52>
    1d6c:	11 c1       	rjmp	.+546    	; 0x1f90 <H_PushButton_Read+0x274>
    1d6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d70:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d72:	84 30       	cpi	r24, 0x04	; 4
    1d74:	91 05       	cpc	r25, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <H_PushButton_Read+0x5e>
    1d78:	90 c1       	rjmp	.+800    	; 0x209a <H_PushButton_Read+0x37e>
    1d7a:	12 c2       	rjmp	.+1060   	; 0x21a0 <H_PushButton_Read+0x484>
	{
		case PUSH_BUTTON_1:
		if(M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED)
    1d7c:	8a e2       	ldi	r24, 0x2A	; 42
    1d7e:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1d82:	88 23       	and	r24, r24
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <H_PushButton_Read+0x6c>
    1d86:	0c c2       	rjmp	.+1048   	; 0x21a0 <H_PushButton_Read+0x484>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 ef       	ldi	r26, 0xF0	; 240
    1d8e:	b2 e4       	ldi	r27, 0x42	; 66
    1d90:	8d ab       	std	Y+53, r24	; 0x35
    1d92:	9e ab       	std	Y+54, r25	; 0x36
    1d94:	af ab       	std	Y+55, r26	; 0x37
    1d96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	6d a9       	ldd	r22, Y+53	; 0x35
    1d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a e7       	ldi	r20, 0x7A	; 122
    1da6:	55 e4       	ldi	r21, 0x45	; 69
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	89 ab       	std	Y+49, r24	; 0x31
    1db2:	9a ab       	std	Y+50, r25	; 0x32
    1db4:	ab ab       	std	Y+51, r26	; 0x33
    1db6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1db8:	69 a9       	ldd	r22, Y+49	; 0x31
    1dba:	7a a9       	ldd	r23, Y+50	; 0x32
    1dbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1dbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <H_PushButton_Read+0xbe>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	98 ab       	std	Y+48, r25	; 0x30
    1dd6:	8f a7       	std	Y+47, r24	; 0x2f
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <H_PushButton_Read+0x13c>
	else if (__tmp > 65535)
    1dda:	69 a9       	ldd	r22, Y+49	; 0x31
    1ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dde:	8b a9       	ldd	r24, Y+51	; 0x33
    1de0:	9c a9       	ldd	r25, Y+52	; 0x34
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <H_PushButton_Read+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	6d a9       	ldd	r22, Y+53	; 0x35
    1df4:	7e a9       	ldd	r23, Y+54	; 0x36
    1df6:	8f a9       	ldd	r24, Y+55	; 0x37
    1df8:	98 ad       	ldd	r25, Y+56	; 0x38
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	98 ab       	std	Y+48, r25	; 0x30
    1e18:	8f a7       	std	Y+47, r24	; 0x2f
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <H_PushButton_Read+0x11e>
    1e1c:	80 e9       	ldi	r24, 0x90	; 144
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	9e a7       	std	Y+46, r25	; 0x2e
    1e22:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e24:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e26:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <H_PushButton_Read+0x10c>
    1e2c:	9e a7       	std	Y+46, r25	; 0x2e
    1e2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e32:	98 a9       	ldd	r25, Y+48	; 0x30
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	98 ab       	std	Y+48, r25	; 0x30
    1e38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <H_PushButton_Read+0x100>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <H_PushButton_Read+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	69 a9       	ldd	r22, Y+49	; 0x31
    1e46:	7a a9       	ldd	r23, Y+50	; 0x32
    1e48:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 ab       	std	Y+48, r25	; 0x30
    1e56:	8f a7       	std	Y+47, r24	; 0x2f
    1e58:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e5c:	9c a7       	std	Y+44, r25	; 0x2c
    1e5e:	8b a7       	std	Y+43, r24	; 0x2b
    1e60:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e62:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <H_PushButton_Read+0x148>
    1e68:	9c a7       	std	Y+44, r25	; 0x2c
    1e6a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED)
    1e6c:	8a e2       	ldi	r24, 0x2A	; 42
    1e6e:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1e72:	88 23       	and	r24, r24
    1e74:	09 f0       	breq	.+2      	; 0x1e78 <H_PushButton_Read+0x15c>
    1e76:	94 c1       	rjmp	.+808    	; 0x21a0 <H_PushButton_Read+0x484>
			{
				Local_u8_Reading = PRESSED;
    1e78:	19 ae       	std	Y+57, r1	; 0x39
				while(M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED);
    1e7a:	8a e2       	ldi	r24, 0x2A	; 42
    1e7c:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1e80:	88 23       	and	r24, r24
    1e82:	d9 f3       	breq	.-10     	; 0x1e7a <H_PushButton_Read+0x15e>
    1e84:	8d c1       	rjmp	.+794    	; 0x21a0 <H_PushButton_Read+0x484>
			}
		}
		break;
		case PUSH_BUTTON_2:
		if(M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED)
    1e86:	8b e2       	ldi	r24, 0x2B	; 43
    1e88:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1e8c:	88 23       	and	r24, r24
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <H_PushButton_Read+0x176>
    1e90:	87 c1       	rjmp	.+782    	; 0x21a0 <H_PushButton_Read+0x484>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a0 ef       	ldi	r26, 0xF0	; 240
    1e98:	b2 e4       	ldi	r27, 0x42	; 66
    1e9a:	8f a3       	std	Y+39, r24	; 0x27
    1e9c:	98 a7       	std	Y+40, r25	; 0x28
    1e9e:	a9 a7       	std	Y+41, r26	; 0x29
    1ea0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ea4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ea6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	4a e7       	ldi	r20, 0x7A	; 122
    1eb0:	55 e4       	ldi	r21, 0x45	; 69
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	8b a3       	std	Y+35, r24	; 0x23
    1ebc:	9c a3       	std	Y+36, r25	; 0x24
    1ebe:	ad a3       	std	Y+37, r26	; 0x25
    1ec0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <H_PushButton_Read+0x1c8>
		__ticks = 1;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
    1ee2:	3f c0       	rjmp	.+126    	; 0x1f62 <H_PushButton_Read+0x246>
	else if (__tmp > 65535)
    1ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eea:	9e a1       	ldd	r25, Y+38	; 0x26
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	4c f5       	brge	.+82     	; 0x1f4e <H_PushButton_Read+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efc:	6f a1       	ldd	r22, Y+39	; 0x27
    1efe:	78 a5       	ldd	r23, Y+40	; 0x28
    1f00:	89 a5       	ldd	r24, Y+41	; 0x29
    1f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9a a3       	std	Y+34, r25	; 0x22
    1f22:	89 a3       	std	Y+33, r24	; 0x21
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <H_PushButton_Read+0x228>
    1f26:	80 e9       	ldi	r24, 0x90	; 144
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	98 a3       	std	Y+32, r25	; 0x20
    1f2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f30:	98 a1       	ldd	r25, Y+32	; 0x20
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <H_PushButton_Read+0x216>
    1f36:	98 a3       	std	Y+32, r25	; 0x20
    1f38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9a a3       	std	Y+34, r25	; 0x22
    1f42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	89 a1       	ldd	r24, Y+33	; 0x21
    1f46:	9a a1       	ldd	r25, Y+34	; 0x22
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <H_PushButton_Read+0x20a>
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <H_PushButton_Read+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f50:	7c a1       	ldd	r23, Y+36	; 0x24
    1f52:	8d a1       	ldd	r24, Y+37	; 0x25
    1f54:	9e a1       	ldd	r25, Y+38	; 0x26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	9a a3       	std	Y+34, r25	; 0x22
    1f60:	89 a3       	std	Y+33, r24	; 0x21
    1f62:	89 a1       	ldd	r24, Y+33	; 0x21
    1f64:	9a a1       	ldd	r25, Y+34	; 0x22
    1f66:	9e 8f       	std	Y+30, r25	; 0x1e
    1f68:	8d 8f       	std	Y+29, r24	; 0x1d
    1f6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <H_PushButton_Read+0x252>
    1f72:	9e 8f       	std	Y+30, r25	; 0x1e
    1f74:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED)
    1f76:	8b e2       	ldi	r24, 0x2B	; 43
    1f78:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1f7c:	88 23       	and	r24, r24
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <H_PushButton_Read+0x266>
    1f80:	0f c1       	rjmp	.+542    	; 0x21a0 <H_PushButton_Read+0x484>
			{
				Local_u8_Reading = PRESSED;
    1f82:	19 ae       	std	Y+57, r1	; 0x39
				while(M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED);
    1f84:	8b e2       	ldi	r24, 0x2B	; 43
    1f86:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1f8a:	88 23       	and	r24, r24
    1f8c:	d9 f3       	breq	.-10     	; 0x1f84 <H_PushButton_Read+0x268>
    1f8e:	08 c1       	rjmp	.+528    	; 0x21a0 <H_PushButton_Read+0x484>
			}
		}
		break;
		case PUSH_BUTTON_3:
		if(M_Dio_PinRead(PUSH_BUTTON_3_PIN) == PRESSED)
    1f90:	8c e2       	ldi	r24, 0x2C	; 44
    1f92:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    1f96:	88 23       	and	r24, r24
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <H_PushButton_Read+0x280>
    1f9a:	02 c1       	rjmp	.+516    	; 0x21a0 <H_PushButton_Read+0x484>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 ef       	ldi	r26, 0xF0	; 240
    1fa2:	b2 e4       	ldi	r27, 0x42	; 66
    1fa4:	89 8f       	std	Y+25, r24	; 0x19
    1fa6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa8:	ab 8f       	std	Y+27, r26	; 0x1b
    1faa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	69 8d       	ldd	r22, Y+25	; 0x19
    1fae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a e7       	ldi	r20, 0x7A	; 122
    1fba:	55 e4       	ldi	r21, 0x45	; 69
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8d 8b       	std	Y+21, r24	; 0x15
    1fc6:	9e 8b       	std	Y+22, r25	; 0x16
    1fc8:	af 8b       	std	Y+23, r26	; 0x17
    1fca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <H_PushButton_Read+0x2d2>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <H_PushButton_Read+0x350>
	else if (__tmp > 65535)
    1fee:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <H_PushButton_Read+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	69 8d       	ldd	r22, Y+25	; 0x19
    2008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9c 8b       	std	Y+20, r25	; 0x14
    202c:	8b 8b       	std	Y+19, r24	; 0x13
    202e:	0f c0       	rjmp	.+30     	; 0x204e <H_PushButton_Read+0x332>
    2030:	80 e9       	ldi	r24, 0x90	; 144
    2032:	91 e0       	ldi	r25, 0x01	; 1
    2034:	9a 8b       	std	Y+18, r25	; 0x12
    2036:	89 8b       	std	Y+17, r24	; 0x11
    2038:	89 89       	ldd	r24, Y+17	; 0x11
    203a:	9a 89       	ldd	r25, Y+18	; 0x12
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <H_PushButton_Read+0x320>
    2040:	9a 8b       	std	Y+18, r25	; 0x12
    2042:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8b 89       	ldd	r24, Y+19	; 0x13
    2046:	9c 89       	ldd	r25, Y+20	; 0x14
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	9c 8b       	std	Y+20, r25	; 0x14
    204c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	9c 89       	ldd	r25, Y+20	; 0x14
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <H_PushButton_Read+0x314>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <H_PushButton_Read+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	6d 89       	ldd	r22, Y+21	; 0x15
    205a:	7e 89       	ldd	r23, Y+22	; 0x16
    205c:	8f 89       	ldd	r24, Y+23	; 0x17
    205e:	98 8d       	ldd	r25, Y+24	; 0x18
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	8b 89       	ldd	r24, Y+19	; 0x13
    206e:	9c 89       	ldd	r25, Y+20	; 0x14
    2070:	98 8b       	std	Y+16, r25	; 0x10
    2072:	8f 87       	std	Y+15, r24	; 0x0f
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	98 89       	ldd	r25, Y+16	; 0x10
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <H_PushButton_Read+0x35c>
    207c:	98 8b       	std	Y+16, r25	; 0x10
    207e:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON_3_PIN) == PRESSED)
    2080:	8c e2       	ldi	r24, 0x2C	; 44
    2082:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    2086:	88 23       	and	r24, r24
    2088:	09 f0       	breq	.+2      	; 0x208c <H_PushButton_Read+0x370>
    208a:	8a c0       	rjmp	.+276    	; 0x21a0 <H_PushButton_Read+0x484>
			{
				Local_u8_Reading = PRESSED;
    208c:	19 ae       	std	Y+57, r1	; 0x39
				while(M_Dio_PinRead(PUSH_BUTTON_3_PIN) == PRESSED);
    208e:	8c e2       	ldi	r24, 0x2C	; 44
    2090:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    2094:	88 23       	and	r24, r24
    2096:	d9 f3       	breq	.-10     	; 0x208e <H_PushButton_Read+0x372>
    2098:	83 c0       	rjmp	.+262    	; 0x21a0 <H_PushButton_Read+0x484>
			}
		}
		break;
		case PUSH_BUTTON_4:
		if(M_Dio_PinRead(PUSH_BUTTON_4_PIN) == PRESSED)
    209a:	8d e2       	ldi	r24, 0x2D	; 45
    209c:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <H_PushButton_Read+0x38a>
    20a4:	7d c0       	rjmp	.+250    	; 0x21a0 <H_PushButton_Read+0x484>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 ef       	ldi	r26, 0xF0	; 240
    20ac:	b2 e4       	ldi	r27, 0x42	; 66
    20ae:	8b 87       	std	Y+11, r24	; 0x0b
    20b0:	9c 87       	std	Y+12, r25	; 0x0c
    20b2:	ad 87       	std	Y+13, r26	; 0x0d
    20b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	4a e7       	ldi	r20, 0x7A	; 122
    20c4:	55 e4       	ldi	r21, 0x45	; 69
    20c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	8f 83       	std	Y+7, r24	; 0x07
    20d0:	98 87       	std	Y+8, r25	; 0x08
    20d2:	a9 87       	std	Y+9, r26	; 0x09
    20d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	2c f4       	brge	.+10     	; 0x20f8 <H_PushButton_Read+0x3dc>
		__ticks = 1;
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	9e 83       	std	Y+6, r25	; 0x06
    20f4:	8d 83       	std	Y+5, r24	; 0x05
    20f6:	3f c0       	rjmp	.+126    	; 0x2176 <H_PushButton_Read+0x45a>
	else if (__tmp > 65535)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	3f ef       	ldi	r19, 0xFF	; 255
    2104:	4f e7       	ldi	r20, 0x7F	; 127
    2106:	57 e4       	ldi	r21, 0x47	; 71
    2108:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    210c:	18 16       	cp	r1, r24
    210e:	4c f5       	brge	.+82     	; 0x2162 <H_PushButton_Read+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2110:	6b 85       	ldd	r22, Y+11	; 0x0b
    2112:	7c 85       	ldd	r23, Y+12	; 0x0c
    2114:	8d 85       	ldd	r24, Y+13	; 0x0d
    2116:	9e 85       	ldd	r25, Y+14	; 0x0e
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e2       	ldi	r20, 0x20	; 32
    211e:	51 e4       	ldi	r21, 0x41	; 65
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	0f c0       	rjmp	.+30     	; 0x2158 <H_PushButton_Read+0x43c>
    213a:	80 e9       	ldi	r24, 0x90	; 144
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	9c 83       	std	Y+4, r25	; 0x04
    2140:	8b 83       	std	Y+3, r24	; 0x03
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	9c 81       	ldd	r25, Y+4	; 0x04
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <H_PushButton_Read+0x42a>
    214a:	9c 83       	std	Y+4, r25	; 0x04
    214c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	01 97       	sbiw	r24, 0x01	; 1
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	69 f7       	brne	.-38     	; 0x213a <H_PushButton_Read+0x41e>
    2160:	14 c0       	rjmp	.+40     	; 0x218a <H_PushButton_Read+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2162:	6f 81       	ldd	r22, Y+7	; 0x07
    2164:	78 85       	ldd	r23, Y+8	; 0x08
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	9a 81       	ldd	r25, Y+2	; 0x02
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	f1 f7       	brne	.-4      	; 0x2182 <H_PushButton_Read+0x466>
    2186:	9a 83       	std	Y+2, r25	; 0x02
    2188:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(DEBOUNCING_TIME);
			if(M_Dio_PinRead(PUSH_BUTTON_4_PIN) == PRESSED)
    218a:	8d e2       	ldi	r24, 0x2D	; 45
    218c:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    2190:	88 23       	and	r24, r24
    2192:	31 f4       	brne	.+12     	; 0x21a0 <H_PushButton_Read+0x484>
			{
				Local_u8_Reading = PRESSED;
    2194:	19 ae       	std	Y+57, r1	; 0x39
				while(M_Dio_PinRead(PUSH_BUTTON_4_PIN) == PRESSED);
    2196:	8d e2       	ldi	r24, 0x2D	; 45
    2198:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    219c:	88 23       	and	r24, r24
    219e:	d9 f3       	breq	.-10     	; 0x2196 <H_PushButton_Read+0x47a>
		}
		break;
		default:
		break;
	}
	return Local_u8_Reading;
    21a0:	89 ad       	ldd	r24, Y+57	; 0x39
}
    21a2:	ec 96       	adiw	r28, 0x3c	; 60
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <H_Led_Init>:


#include "Led.h"

void H_Led_Init(u8 Local_u8_Led)
{
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <H_Led_Init+0x6>
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Led)
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3b 83       	std	Y+3, r19	; 0x03
    21ca:	2a 83       	std	Y+2, r18	; 0x02
    21cc:	8a 81       	ldd	r24, Y+2	; 0x02
    21ce:	9b 81       	ldd	r25, Y+3	; 0x03
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	91 05       	cpc	r25, r1
    21d4:	79 f0       	breq	.+30     	; 0x21f4 <H_Led_Init+0x40>
    21d6:	2a 81       	ldd	r18, Y+2	; 0x02
    21d8:	3b 81       	ldd	r19, Y+3	; 0x03
    21da:	23 30       	cpi	r18, 0x03	; 3
    21dc:	31 05       	cpc	r19, r1
    21de:	79 f0       	breq	.+30     	; 0x21fe <H_Led_Init+0x4a>
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	81 30       	cpi	r24, 0x01	; 1
    21e6:	91 05       	cpc	r25, r1
    21e8:	71 f4       	brne	.+28     	; 0x2206 <H_Led_Init+0x52>
	{
		case BLU_LED: M_Dio_PinMode(BLU_LED_PIN,OUTPUT);   break;
    21ea:	80 e2       	ldi	r24, 0x20	; 32
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    21f2:	09 c0       	rjmp	.+18     	; 0x2206 <H_Led_Init+0x52>
		case GRN_LED: M_Dio_PinMode(GRN_LED_PIN,OUTPUT);   break;
    21f4:	8f e1       	ldi	r24, 0x1F	; 31
    21f6:	61 e0       	ldi	r22, 0x01	; 1
    21f8:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <H_Led_Init+0x52>
		case RED_LED: M_Dio_PinMode(RED_LED_PIN,OUTPUT);   break;
    21fe:	8e e1       	ldi	r24, 0x1E	; 30
    2200:	61 e0       	ldi	r22, 0x01	; 1
    2202:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
		default:                                           break;
	}
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <H_Led_On>:
void H_Led_On(u8 Local_u8_Led)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <H_Led_On+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Led)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3b 83       	std	Y+3, r19	; 0x03
    2228:	2a 83       	std	Y+2, r18	; 0x02
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	79 f0       	breq	.+30     	; 0x2252 <H_Led_On+0x40>
    2234:	2a 81       	ldd	r18, Y+2	; 0x02
    2236:	3b 81       	ldd	r19, Y+3	; 0x03
    2238:	23 30       	cpi	r18, 0x03	; 3
    223a:	31 05       	cpc	r19, r1
    223c:	79 f0       	breq	.+30     	; 0x225c <H_Led_On+0x4a>
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	91 05       	cpc	r25, r1
    2246:	71 f4       	brne	.+28     	; 0x2264 <H_Led_On+0x52>
	{
		case BLU_LED: M_Dio_PinWrite(BLU_LED_PIN,HIGH);   break;
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	61 e0       	ldi	r22, 0x01	; 1
    224c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2250:	09 c0       	rjmp	.+18     	; 0x2264 <H_Led_On+0x52>
		case GRN_LED: M_Dio_PinWrite(GRN_LED_PIN,HIGH);   break;
    2252:	8f e1       	ldi	r24, 0x1F	; 31
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    225a:	04 c0       	rjmp	.+8      	; 0x2264 <H_Led_On+0x52>
		case RED_LED: M_Dio_PinWrite(RED_LED_PIN,HIGH);   break;
    225c:	8e e1       	ldi	r24, 0x1E	; 30
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
		default:                                          break;
	}
}
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <H_Led_Off>:
void H_Led_Off(u8 Local_u8_Led)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <H_Led_Off+0x6>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Led)
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	3b 83       	std	Y+3, r19	; 0x03
    2286:	2a 83       	std	Y+2, r18	; 0x02
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	9b 81       	ldd	r25, Y+3	; 0x03
    228c:	82 30       	cpi	r24, 0x02	; 2
    228e:	91 05       	cpc	r25, r1
    2290:	79 f0       	breq	.+30     	; 0x22b0 <H_Led_Off+0x40>
    2292:	2a 81       	ldd	r18, Y+2	; 0x02
    2294:	3b 81       	ldd	r19, Y+3	; 0x03
    2296:	23 30       	cpi	r18, 0x03	; 3
    2298:	31 05       	cpc	r19, r1
    229a:	79 f0       	breq	.+30     	; 0x22ba <H_Led_Off+0x4a>
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	91 05       	cpc	r25, r1
    22a4:	71 f4       	brne	.+28     	; 0x22c2 <H_Led_Off+0x52>
	{
		case BLU_LED: M_Dio_PinWrite(BLU_LED_PIN,LOW);   break;
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    22ae:	09 c0       	rjmp	.+18     	; 0x22c2 <H_Led_Off+0x52>
		case GRN_LED: M_Dio_PinWrite(GRN_LED_PIN,LOW);   break;
    22b0:	8f e1       	ldi	r24, 0x1F	; 31
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <H_Led_Off+0x52>
		case RED_LED: M_Dio_PinWrite(RED_LED_PIN,LOW);   break;
    22ba:	8e e1       	ldi	r24, 0x1E	; 30
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
		default:                                         break;
	}
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <H_Led_Tog>:
void H_Led_Tog(u8 Local_u8_Led)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <H_Led_Tog+0x6>
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Led)
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	28 2f       	mov	r18, r24
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	3b 83       	std	Y+3, r19	; 0x03
    22e4:	2a 83       	std	Y+2, r18	; 0x02
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	91 05       	cpc	r25, r1
    22ee:	71 f0       	breq	.+28     	; 0x230c <H_Led_Tog+0x3e>
    22f0:	2a 81       	ldd	r18, Y+2	; 0x02
    22f2:	3b 81       	ldd	r19, Y+3	; 0x03
    22f4:	23 30       	cpi	r18, 0x03	; 3
    22f6:	31 05       	cpc	r19, r1
    22f8:	69 f0       	breq	.+26     	; 0x2314 <H_Led_Tog+0x46>
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	9b 81       	ldd	r25, Y+3	; 0x03
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	59 f4       	brne	.+22     	; 0x231a <H_Led_Tog+0x4c>
	{
		case BLU_LED: M_Dio_PinTog(BLU_LED_PIN);   break;
    2304:	80 e2       	ldi	r24, 0x20	; 32
    2306:	0e 94 77 0b 	call	0x16ee	; 0x16ee <M_Dio_PinTog>
    230a:	07 c0       	rjmp	.+14     	; 0x231a <H_Led_Tog+0x4c>
		case GRN_LED: M_Dio_PinTog(GRN_LED_PIN);   break;
    230c:	8f e1       	ldi	r24, 0x1F	; 31
    230e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <M_Dio_PinTog>
    2312:	03 c0       	rjmp	.+6      	; 0x231a <H_Led_Tog+0x4c>
		case RED_LED: M_Dio_PinTog(RED_LED_PIN);   break;
    2314:	8e e1       	ldi	r24, 0x1E	; 30
    2316:	0e 94 77 0b 	call	0x16ee	; 0x16ee <M_Dio_PinTog>
		default:                                   break;
	}
}
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <H_Led_BlinkOnce>:
void H_Led_BlinkOnce(u8 Local_u8_Led)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	cd b7       	in	r28, 0x3d	; 61
    232c:	de b7       	in	r29, 0x3e	; 62
    232e:	ad 97       	sbiw	r28, 0x2d	; 45
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	8b a7       	std	Y+43, r24	; 0x2b
	switch(Local_u8_Led)
    233c:	8b a5       	ldd	r24, Y+43	; 0x2b
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	3d a7       	std	Y+45, r19	; 0x2d
    2344:	2c a7       	std	Y+44, r18	; 0x2c
    2346:	8c a5       	ldd	r24, Y+44	; 0x2c
    2348:	9d a5       	ldd	r25, Y+45	; 0x2d
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	91 05       	cpc	r25, r1
    234e:	09 f4       	brne	.+2      	; 0x2352 <H_Led_BlinkOnce+0x2c>
    2350:	87 c0       	rjmp	.+270    	; 0x2460 <H_Led_BlinkOnce+0x13a>
    2352:	2c a5       	ldd	r18, Y+44	; 0x2c
    2354:	3d a5       	ldd	r19, Y+45	; 0x2d
    2356:	23 30       	cpi	r18, 0x03	; 3
    2358:	31 05       	cpc	r19, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <H_Led_BlinkOnce+0x38>
    235c:	fc c0       	rjmp	.+504    	; 0x2556 <H_Led_BlinkOnce+0x230>
    235e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2360:	9d a5       	ldd	r25, Y+45	; 0x2d
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	91 05       	cpc	r25, r1
    2366:	09 f0       	breq	.+2      	; 0x236a <H_Led_BlinkOnce+0x44>
    2368:	70 c1       	rjmp	.+736    	; 0x264a <H_Led_BlinkOnce+0x324>
	{
		case BLU_LED:
		M_Dio_PinWrite(BLU_LED_PIN,HIGH);
    236a:	80 e2       	ldi	r24, 0x20	; 32
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a8 ec       	ldi	r26, 0xC8	; 200
    2378:	b2 e4       	ldi	r27, 0x42	; 66
    237a:	8f a3       	std	Y+39, r24	; 0x27
    237c:	98 a7       	std	Y+40, r25	; 0x28
    237e:	a9 a7       	std	Y+41, r26	; 0x29
    2380:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6f a1       	ldd	r22, Y+39	; 0x27
    2384:	78 a5       	ldd	r23, Y+40	; 0x28
    2386:	89 a5       	ldd	r24, Y+41	; 0x29
    2388:	9a a5       	ldd	r25, Y+42	; 0x2a
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a e7       	ldi	r20, 0x7A	; 122
    2390:	55 e4       	ldi	r21, 0x45	; 69
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8b a3       	std	Y+35, r24	; 0x23
    239c:	9c a3       	std	Y+36, r25	; 0x24
    239e:	ad a3       	std	Y+37, r26	; 0x25
    23a0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23a2:	6b a1       	ldd	r22, Y+35	; 0x23
    23a4:	7c a1       	ldd	r23, Y+36	; 0x24
    23a6:	8d a1       	ldd	r24, Y+37	; 0x25
    23a8:	9e a1       	ldd	r25, Y+38	; 0x26
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <H_Led_BlinkOnce+0x9e>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9a a3       	std	Y+34, r25	; 0x22
    23c0:	89 a3       	std	Y+33, r24	; 0x21
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <H_Led_BlinkOnce+0x11c>
	else if (__tmp > 65535)
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <H_Led_BlinkOnce+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6f a1       	ldd	r22, Y+39	; 0x27
    23de:	78 a5       	ldd	r23, Y+40	; 0x28
    23e0:	89 a5       	ldd	r24, Y+41	; 0x29
    23e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9a a3       	std	Y+34, r25	; 0x22
    2402:	89 a3       	std	Y+33, r24	; 0x21
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <H_Led_BlinkOnce+0xfe>
    2406:	80 e9       	ldi	r24, 0x90	; 144
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	98 a3       	std	Y+32, r25	; 0x20
    240c:	8f 8f       	std	Y+31, r24	; 0x1f
    240e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2410:	98 a1       	ldd	r25, Y+32	; 0x20
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <H_Led_BlinkOnce+0xec>
    2416:	98 a3       	std	Y+32, r25	; 0x20
    2418:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	89 a1       	ldd	r24, Y+33	; 0x21
    241c:	9a a1       	ldd	r25, Y+34	; 0x22
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9a a3       	std	Y+34, r25	; 0x22
    2422:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	89 a1       	ldd	r24, Y+33	; 0x21
    2426:	9a a1       	ldd	r25, Y+34	; 0x22
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <H_Led_BlinkOnce+0xe0>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <H_Led_BlinkOnce+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6b a1       	ldd	r22, Y+35	; 0x23
    2430:	7c a1       	ldd	r23, Y+36	; 0x24
    2432:	8d a1       	ldd	r24, Y+37	; 0x25
    2434:	9e a1       	ldd	r25, Y+38	; 0x26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9a a3       	std	Y+34, r25	; 0x22
    2440:	89 a3       	std	Y+33, r24	; 0x21
    2442:	89 a1       	ldd	r24, Y+33	; 0x21
    2444:	9a a1       	ldd	r25, Y+34	; 0x22
    2446:	9e 8f       	std	Y+30, r25	; 0x1e
    2448:	8d 8f       	std	Y+29, r24	; 0x1d
    244a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    244c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <H_Led_BlinkOnce+0x128>
    2452:	9e 8f       	std	Y+30, r25	; 0x1e
    2454:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(BLINK_TIME);
		M_Dio_PinWrite(BLU_LED_PIN,LOW);
    2456:	80 e2       	ldi	r24, 0x20	; 32
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    245e:	f5 c0       	rjmp	.+490    	; 0x264a <H_Led_BlinkOnce+0x324>
		break;
		case GRN_LED:
		M_Dio_PinWrite(GRN_LED_PIN,HIGH);
    2460:	8f e1       	ldi	r24, 0x1F	; 31
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a8 ec       	ldi	r26, 0xC8	; 200
    246e:	b2 e4       	ldi	r27, 0x42	; 66
    2470:	89 8f       	std	Y+25, r24	; 0x19
    2472:	9a 8f       	std	Y+26, r25	; 0x1a
    2474:	ab 8f       	std	Y+27, r26	; 0x1b
    2476:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2478:	69 8d       	ldd	r22, Y+25	; 0x19
    247a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4a e7       	ldi	r20, 0x7A	; 122
    2486:	55 e4       	ldi	r21, 0x45	; 69
    2488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	8d 8b       	std	Y+21, r24	; 0x15
    2492:	9e 8b       	std	Y+22, r25	; 0x16
    2494:	af 8b       	std	Y+23, r26	; 0x17
    2496:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2498:	6d 89       	ldd	r22, Y+21	; 0x15
    249a:	7e 89       	ldd	r23, Y+22	; 0x16
    249c:	8f 89       	ldd	r24, Y+23	; 0x17
    249e:	98 8d       	ldd	r25, Y+24	; 0x18
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	2c f4       	brge	.+10     	; 0x24ba <H_Led_BlinkOnce+0x194>
		__ticks = 1;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	9c 8b       	std	Y+20, r25	; 0x14
    24b6:	8b 8b       	std	Y+19, r24	; 0x13
    24b8:	3f c0       	rjmp	.+126    	; 0x2538 <H_Led_BlinkOnce+0x212>
	else if (__tmp > 65535)
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	3f ef       	ldi	r19, 0xFF	; 255
    24c6:	4f e7       	ldi	r20, 0x7F	; 127
    24c8:	57 e4       	ldi	r21, 0x47	; 71
    24ca:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    24ce:	18 16       	cp	r1, r24
    24d0:	4c f5       	brge	.+82     	; 0x2524 <H_Led_BlinkOnce+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d2:	69 8d       	ldd	r22, Y+25	; 0x19
    24d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e2       	ldi	r20, 0x20	; 32
    24e0:	51 e4       	ldi	r21, 0x41	; 65
    24e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	bc 01       	movw	r22, r24
    24ec:	cd 01       	movw	r24, r26
    24ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	9c 8b       	std	Y+20, r25	; 0x14
    24f8:	8b 8b       	std	Y+19, r24	; 0x13
    24fa:	0f c0       	rjmp	.+30     	; 0x251a <H_Led_BlinkOnce+0x1f4>
    24fc:	80 e9       	ldi	r24, 0x90	; 144
    24fe:	91 e0       	ldi	r25, 0x01	; 1
    2500:	9a 8b       	std	Y+18, r25	; 0x12
    2502:	89 8b       	std	Y+17, r24	; 0x11
    2504:	89 89       	ldd	r24, Y+17	; 0x11
    2506:	9a 89       	ldd	r25, Y+18	; 0x12
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <H_Led_BlinkOnce+0x1e2>
    250c:	9a 8b       	std	Y+18, r25	; 0x12
    250e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	9c 8b       	std	Y+20, r25	; 0x14
    2518:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    251a:	8b 89       	ldd	r24, Y+19	; 0x13
    251c:	9c 89       	ldd	r25, Y+20	; 0x14
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	69 f7       	brne	.-38     	; 0x24fc <H_Led_BlinkOnce+0x1d6>
    2522:	14 c0       	rjmp	.+40     	; 0x254c <H_Led_BlinkOnce+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2524:	6d 89       	ldd	r22, Y+21	; 0x15
    2526:	7e 89       	ldd	r23, Y+22	; 0x16
    2528:	8f 89       	ldd	r24, Y+23	; 0x17
    252a:	98 8d       	ldd	r25, Y+24	; 0x18
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9c 8b       	std	Y+20, r25	; 0x14
    2536:	8b 8b       	std	Y+19, r24	; 0x13
    2538:	8b 89       	ldd	r24, Y+19	; 0x13
    253a:	9c 89       	ldd	r25, Y+20	; 0x14
    253c:	98 8b       	std	Y+16, r25	; 0x10
    253e:	8f 87       	std	Y+15, r24	; 0x0f
    2540:	8f 85       	ldd	r24, Y+15	; 0x0f
    2542:	98 89       	ldd	r25, Y+16	; 0x10
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <H_Led_BlinkOnce+0x21e>
    2548:	98 8b       	std	Y+16, r25	; 0x10
    254a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(BLINK_TIME);
		M_Dio_PinWrite(GRN_LED_PIN,LOW);
    254c:	8f e1       	ldi	r24, 0x1F	; 31
    254e:	60 e0       	ldi	r22, 0x00	; 0
    2550:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2554:	7a c0       	rjmp	.+244    	; 0x264a <H_Led_BlinkOnce+0x324>
		break;
		case RED_LED:
		M_Dio_PinWrite(RED_LED_PIN,HIGH);
    2556:	8e e1       	ldi	r24, 0x1E	; 30
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	a8 ec       	ldi	r26, 0xC8	; 200
    2564:	b2 e4       	ldi	r27, 0x42	; 66
    2566:	8b 87       	std	Y+11, r24	; 0x0b
    2568:	9c 87       	std	Y+12, r25	; 0x0c
    256a:	ad 87       	std	Y+13, r26	; 0x0d
    256c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a e7       	ldi	r20, 0x7A	; 122
    257c:	55 e4       	ldi	r21, 0x45	; 69
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	8f 83       	std	Y+7, r24	; 0x07
    2588:	98 87       	std	Y+8, r25	; 0x08
    258a:	a9 87       	std	Y+9, r26	; 0x09
    258c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    258e:	6f 81       	ldd	r22, Y+7	; 0x07
    2590:	78 85       	ldd	r23, Y+8	; 0x08
    2592:	89 85       	ldd	r24, Y+9	; 0x09
    2594:	9a 85       	ldd	r25, Y+10	; 0x0a
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e8       	ldi	r20, 0x80	; 128
    259c:	5f e3       	ldi	r21, 0x3F	; 63
    259e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	2c f4       	brge	.+10     	; 0x25b0 <H_Led_BlinkOnce+0x28a>
		__ticks = 1;
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9e 83       	std	Y+6, r25	; 0x06
    25ac:	8d 83       	std	Y+5, r24	; 0x05
    25ae:	3f c0       	rjmp	.+126    	; 0x262e <H_Led_BlinkOnce+0x308>
	else if (__tmp > 65535)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	3f ef       	ldi	r19, 0xFF	; 255
    25bc:	4f e7       	ldi	r20, 0x7F	; 127
    25be:	57 e4       	ldi	r21, 0x47	; 71
    25c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    25c4:	18 16       	cp	r1, r24
    25c6:	4c f5       	brge	.+82     	; 0x261a <H_Led_BlinkOnce+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e2       	ldi	r20, 0x20	; 32
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9e 83       	std	Y+6, r25	; 0x06
    25ee:	8d 83       	std	Y+5, r24	; 0x05
    25f0:	0f c0       	rjmp	.+30     	; 0x2610 <H_Led_BlinkOnce+0x2ea>
    25f2:	80 e9       	ldi	r24, 0x90	; 144
    25f4:	91 e0       	ldi	r25, 0x01	; 1
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	9c 81       	ldd	r25, Y+4	; 0x04
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <H_Led_BlinkOnce+0x2d8>
    2602:	9c 83       	std	Y+4, r25	; 0x04
    2604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2610:	8d 81       	ldd	r24, Y+5	; 0x05
    2612:	9e 81       	ldd	r25, Y+6	; 0x06
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	69 f7       	brne	.-38     	; 0x25f2 <H_Led_BlinkOnce+0x2cc>
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <H_Led_BlinkOnce+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	9e 83       	std	Y+6, r25	; 0x06
    262c:	8d 83       	std	Y+5, r24	; 0x05
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <H_Led_BlinkOnce+0x314>
    263e:	9a 83       	std	Y+2, r25	; 0x02
    2640:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(BLINK_TIME);
		M_Dio_PinWrite(RED_LED_PIN,LOW);
    2642:	8e e1       	ldi	r24, 0x1E	; 30
    2644:	60 e0       	ldi	r22, 0x00	; 0
    2646:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
		break;
		default:
		break;
	}
}
    264a:	ad 96       	adiw	r28, 0x2d	; 45
    264c:	0f b6       	in	r0, 0x3f	; 63
    264e:	f8 94       	cli
    2650:	de bf       	out	0x3e, r29	; 62
    2652:	0f be       	out	0x3f, r0	; 63
    2654:	cd bf       	out	0x3d, r28	; 61
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <H_Led_BlinkTwice>:
void H_Led_BlinkTwice(u8 Local_u8_Led)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	ad 97       	sbiw	r28, 0x2d	; 45
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	8b a7       	std	Y+43, r24	; 0x2b
	switch(Local_u8_Led)
    2672:	8b a5       	ldd	r24, Y+43	; 0x2b
    2674:	28 2f       	mov	r18, r24
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	3d a7       	std	Y+45, r19	; 0x2d
    267a:	2c a7       	std	Y+44, r18	; 0x2c
    267c:	8c a5       	ldd	r24, Y+44	; 0x2c
    267e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2680:	82 30       	cpi	r24, 0x02	; 2
    2682:	91 05       	cpc	r25, r1
    2684:	09 f4       	brne	.+2      	; 0x2688 <H_Led_BlinkTwice+0x2c>
    2686:	85 c0       	rjmp	.+266    	; 0x2792 <H_Led_BlinkTwice+0x136>
    2688:	2c a5       	ldd	r18, Y+44	; 0x2c
    268a:	3d a5       	ldd	r19, Y+45	; 0x2d
    268c:	23 30       	cpi	r18, 0x03	; 3
    268e:	31 05       	cpc	r19, r1
    2690:	09 f4       	brne	.+2      	; 0x2694 <H_Led_BlinkTwice+0x38>
    2692:	f8 c0       	rjmp	.+496    	; 0x2884 <H_Led_BlinkTwice+0x228>
    2694:	8c a5       	ldd	r24, Y+44	; 0x2c
    2696:	9d a5       	ldd	r25, Y+45	; 0x2d
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	91 05       	cpc	r25, r1
    269c:	09 f0       	breq	.+2      	; 0x26a0 <H_Led_BlinkTwice+0x44>
    269e:	6a c1       	rjmp	.+724    	; 0x2974 <H_Led_BlinkTwice+0x318>
	{
		case BLU_LED:
		H_Led_BlinkOnce(BLU_LED);
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a8 ec       	ldi	r26, 0xC8	; 200
    26ac:	b2 e4       	ldi	r27, 0x42	; 66
    26ae:	8f a3       	std	Y+39, r24	; 0x27
    26b0:	98 a7       	std	Y+40, r25	; 0x28
    26b2:	a9 a7       	std	Y+41, r26	; 0x29
    26b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	6f a1       	ldd	r22, Y+39	; 0x27
    26b8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ba:	89 a5       	ldd	r24, Y+41	; 0x29
    26bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a e7       	ldi	r20, 0x7A	; 122
    26c4:	55 e4       	ldi	r21, 0x45	; 69
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8b a3       	std	Y+35, r24	; 0x23
    26d0:	9c a3       	std	Y+36, r25	; 0x24
    26d2:	ad a3       	std	Y+37, r26	; 0x25
    26d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26d6:	6b a1       	ldd	r22, Y+35	; 0x23
    26d8:	7c a1       	ldd	r23, Y+36	; 0x24
    26da:	8d a1       	ldd	r24, Y+37	; 0x25
    26dc:	9e a1       	ldd	r25, Y+38	; 0x26
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <H_Led_BlinkTwice+0x9c>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <H_Led_BlinkTwice+0x11a>
	else if (__tmp > 65535)
    26f8:	6b a1       	ldd	r22, Y+35	; 0x23
    26fa:	7c a1       	ldd	r23, Y+36	; 0x24
    26fc:	8d a1       	ldd	r24, Y+37	; 0x25
    26fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <H_Led_BlinkTwice+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	6f a1       	ldd	r22, Y+39	; 0x27
    2712:	78 a5       	ldd	r23, Y+40	; 0x28
    2714:	89 a5       	ldd	r24, Y+41	; 0x29
    2716:	9a a5       	ldd	r25, Y+42	; 0x2a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9a a3       	std	Y+34, r25	; 0x22
    2736:	89 a3       	std	Y+33, r24	; 0x21
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <H_Led_BlinkTwice+0xfc>
    273a:	80 e9       	ldi	r24, 0x90	; 144
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	98 a3       	std	Y+32, r25	; 0x20
    2740:	8f 8f       	std	Y+31, r24	; 0x1f
    2742:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2744:	98 a1       	ldd	r25, Y+32	; 0x20
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <H_Led_BlinkTwice+0xea>
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	89 a1       	ldd	r24, Y+33	; 0x21
    2750:	9a a1       	ldd	r25, Y+34	; 0x22
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9a a3       	std	Y+34, r25	; 0x22
    2756:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	89 a1       	ldd	r24, Y+33	; 0x21
    275a:	9a a1       	ldd	r25, Y+34	; 0x22
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <H_Led_BlinkTwice+0xde>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <H_Led_BlinkTwice+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	89 a1       	ldd	r24, Y+33	; 0x21
    2778:	9a a1       	ldd	r25, Y+34	; 0x22
    277a:	9e 8f       	std	Y+30, r25	; 0x1e
    277c:	8d 8f       	std	Y+29, r24	; 0x1d
    277e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2780:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <H_Led_BlinkTwice+0x126>
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(BLINK_TIME);
		H_Led_BlinkOnce(BLU_LED);
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
    2790:	f1 c0       	rjmp	.+482    	; 0x2974 <H_Led_BlinkTwice+0x318>
		break;
		case GRN_LED:
		H_Led_BlinkOnce(GRN_LED);
    2792:	82 e0       	ldi	r24, 0x02	; 2
    2794:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a8 ec       	ldi	r26, 0xC8	; 200
    279e:	b2 e4       	ldi	r27, 0x42	; 66
    27a0:	89 8f       	std	Y+25, r24	; 0x19
    27a2:	9a 8f       	std	Y+26, r25	; 0x1a
    27a4:	ab 8f       	std	Y+27, r26	; 0x1b
    27a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a8:	69 8d       	ldd	r22, Y+25	; 0x19
    27aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	55 e4       	ldi	r21, 0x45	; 69
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8d 8b       	std	Y+21, r24	; 0x15
    27c2:	9e 8b       	std	Y+22, r25	; 0x16
    27c4:	af 8b       	std	Y+23, r26	; 0x17
    27c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27c8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ca:	7e 89       	ldd	r23, Y+22	; 0x16
    27cc:	8f 89       	ldd	r24, Y+23	; 0x17
    27ce:	98 8d       	ldd	r25, Y+24	; 0x18
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e8       	ldi	r20, 0x80	; 128
    27d6:	5f e3       	ldi	r21, 0x3F	; 63
    27d8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    27dc:	88 23       	and	r24, r24
    27de:	2c f4       	brge	.+10     	; 0x27ea <H_Led_BlinkTwice+0x18e>
		__ticks = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9c 8b       	std	Y+20, r25	; 0x14
    27e6:	8b 8b       	std	Y+19, r24	; 0x13
    27e8:	3f c0       	rjmp	.+126    	; 0x2868 <H_Led_BlinkTwice+0x20c>
	else if (__tmp > 65535)
    27ea:	6d 89       	ldd	r22, Y+21	; 0x15
    27ec:	7e 89       	ldd	r23, Y+22	; 0x16
    27ee:	8f 89       	ldd	r24, Y+23	; 0x17
    27f0:	98 8d       	ldd	r25, Y+24	; 0x18
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	4c f5       	brge	.+82     	; 0x2854 <H_Led_BlinkTwice+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2802:	69 8d       	ldd	r22, Y+25	; 0x19
    2804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e2       	ldi	r20, 0x20	; 32
    2810:	51 e4       	ldi	r21, 0x41	; 65
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9c 8b       	std	Y+20, r25	; 0x14
    2828:	8b 8b       	std	Y+19, r24	; 0x13
    282a:	0f c0       	rjmp	.+30     	; 0x284a <H_Led_BlinkTwice+0x1ee>
    282c:	80 e9       	ldi	r24, 0x90	; 144
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	9a 8b       	std	Y+18, r25	; 0x12
    2832:	89 8b       	std	Y+17, r24	; 0x11
    2834:	89 89       	ldd	r24, Y+17	; 0x11
    2836:	9a 89       	ldd	r25, Y+18	; 0x12
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <H_Led_BlinkTwice+0x1dc>
    283c:	9a 8b       	std	Y+18, r25	; 0x12
    283e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2840:	8b 89       	ldd	r24, Y+19	; 0x13
    2842:	9c 89       	ldd	r25, Y+20	; 0x14
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	9c 8b       	std	Y+20, r25	; 0x14
    2848:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284a:	8b 89       	ldd	r24, Y+19	; 0x13
    284c:	9c 89       	ldd	r25, Y+20	; 0x14
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	69 f7       	brne	.-38     	; 0x282c <H_Led_BlinkTwice+0x1d0>
    2852:	14 c0       	rjmp	.+40     	; 0x287c <H_Led_BlinkTwice+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	6d 89       	ldd	r22, Y+21	; 0x15
    2856:	7e 89       	ldd	r23, Y+22	; 0x16
    2858:	8f 89       	ldd	r24, Y+23	; 0x17
    285a:	98 8d       	ldd	r25, Y+24	; 0x18
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9c 8b       	std	Y+20, r25	; 0x14
    2866:	8b 8b       	std	Y+19, r24	; 0x13
    2868:	8b 89       	ldd	r24, Y+19	; 0x13
    286a:	9c 89       	ldd	r25, Y+20	; 0x14
    286c:	98 8b       	std	Y+16, r25	; 0x10
    286e:	8f 87       	std	Y+15, r24	; 0x0f
    2870:	8f 85       	ldd	r24, Y+15	; 0x0f
    2872:	98 89       	ldd	r25, Y+16	; 0x10
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <H_Led_BlinkTwice+0x218>
    2878:	98 8b       	std	Y+16, r25	; 0x10
    287a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(BLINK_TIME);
		H_Led_BlinkOnce(GRN_LED);
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
    2882:	78 c0       	rjmp	.+240    	; 0x2974 <H_Led_BlinkTwice+0x318>
		break;
		case RED_LED:
		H_Led_BlinkOnce(RED_LED);
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a8 ec       	ldi	r26, 0xC8	; 200
    2890:	b2 e4       	ldi	r27, 0x42	; 66
    2892:	8b 87       	std	Y+11, r24	; 0x0b
    2894:	9c 87       	std	Y+12, r25	; 0x0c
    2896:	ad 87       	std	Y+13, r26	; 0x0d
    2898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289a:	6b 85       	ldd	r22, Y+11	; 0x0b
    289c:	7c 85       	ldd	r23, Y+12	; 0x0c
    289e:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4a e7       	ldi	r20, 0x7A	; 122
    28a8:	55 e4       	ldi	r21, 0x45	; 69
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	8f 83       	std	Y+7, r24	; 0x07
    28b4:	98 87       	std	Y+8, r25	; 0x08
    28b6:	a9 87       	std	Y+9, r26	; 0x09
    28b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ba:	6f 81       	ldd	r22, Y+7	; 0x07
    28bc:	78 85       	ldd	r23, Y+8	; 0x08
    28be:	89 85       	ldd	r24, Y+9	; 0x09
    28c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    28ce:	88 23       	and	r24, r24
    28d0:	2c f4       	brge	.+10     	; 0x28dc <H_Led_BlinkTwice+0x280>
		__ticks = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	3f c0       	rjmp	.+126    	; 0x295a <H_Led_BlinkTwice+0x2fe>
	else if (__tmp > 65535)
    28dc:	6f 81       	ldd	r22, Y+7	; 0x07
    28de:	78 85       	ldd	r23, Y+8	; 0x08
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	3f ef       	ldi	r19, 0xFF	; 255
    28e8:	4f e7       	ldi	r20, 0x7F	; 127
    28ea:	57 e4       	ldi	r21, 0x47	; 71
    28ec:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    28f0:	18 16       	cp	r1, r24
    28f2:	4c f5       	brge	.+82     	; 0x2946 <H_Led_BlinkTwice+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	40 e2       	ldi	r20, 0x20	; 32
    2902:	51 e4       	ldi	r21, 0x41	; 65
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	bc 01       	movw	r22, r24
    290e:	cd 01       	movw	r24, r26
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9e 83       	std	Y+6, r25	; 0x06
    291a:	8d 83       	std	Y+5, r24	; 0x05
    291c:	0f c0       	rjmp	.+30     	; 0x293c <H_Led_BlinkTwice+0x2e0>
    291e:	80 e9       	ldi	r24, 0x90	; 144
    2920:	91 e0       	ldi	r25, 0x01	; 1
    2922:	9c 83       	std	Y+4, r25	; 0x04
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	9c 81       	ldd	r25, Y+4	; 0x04
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	f1 f7       	brne	.-4      	; 0x292a <H_Led_BlinkTwice+0x2ce>
    292e:	9c 83       	std	Y+4, r25	; 0x04
    2930:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	9e 83       	std	Y+6, r25	; 0x06
    293a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	69 f7       	brne	.-38     	; 0x291e <H_Led_BlinkTwice+0x2c2>
    2944:	14 c0       	rjmp	.+40     	; 0x296e <H_Led_BlinkTwice+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2946:	6f 81       	ldd	r22, Y+7	; 0x07
    2948:	78 85       	ldd	r23, Y+8	; 0x08
    294a:	89 85       	ldd	r24, Y+9	; 0x09
    294c:	9a 85       	ldd	r25, Y+10	; 0x0a
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9e 83       	std	Y+6, r25	; 0x06
    2958:	8d 83       	std	Y+5, r24	; 0x05
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	9e 81       	ldd	r25, Y+6	; 0x06
    295e:	9a 83       	std	Y+2, r25	; 0x02
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <H_Led_BlinkTwice+0x30a>
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(BLINK_TIME);
		H_Led_BlinkOnce(RED_LED);
    296e:	83 e0       	ldi	r24, 0x03	; 3
    2970:	0e 94 93 11 	call	0x2326	; 0x2326 <H_Led_BlinkOnce>
		break;
		default:
		break;
	}
}
    2974:	ad 96       	adiw	r28, 0x2d	; 45
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	08 95       	ret

00002986 <H_Lcd_Init>:
 *      Author: Eng hadeer
 */
#include "lcd.h"

void H_Lcd_Init(void)
{
    2986:	df 93       	push	r29
    2988:	cf 93       	push	r28
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	2e 97       	sbiw	r28, 0x0e	; 14
    2990:	0f b6       	in	r0, 0x3f	; 63
    2992:	f8 94       	cli
    2994:	de bf       	out	0x3e, r29	; 62
    2996:	0f be       	out	0x3f, r0	; 63
    2998:	cd bf       	out	0x3d, r28	; 61
	H_Lcd_WriteCommand(LCD_DIS_ON_CUR_OFF);
	H_Lcd_WriteCommand(LCD_CLR);
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
	#elif  LCD_MODE       ==     _4_BIT_MODE

	M_Dio_PinMode(LCD_DATA_PIN_7,OUTPUT);
    299a:	80 e1       	ldi	r24, 0x10	; 16
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_PIN_6,OUTPUT);
    29a2:	8f e0       	ldi	r24, 0x0F	; 15
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_PIN_5,OUTPUT);
    29aa:	8e e0       	ldi	r24, 0x0E	; 14
    29ac:	61 e0       	ldi	r22, 0x01	; 1
    29ae:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_PIN_4,OUTPUT);
    29b2:	8d e0       	ldi	r24, 0x0D	; 13
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);
    29ba:	8c e0       	ldi	r24, 0x0C	; 12
    29bc:	61 e0       	ldi	r22, 0x01	; 1
    29be:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
    29c2:	8b e0       	ldi	r24, 0x0B	; 11
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	aa e7       	ldi	r26, 0x7A	; 122
    29d0:	b4 e4       	ldi	r27, 0x44	; 68
    29d2:	8b 87       	std	Y+11, r24	; 0x0b
    29d4:	9c 87       	std	Y+12, r25	; 0x0c
    29d6:	ad 87       	std	Y+13, r26	; 0x0d
    29d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	4a e7       	ldi	r20, 0x7A	; 122
    29e8:	55 e4       	ldi	r21, 0x45	; 69
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	8f 83       	std	Y+7, r24	; 0x07
    29f4:	98 87       	std	Y+8, r25	; 0x08
    29f6:	a9 87       	std	Y+9, r26	; 0x09
    29f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2a0e:	88 23       	and	r24, r24
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <H_Lcd_Init+0x96>
		__ticks = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	3f c0       	rjmp	.+126    	; 0x2a9a <H_Lcd_Init+0x114>
	else if (__tmp > 65535)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	3f ef       	ldi	r19, 0xFF	; 255
    2a28:	4f e7       	ldi	r20, 0x7F	; 127
    2a2a:	57 e4       	ldi	r21, 0x47	; 71
    2a2c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2a30:	18 16       	cp	r1, r24
    2a32:	4c f5       	brge	.+82     	; 0x2a86 <H_Lcd_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	0f c0       	rjmp	.+30     	; 0x2a7c <H_Lcd_Init+0xf6>
    2a5e:	80 e9       	ldi	r24, 0x90	; 144
    2a60:	91 e0       	ldi	r25, 0x01	; 1
    2a62:	9c 83       	std	Y+4, r25	; 0x04
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <H_Lcd_Init+0xe4>
    2a6e:	9c 83       	std	Y+4, r25	; 0x04
    2a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	69 f7       	brne	.-38     	; 0x2a5e <H_Lcd_Init+0xd8>
    2a84:	14 c0       	rjmp	.+40     	; 0x2aae <H_Lcd_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a86:	6f 81       	ldd	r22, Y+7	; 0x07
    2a88:	78 85       	ldd	r23, Y+8	; 0x08
    2a8a:	89 85       	ldd	r24, Y+9	; 0x09
    2a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9e:	9a 83       	std	Y+2, r25	; 0x02
    2aa0:	89 83       	std	Y+1, r24	; 0x01
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
    2aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <H_Lcd_Init+0x120>
    2aaa:	9a 83       	std	Y+2, r25	; 0x02
    2aac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_Lcd_WriteCommand(0x33);
    2aae:	83 e3       	ldi	r24, 0x33	; 51
    2ab0:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0x32);
    2ab4:	82 e3       	ldi	r24, 0x32	; 50
    2ab6:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0x28);
    2aba:	88 e2       	ldi	r24, 0x28	; 40
    2abc:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>

	H_Lcd_WriteCommand(LCD_DIS_ON_CUR_OFF);
    2ac0:	8c e0       	ldi	r24, 0x0C	; 12
    2ac2:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CLR);
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
	#endif
}
    2ad2:	2e 96       	adiw	r28, 0x0e	; 14
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <H_Lcd_WriteCharacter>:
void H_Lcd_WriteCharacter(u8 Local_u8_Character)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	e9 97       	sbiw	r28, 0x39	; 57
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	89 af       	std	Y+57, r24	; 0x39
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	#elif  LCD_MODE       ==     _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
    2afa:	8b e0       	ldi	r24, 0x0B	; 11
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	LCD_DATA_PORT = (((Local_u8_Character >> 1) & (0b01111000)) | (LCD_DATA_PORT & (0b10000111)));
    2b02:	ab e3       	ldi	r26, 0x3B	; 59
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	89 ad       	ldd	r24, Y+57	; 0x39
    2b08:	86 95       	lsr	r24
    2b0a:	98 2f       	mov	r25, r24
    2b0c:	98 77       	andi	r25, 0x78	; 120
    2b0e:	eb e3       	ldi	r30, 0x3B	; 59
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	87 78       	andi	r24, 0x87	; 135
    2b16:	89 2b       	or	r24, r25
    2b18:	8c 93       	st	X, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    2b1a:	8c e0       	ldi	r24, 0x0C	; 12
    2b1c:	61 e0       	ldi	r22, 0x01	; 1
    2b1e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	a0 e8       	ldi	r26, 0x80	; 128
    2b28:	bf e3       	ldi	r27, 0x3F	; 63
    2b2a:	8d ab       	std	Y+53, r24	; 0x35
    2b2c:	9e ab       	std	Y+54, r25	; 0x36
    2b2e:	af ab       	std	Y+55, r26	; 0x37
    2b30:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b32:	6d a9       	ldd	r22, Y+53	; 0x35
    2b34:	7e a9       	ldd	r23, Y+54	; 0x36
    2b36:	8f a9       	ldd	r24, Y+55	; 0x37
    2b38:	98 ad       	ldd	r25, Y+56	; 0x38
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	4a e7       	ldi	r20, 0x7A	; 122
    2b40:	55 e4       	ldi	r21, 0x45	; 69
    2b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	89 ab       	std	Y+49, r24	; 0x31
    2b4c:	9a ab       	std	Y+50, r25	; 0x32
    2b4e:	ab ab       	std	Y+51, r26	; 0x33
    2b50:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b52:	69 a9       	ldd	r22, Y+49	; 0x31
    2b54:	7a a9       	ldd	r23, Y+50	; 0x32
    2b56:	8b a9       	ldd	r24, Y+51	; 0x33
    2b58:	9c a9       	ldd	r25, Y+52	; 0x34
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	30 e0       	ldi	r19, 0x00	; 0
    2b5e:	40 e8       	ldi	r20, 0x80	; 128
    2b60:	5f e3       	ldi	r21, 0x3F	; 63
    2b62:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2b66:	88 23       	and	r24, r24
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <H_Lcd_WriteCharacter+0x90>
		__ticks = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	98 ab       	std	Y+48, r25	; 0x30
    2b70:	8f a7       	std	Y+47, r24	; 0x2f
    2b72:	3f c0       	rjmp	.+126    	; 0x2bf2 <H_Lcd_WriteCharacter+0x10e>
	else if (__tmp > 65535)
    2b74:	69 a9       	ldd	r22, Y+49	; 0x31
    2b76:	7a a9       	ldd	r23, Y+50	; 0x32
    2b78:	8b a9       	ldd	r24, Y+51	; 0x33
    2b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	4c f5       	brge	.+82     	; 0x2bde <H_Lcd_WriteCharacter+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b8e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b90:	8f a9       	ldd	r24, Y+55	; 0x37
    2b92:	98 ad       	ldd	r25, Y+56	; 0x38
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e2       	ldi	r20, 0x20	; 32
    2b9a:	51 e4       	ldi	r21, 0x41	; 65
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	98 ab       	std	Y+48, r25	; 0x30
    2bb2:	8f a7       	std	Y+47, r24	; 0x2f
    2bb4:	0f c0       	rjmp	.+30     	; 0x2bd4 <H_Lcd_WriteCharacter+0xf0>
    2bb6:	80 e9       	ldi	r24, 0x90	; 144
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	9e a7       	std	Y+46, r25	; 0x2e
    2bbc:	8d a7       	std	Y+45, r24	; 0x2d
    2bbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <H_Lcd_WriteCharacter+0xde>
    2bc6:	9e a7       	std	Y+46, r25	; 0x2e
    2bc8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	98 ab       	std	Y+48, r25	; 0x30
    2bd2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	69 f7       	brne	.-38     	; 0x2bb6 <H_Lcd_WriteCharacter+0xd2>
    2bdc:	14 c0       	rjmp	.+40     	; 0x2c06 <H_Lcd_WriteCharacter+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	69 a9       	ldd	r22, Y+49	; 0x31
    2be0:	7a a9       	ldd	r23, Y+50	; 0x32
    2be2:	8b a9       	ldd	r24, Y+51	; 0x33
    2be4:	9c a9       	ldd	r25, Y+52	; 0x34
    2be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	98 ab       	std	Y+48, r25	; 0x30
    2bf0:	8f a7       	std	Y+47, r24	; 0x2f
    2bf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bf4:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf6:	9c a7       	std	Y+44, r25	; 0x2c
    2bf8:	8b a7       	std	Y+43, r24	; 0x2b
    2bfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <H_Lcd_WriteCharacter+0x11a>
    2c02:	9c a7       	std	Y+44, r25	; 0x2c
    2c04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    2c06:	8c e0       	ldi	r24, 0x0C	; 12
    2c08:	60 e0       	ldi	r22, 0x00	; 0
    2c0a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	a0 ea       	ldi	r26, 0xA0	; 160
    2c14:	b0 e4       	ldi	r27, 0x40	; 64
    2c16:	8f a3       	std	Y+39, r24	; 0x27
    2c18:	98 a7       	std	Y+40, r25	; 0x28
    2c1a:	a9 a7       	std	Y+41, r26	; 0x29
    2c1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c20:	78 a5       	ldd	r23, Y+40	; 0x28
    2c22:	89 a5       	ldd	r24, Y+41	; 0x29
    2c24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a e7       	ldi	r20, 0x7A	; 122
    2c2c:	55 e4       	ldi	r21, 0x45	; 69
    2c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8b a3       	std	Y+35, r24	; 0x23
    2c38:	9c a3       	std	Y+36, r25	; 0x24
    2c3a:	ad a3       	std	Y+37, r26	; 0x25
    2c3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c40:	7c a1       	ldd	r23, Y+36	; 0x24
    2c42:	8d a1       	ldd	r24, Y+37	; 0x25
    2c44:	9e a1       	ldd	r25, Y+38	; 0x26
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e8       	ldi	r20, 0x80	; 128
    2c4c:	5f e3       	ldi	r21, 0x3F	; 63
    2c4e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2c52:	88 23       	and	r24, r24
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <H_Lcd_WriteCharacter+0x17c>
		__ticks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9a a3       	std	Y+34, r25	; 0x22
    2c5c:	89 a3       	std	Y+33, r24	; 0x21
    2c5e:	3f c0       	rjmp	.+126    	; 0x2cde <H_Lcd_WriteCharacter+0x1fa>
	else if (__tmp > 65535)
    2c60:	6b a1       	ldd	r22, Y+35	; 0x23
    2c62:	7c a1       	ldd	r23, Y+36	; 0x24
    2c64:	8d a1       	ldd	r24, Y+37	; 0x25
    2c66:	9e a1       	ldd	r25, Y+38	; 0x26
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	3f ef       	ldi	r19, 0xFF	; 255
    2c6c:	4f e7       	ldi	r20, 0x7F	; 127
    2c6e:	57 e4       	ldi	r21, 0x47	; 71
    2c70:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2c74:	18 16       	cp	r1, r24
    2c76:	4c f5       	brge	.+82     	; 0x2cca <H_Lcd_WriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c78:	6f a1       	ldd	r22, Y+39	; 0x27
    2c7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	51 e4       	ldi	r21, 0x41	; 65
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	bc 01       	movw	r22, r24
    2c92:	cd 01       	movw	r24, r26
    2c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	9a a3       	std	Y+34, r25	; 0x22
    2c9e:	89 a3       	std	Y+33, r24	; 0x21
    2ca0:	0f c0       	rjmp	.+30     	; 0x2cc0 <H_Lcd_WriteCharacter+0x1dc>
    2ca2:	80 e9       	ldi	r24, 0x90	; 144
    2ca4:	91 e0       	ldi	r25, 0x01	; 1
    2ca6:	98 a3       	std	Y+32, r25	; 0x20
    2ca8:	8f 8f       	std	Y+31, r24	; 0x1f
    2caa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cac:	98 a1       	ldd	r25, Y+32	; 0x20
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	f1 f7       	brne	.-4      	; 0x2cae <H_Lcd_WriteCharacter+0x1ca>
    2cb2:	98 a3       	std	Y+32, r25	; 0x20
    2cb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2cba:	01 97       	sbiw	r24, 0x01	; 1
    2cbc:	9a a3       	std	Y+34, r25	; 0x22
    2cbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc4:	00 97       	sbiw	r24, 0x00	; 0
    2cc6:	69 f7       	brne	.-38     	; 0x2ca2 <H_Lcd_WriteCharacter+0x1be>
    2cc8:	14 c0       	rjmp	.+40     	; 0x2cf2 <H_Lcd_WriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cca:	6b a1       	ldd	r22, Y+35	; 0x23
    2ccc:	7c a1       	ldd	r23, Y+36	; 0x24
    2cce:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9a a3       	std	Y+34, r25	; 0x22
    2cdc:	89 a3       	std	Y+33, r24	; 0x21
    2cde:	89 a1       	ldd	r24, Y+33	; 0x21
    2ce0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ce2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <H_Lcd_WriteCharacter+0x206>
    2cee:	9e 8f       	std	Y+30, r25	; 0x1e
    2cf0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_DATA_PORT = (((Local_u8_Character << 3) & (0b01111000)) | (LCD_DATA_PORT & (0b10000111)));
    2cf2:	ab e3       	ldi	r26, 0x3B	; 59
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	89 ad       	ldd	r24, Y+57	; 0x39
    2cf8:	88 2f       	mov	r24, r24
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	98 2f       	mov	r25, r24
    2d0a:	98 77       	andi	r25, 0x78	; 120
    2d0c:	eb e3       	ldi	r30, 0x3B	; 59
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	87 78       	andi	r24, 0x87	; 135
    2d14:	89 2b       	or	r24, r25
    2d16:	8c 93       	st	X, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    2d18:	8c e0       	ldi	r24, 0x0C	; 12
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2d20:	80 e0       	ldi	r24, 0x00	; 0
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	a0 e8       	ldi	r26, 0x80	; 128
    2d26:	bf e3       	ldi	r27, 0x3F	; 63
    2d28:	89 8f       	std	Y+25, r24	; 0x19
    2d2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	69 8d       	ldd	r22, Y+25	; 0x19
    2d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a e7       	ldi	r20, 0x7A	; 122
    2d3e:	55 e4       	ldi	r21, 0x45	; 69
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	8d 8b       	std	Y+21, r24	; 0x15
    2d4a:	9e 8b       	std	Y+22, r25	; 0x16
    2d4c:	af 8b       	std	Y+23, r26	; 0x17
    2d4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d50:	6d 89       	ldd	r22, Y+21	; 0x15
    2d52:	7e 89       	ldd	r23, Y+22	; 0x16
    2d54:	8f 89       	ldd	r24, Y+23	; 0x17
    2d56:	98 8d       	ldd	r25, Y+24	; 0x18
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e8       	ldi	r20, 0x80	; 128
    2d5e:	5f e3       	ldi	r21, 0x3F	; 63
    2d60:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2d64:	88 23       	and	r24, r24
    2d66:	2c f4       	brge	.+10     	; 0x2d72 <H_Lcd_WriteCharacter+0x28e>
		__ticks = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 8b       	std	Y+20, r25	; 0x14
    2d6e:	8b 8b       	std	Y+19, r24	; 0x13
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <H_Lcd_WriteCharacter+0x30c>
	else if (__tmp > 65535)
    2d72:	6d 89       	ldd	r22, Y+21	; 0x15
    2d74:	7e 89       	ldd	r23, Y+22	; 0x16
    2d76:	8f 89       	ldd	r24, Y+23	; 0x17
    2d78:	98 8d       	ldd	r25, Y+24	; 0x18
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	4c f5       	brge	.+82     	; 0x2ddc <H_Lcd_WriteCharacter+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9c 8b       	std	Y+20, r25	; 0x14
    2db0:	8b 8b       	std	Y+19, r24	; 0x13
    2db2:	0f c0       	rjmp	.+30     	; 0x2dd2 <H_Lcd_WriteCharacter+0x2ee>
    2db4:	80 e9       	ldi	r24, 0x90	; 144
    2db6:	91 e0       	ldi	r25, 0x01	; 1
    2db8:	9a 8b       	std	Y+18, r25	; 0x12
    2dba:	89 8b       	std	Y+17, r24	; 0x11
    2dbc:	89 89       	ldd	r24, Y+17	; 0x11
    2dbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <H_Lcd_WriteCharacter+0x2dc>
    2dc4:	9a 8b       	std	Y+18, r25	; 0x12
    2dc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dca:	9c 89       	ldd	r25, Y+20	; 0x14
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	9c 8b       	std	Y+20, r25	; 0x14
    2dd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <H_Lcd_WriteCharacter+0x2d0>
    2dda:	14 c0       	rjmp	.+40     	; 0x2e04 <H_Lcd_WriteCharacter+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dde:	7e 89       	ldd	r23, Y+22	; 0x16
    2de0:	8f 89       	ldd	r24, Y+23	; 0x17
    2de2:	98 8d       	ldd	r25, Y+24	; 0x18
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9c 8b       	std	Y+20, r25	; 0x14
    2dee:	8b 8b       	std	Y+19, r24	; 0x13
    2df0:	8b 89       	ldd	r24, Y+19	; 0x13
    2df2:	9c 89       	ldd	r25, Y+20	; 0x14
    2df4:	98 8b       	std	Y+16, r25	; 0x10
    2df6:	8f 87       	std	Y+15, r24	; 0x0f
    2df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfa:	98 89       	ldd	r25, Y+16	; 0x10
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <H_Lcd_WriteCharacter+0x318>
    2e00:	98 8b       	std	Y+16, r25	; 0x10
    2e02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    2e04:	8c e0       	ldi	r24, 0x0C	; 12
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	a0 ea       	ldi	r26, 0xA0	; 160
    2e12:	b0 e4       	ldi	r27, 0x40	; 64
    2e14:	8b 87       	std	Y+11, r24	; 0x0b
    2e16:	9c 87       	std	Y+12, r25	; 0x0c
    2e18:	ad 87       	std	Y+13, r26	; 0x0d
    2e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	4a e7       	ldi	r20, 0x7A	; 122
    2e2a:	55 e4       	ldi	r21, 0x45	; 69
    2e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8f 83       	std	Y+7, r24	; 0x07
    2e36:	98 87       	std	Y+8, r25	; 0x08
    2e38:	a9 87       	std	Y+9, r26	; 0x09
    2e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e3e:	78 85       	ldd	r23, Y+8	; 0x08
    2e40:	89 85       	ldd	r24, Y+9	; 0x09
    2e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	2c f4       	brge	.+10     	; 0x2e5e <H_Lcd_WriteCharacter+0x37a>
		__ticks = 1;
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
    2e5c:	3f c0       	rjmp	.+126    	; 0x2edc <H_Lcd_WriteCharacter+0x3f8>
	else if (__tmp > 65535)
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	3f ef       	ldi	r19, 0xFF	; 255
    2e6a:	4f e7       	ldi	r20, 0x7F	; 127
    2e6c:	57 e4       	ldi	r21, 0x47	; 71
    2e6e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2e72:	18 16       	cp	r1, r24
    2e74:	4c f5       	brge	.+82     	; 0x2ec8 <H_Lcd_WriteCharacter+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	51 e4       	ldi	r21, 0x41	; 65
    2e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9e 83       	std	Y+6, r25	; 0x06
    2e9c:	8d 83       	std	Y+5, r24	; 0x05
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <H_Lcd_WriteCharacter+0x3da>
    2ea0:	80 e9       	ldi	r24, 0x90	; 144
    2ea2:	91 e0       	ldi	r25, 0x01	; 1
    2ea4:	9c 83       	std	Y+4, r25	; 0x04
    2ea6:	8b 83       	std	Y+3, r24	; 0x03
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2eac:	01 97       	sbiw	r24, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <H_Lcd_WriteCharacter+0x3c8>
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	69 f7       	brne	.-38     	; 0x2ea0 <H_Lcd_WriteCharacter+0x3bc>
    2ec6:	14 c0       	rjmp	.+40     	; 0x2ef0 <H_Lcd_WriteCharacter+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eca:	78 85       	ldd	r23, Y+8	; 0x08
    2ecc:	89 85       	ldd	r24, Y+9	; 0x09
    2ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <H_Lcd_WriteCharacter+0x404>
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    2ef0:	e9 96       	adiw	r28, 0x39	; 57
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <H_Lcd_WriteCommand>:

void H_Lcd_WriteCommand(u8 Local_u8_Command)
{
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	e9 97       	sbiw	r28, 0x39	; 57
    2f0c:	0f b6       	in	r0, 0x3f	; 63
    2f0e:	f8 94       	cli
    2f10:	de bf       	out	0x3e, r29	; 62
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	cd bf       	out	0x3d, r28	; 61
    2f16:	89 af       	std	Y+57, r24	; 0x39
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	#elif  LCD_MODE       ==     _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
    2f18:	8b e0       	ldi	r24, 0x0B	; 11
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	LCD_DATA_PORT = (((Local_u8_Command >> 1) & (0b01111000)) | (LCD_DATA_PORT & (0b10000111)));
    2f20:	ab e3       	ldi	r26, 0x3B	; 59
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	89 ad       	ldd	r24, Y+57	; 0x39
    2f26:	86 95       	lsr	r24
    2f28:	98 2f       	mov	r25, r24
    2f2a:	98 77       	andi	r25, 0x78	; 120
    2f2c:	eb e3       	ldi	r30, 0x3B	; 59
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	87 78       	andi	r24, 0x87	; 135
    2f34:	89 2b       	or	r24, r25
    2f36:	8c 93       	st	X, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    2f38:	8c e0       	ldi	r24, 0x0C	; 12
    2f3a:	61 e0       	ldi	r22, 0x01	; 1
    2f3c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    2f40:	80 e0       	ldi	r24, 0x00	; 0
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	a0 e8       	ldi	r26, 0x80	; 128
    2f46:	bf e3       	ldi	r27, 0x3F	; 63
    2f48:	8d ab       	std	Y+53, r24	; 0x35
    2f4a:	9e ab       	std	Y+54, r25	; 0x36
    2f4c:	af ab       	std	Y+55, r26	; 0x37
    2f4e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f50:	6d a9       	ldd	r22, Y+53	; 0x35
    2f52:	7e a9       	ldd	r23, Y+54	; 0x36
    2f54:	8f a9       	ldd	r24, Y+55	; 0x37
    2f56:	98 ad       	ldd	r25, Y+56	; 0x38
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	4a e7       	ldi	r20, 0x7A	; 122
    2f5e:	55 e4       	ldi	r21, 0x45	; 69
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	89 ab       	std	Y+49, r24	; 0x31
    2f6a:	9a ab       	std	Y+50, r25	; 0x32
    2f6c:	ab ab       	std	Y+51, r26	; 0x33
    2f6e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f70:	69 a9       	ldd	r22, Y+49	; 0x31
    2f72:	7a a9       	ldd	r23, Y+50	; 0x32
    2f74:	8b a9       	ldd	r24, Y+51	; 0x33
    2f76:	9c a9       	ldd	r25, Y+52	; 0x34
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <H_Lcd_WriteCommand+0x90>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	98 ab       	std	Y+48, r25	; 0x30
    2f8e:	8f a7       	std	Y+47, r24	; 0x2f
    2f90:	3f c0       	rjmp	.+126    	; 0x3010 <H_Lcd_WriteCommand+0x10e>
	else if (__tmp > 65535)
    2f92:	69 a9       	ldd	r22, Y+49	; 0x31
    2f94:	7a a9       	ldd	r23, Y+50	; 0x32
    2f96:	8b a9       	ldd	r24, Y+51	; 0x33
    2f98:	9c a9       	ldd	r25, Y+52	; 0x34
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	4c f5       	brge	.+82     	; 0x2ffc <H_Lcd_WriteCommand+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2faa:	6d a9       	ldd	r22, Y+53	; 0x35
    2fac:	7e a9       	ldd	r23, Y+54	; 0x36
    2fae:	8f a9       	ldd	r24, Y+55	; 0x37
    2fb0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	98 ab       	std	Y+48, r25	; 0x30
    2fd0:	8f a7       	std	Y+47, r24	; 0x2f
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <H_Lcd_WriteCommand+0xf0>
    2fd4:	80 e9       	ldi	r24, 0x90	; 144
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	9e a7       	std	Y+46, r25	; 0x2e
    2fda:	8d a7       	std	Y+45, r24	; 0x2d
    2fdc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fde:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <H_Lcd_WriteCommand+0xde>
    2fe4:	9e a7       	std	Y+46, r25	; 0x2e
    2fe6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fea:	98 a9       	ldd	r25, Y+48	; 0x30
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	98 ab       	std	Y+48, r25	; 0x30
    2ff0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <H_Lcd_WriteCommand+0xd2>
    2ffa:	14 c0       	rjmp	.+40     	; 0x3024 <H_Lcd_WriteCommand+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    3000:	8b a9       	ldd	r24, Y+51	; 0x33
    3002:	9c a9       	ldd	r25, Y+52	; 0x34
    3004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	98 ab       	std	Y+48, r25	; 0x30
    300e:	8f a7       	std	Y+47, r24	; 0x2f
    3010:	8f a5       	ldd	r24, Y+47	; 0x2f
    3012:	98 a9       	ldd	r25, Y+48	; 0x30
    3014:	9c a7       	std	Y+44, r25	; 0x2c
    3016:	8b a7       	std	Y+43, r24	; 0x2b
    3018:	8b a5       	ldd	r24, Y+43	; 0x2b
    301a:	9c a5       	ldd	r25, Y+44	; 0x2c
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <H_Lcd_WriteCommand+0x11a>
    3020:	9c a7       	std	Y+44, r25	; 0x2c
    3022:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    3024:	8c e0       	ldi	r24, 0x0C	; 12
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 ea       	ldi	r26, 0xA0	; 160
    3032:	b0 e4       	ldi	r27, 0x40	; 64
    3034:	8f a3       	std	Y+39, r24	; 0x27
    3036:	98 a7       	std	Y+40, r25	; 0x28
    3038:	a9 a7       	std	Y+41, r26	; 0x29
    303a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303c:	6f a1       	ldd	r22, Y+39	; 0x27
    303e:	78 a5       	ldd	r23, Y+40	; 0x28
    3040:	89 a5       	ldd	r24, Y+41	; 0x29
    3042:	9a a5       	ldd	r25, Y+42	; 0x2a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	4a e7       	ldi	r20, 0x7A	; 122
    304a:	55 e4       	ldi	r21, 0x45	; 69
    304c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	8b a3       	std	Y+35, r24	; 0x23
    3056:	9c a3       	std	Y+36, r25	; 0x24
    3058:	ad a3       	std	Y+37, r26	; 0x25
    305a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    305c:	6b a1       	ldd	r22, Y+35	; 0x23
    305e:	7c a1       	ldd	r23, Y+36	; 0x24
    3060:	8d a1       	ldd	r24, Y+37	; 0x25
    3062:	9e a1       	ldd	r25, Y+38	; 0x26
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	40 e8       	ldi	r20, 0x80	; 128
    306a:	5f e3       	ldi	r21, 0x3F	; 63
    306c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3070:	88 23       	and	r24, r24
    3072:	2c f4       	brge	.+10     	; 0x307e <H_Lcd_WriteCommand+0x17c>
		__ticks = 1;
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	9a a3       	std	Y+34, r25	; 0x22
    307a:	89 a3       	std	Y+33, r24	; 0x21
    307c:	3f c0       	rjmp	.+126    	; 0x30fc <H_Lcd_WriteCommand+0x1fa>
	else if (__tmp > 65535)
    307e:	6b a1       	ldd	r22, Y+35	; 0x23
    3080:	7c a1       	ldd	r23, Y+36	; 0x24
    3082:	8d a1       	ldd	r24, Y+37	; 0x25
    3084:	9e a1       	ldd	r25, Y+38	; 0x26
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	3f ef       	ldi	r19, 0xFF	; 255
    308a:	4f e7       	ldi	r20, 0x7F	; 127
    308c:	57 e4       	ldi	r21, 0x47	; 71
    308e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3092:	18 16       	cp	r1, r24
    3094:	4c f5       	brge	.+82     	; 0x30e8 <H_Lcd_WriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3096:	6f a1       	ldd	r22, Y+39	; 0x27
    3098:	78 a5       	ldd	r23, Y+40	; 0x28
    309a:	89 a5       	ldd	r24, Y+41	; 0x29
    309c:	9a a5       	ldd	r25, Y+42	; 0x2a
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	40 e2       	ldi	r20, 0x20	; 32
    30a4:	51 e4       	ldi	r21, 0x41	; 65
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	bc 01       	movw	r22, r24
    30b0:	cd 01       	movw	r24, r26
    30b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	9a a3       	std	Y+34, r25	; 0x22
    30bc:	89 a3       	std	Y+33, r24	; 0x21
    30be:	0f c0       	rjmp	.+30     	; 0x30de <H_Lcd_WriteCommand+0x1dc>
    30c0:	80 e9       	ldi	r24, 0x90	; 144
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	98 a3       	std	Y+32, r25	; 0x20
    30c6:	8f 8f       	std	Y+31, r24	; 0x1f
    30c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ca:	98 a1       	ldd	r25, Y+32	; 0x20
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	f1 f7       	brne	.-4      	; 0x30cc <H_Lcd_WriteCommand+0x1ca>
    30d0:	98 a3       	std	Y+32, r25	; 0x20
    30d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d4:	89 a1       	ldd	r24, Y+33	; 0x21
    30d6:	9a a1       	ldd	r25, Y+34	; 0x22
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	9a a3       	std	Y+34, r25	; 0x22
    30dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30de:	89 a1       	ldd	r24, Y+33	; 0x21
    30e0:	9a a1       	ldd	r25, Y+34	; 0x22
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	69 f7       	brne	.-38     	; 0x30c0 <H_Lcd_WriteCommand+0x1be>
    30e6:	14 c0       	rjmp	.+40     	; 0x3110 <H_Lcd_WriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e8:	6b a1       	ldd	r22, Y+35	; 0x23
    30ea:	7c a1       	ldd	r23, Y+36	; 0x24
    30ec:	8d a1       	ldd	r24, Y+37	; 0x25
    30ee:	9e a1       	ldd	r25, Y+38	; 0x26
    30f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	9a a3       	std	Y+34, r25	; 0x22
    30fa:	89 a3       	std	Y+33, r24	; 0x21
    30fc:	89 a1       	ldd	r24, Y+33	; 0x21
    30fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3100:	9e 8f       	std	Y+30, r25	; 0x1e
    3102:	8d 8f       	std	Y+29, r24	; 0x1d
    3104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3106:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <H_Lcd_WriteCommand+0x206>
    310c:	9e 8f       	std	Y+30, r25	; 0x1e
    310e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_DATA_PORT = (((Local_u8_Command << 3) & (0b01111000)) | (LCD_DATA_PORT & (0b10000111)));
    3110:	ab e3       	ldi	r26, 0x3B	; 59
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	89 ad       	ldd	r24, Y+57	; 0x39
    3116:	88 2f       	mov	r24, r24
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
    3122:	88 0f       	add	r24, r24
    3124:	99 1f       	adc	r25, r25
    3126:	98 2f       	mov	r25, r24
    3128:	98 77       	andi	r25, 0x78	; 120
    312a:	eb e3       	ldi	r30, 0x3B	; 59
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	87 78       	andi	r24, 0x87	; 135
    3132:	89 2b       	or	r24, r25
    3134:	8c 93       	st	X, r24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    3136:	8c e0       	ldi	r24, 0x0C	; 12
    3138:	61 e0       	ldi	r22, 0x01	; 1
    313a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    313e:	80 e0       	ldi	r24, 0x00	; 0
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	a0 e8       	ldi	r26, 0x80	; 128
    3144:	bf e3       	ldi	r27, 0x3F	; 63
    3146:	89 8f       	std	Y+25, r24	; 0x19
    3148:	9a 8f       	std	Y+26, r25	; 0x1a
    314a:	ab 8f       	std	Y+27, r26	; 0x1b
    314c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    314e:	69 8d       	ldd	r22, Y+25	; 0x19
    3150:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3152:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3154:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	4a e7       	ldi	r20, 0x7A	; 122
    315c:	55 e4       	ldi	r21, 0x45	; 69
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	8d 8b       	std	Y+21, r24	; 0x15
    3168:	9e 8b       	std	Y+22, r25	; 0x16
    316a:	af 8b       	std	Y+23, r26	; 0x17
    316c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    316e:	6d 89       	ldd	r22, Y+21	; 0x15
    3170:	7e 89       	ldd	r23, Y+22	; 0x16
    3172:	8f 89       	ldd	r24, Y+23	; 0x17
    3174:	98 8d       	ldd	r25, Y+24	; 0x18
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e8       	ldi	r20, 0x80	; 128
    317c:	5f e3       	ldi	r21, 0x3F	; 63
    317e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3182:	88 23       	and	r24, r24
    3184:	2c f4       	brge	.+10     	; 0x3190 <H_Lcd_WriteCommand+0x28e>
		__ticks = 1;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	9c 8b       	std	Y+20, r25	; 0x14
    318c:	8b 8b       	std	Y+19, r24	; 0x13
    318e:	3f c0       	rjmp	.+126    	; 0x320e <H_Lcd_WriteCommand+0x30c>
	else if (__tmp > 65535)
    3190:	6d 89       	ldd	r22, Y+21	; 0x15
    3192:	7e 89       	ldd	r23, Y+22	; 0x16
    3194:	8f 89       	ldd	r24, Y+23	; 0x17
    3196:	98 8d       	ldd	r25, Y+24	; 0x18
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	3f ef       	ldi	r19, 0xFF	; 255
    319c:	4f e7       	ldi	r20, 0x7F	; 127
    319e:	57 e4       	ldi	r21, 0x47	; 71
    31a0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    31a4:	18 16       	cp	r1, r24
    31a6:	4c f5       	brge	.+82     	; 0x31fa <H_Lcd_WriteCommand+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a8:	69 8d       	ldd	r22, Y+25	; 0x19
    31aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e2       	ldi	r20, 0x20	; 32
    31b6:	51 e4       	ldi	r21, 0x41	; 65
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9c 8b       	std	Y+20, r25	; 0x14
    31ce:	8b 8b       	std	Y+19, r24	; 0x13
    31d0:	0f c0       	rjmp	.+30     	; 0x31f0 <H_Lcd_WriteCommand+0x2ee>
    31d2:	80 e9       	ldi	r24, 0x90	; 144
    31d4:	91 e0       	ldi	r25, 0x01	; 1
    31d6:	9a 8b       	std	Y+18, r25	; 0x12
    31d8:	89 8b       	std	Y+17, r24	; 0x11
    31da:	89 89       	ldd	r24, Y+17	; 0x11
    31dc:	9a 89       	ldd	r25, Y+18	; 0x12
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	f1 f7       	brne	.-4      	; 0x31de <H_Lcd_WriteCommand+0x2dc>
    31e2:	9a 8b       	std	Y+18, r25	; 0x12
    31e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e6:	8b 89       	ldd	r24, Y+19	; 0x13
    31e8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ea:	01 97       	sbiw	r24, 0x01	; 1
    31ec:	9c 8b       	std	Y+20, r25	; 0x14
    31ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f0:	8b 89       	ldd	r24, Y+19	; 0x13
    31f2:	9c 89       	ldd	r25, Y+20	; 0x14
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	69 f7       	brne	.-38     	; 0x31d2 <H_Lcd_WriteCommand+0x2d0>
    31f8:	14 c0       	rjmp	.+40     	; 0x3222 <H_Lcd_WriteCommand+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fa:	6d 89       	ldd	r22, Y+21	; 0x15
    31fc:	7e 89       	ldd	r23, Y+22	; 0x16
    31fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3200:	98 8d       	ldd	r25, Y+24	; 0x18
    3202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3206:	dc 01       	movw	r26, r24
    3208:	cb 01       	movw	r24, r22
    320a:	9c 8b       	std	Y+20, r25	; 0x14
    320c:	8b 8b       	std	Y+19, r24	; 0x13
    320e:	8b 89       	ldd	r24, Y+19	; 0x13
    3210:	9c 89       	ldd	r25, Y+20	; 0x14
    3212:	98 8b       	std	Y+16, r25	; 0x10
    3214:	8f 87       	std	Y+15, r24	; 0x0f
    3216:	8f 85       	ldd	r24, Y+15	; 0x0f
    3218:	98 89       	ldd	r25, Y+16	; 0x10
    321a:	01 97       	sbiw	r24, 0x01	; 1
    321c:	f1 f7       	brne	.-4      	; 0x321a <H_Lcd_WriteCommand+0x318>
    321e:	98 8b       	std	Y+16, r25	; 0x10
    3220:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    3222:	8c e0       	ldi	r24, 0x0C	; 12
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
    322a:	80 e0       	ldi	r24, 0x00	; 0
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	a0 ea       	ldi	r26, 0xA0	; 160
    3230:	b0 e4       	ldi	r27, 0x40	; 64
    3232:	8b 87       	std	Y+11, r24	; 0x0b
    3234:	9c 87       	std	Y+12, r25	; 0x0c
    3236:	ad 87       	std	Y+13, r26	; 0x0d
    3238:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323a:	6b 85       	ldd	r22, Y+11	; 0x0b
    323c:	7c 85       	ldd	r23, Y+12	; 0x0c
    323e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3240:	9e 85       	ldd	r25, Y+14	; 0x0e
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	4a e7       	ldi	r20, 0x7A	; 122
    3248:	55 e4       	ldi	r21, 0x45	; 69
    324a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	8f 83       	std	Y+7, r24	; 0x07
    3254:	98 87       	std	Y+8, r25	; 0x08
    3256:	a9 87       	std	Y+9, r26	; 0x09
    3258:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	40 e8       	ldi	r20, 0x80	; 128
    3268:	5f e3       	ldi	r21, 0x3F	; 63
    326a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    326e:	88 23       	and	r24, r24
    3270:	2c f4       	brge	.+10     	; 0x327c <H_Lcd_WriteCommand+0x37a>
		__ticks = 1;
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
    327a:	3f c0       	rjmp	.+126    	; 0x32fa <H_Lcd_WriteCommand+0x3f8>
	else if (__tmp > 65535)
    327c:	6f 81       	ldd	r22, Y+7	; 0x07
    327e:	78 85       	ldd	r23, Y+8	; 0x08
    3280:	89 85       	ldd	r24, Y+9	; 0x09
    3282:	9a 85       	ldd	r25, Y+10	; 0x0a
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	3f ef       	ldi	r19, 0xFF	; 255
    3288:	4f e7       	ldi	r20, 0x7F	; 127
    328a:	57 e4       	ldi	r21, 0x47	; 71
    328c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3290:	18 16       	cp	r1, r24
    3292:	4c f5       	brge	.+82     	; 0x32e6 <H_Lcd_WriteCommand+0x3e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3294:	6b 85       	ldd	r22, Y+11	; 0x0b
    3296:	7c 85       	ldd	r23, Y+12	; 0x0c
    3298:	8d 85       	ldd	r24, Y+13	; 0x0d
    329a:	9e 85       	ldd	r25, Y+14	; 0x0e
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	40 e2       	ldi	r20, 0x20	; 32
    32a2:	51 e4       	ldi	r21, 0x41	; 65
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	9e 83       	std	Y+6, r25	; 0x06
    32ba:	8d 83       	std	Y+5, r24	; 0x05
    32bc:	0f c0       	rjmp	.+30     	; 0x32dc <H_Lcd_WriteCommand+0x3da>
    32be:	80 e9       	ldi	r24, 0x90	; 144
    32c0:	91 e0       	ldi	r25, 0x01	; 1
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	8b 83       	std	Y+3, r24	; 0x03
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	01 97       	sbiw	r24, 0x01	; 1
    32cc:	f1 f7       	brne	.-4      	; 0x32ca <H_Lcd_WriteCommand+0x3c8>
    32ce:	9c 83       	std	Y+4, r25	; 0x04
    32d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	01 97       	sbiw	r24, 0x01	; 1
    32d8:	9e 83       	std	Y+6, r25	; 0x06
    32da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	69 f7       	brne	.-38     	; 0x32be <H_Lcd_WriteCommand+0x3bc>
    32e4:	14 c0       	rjmp	.+40     	; 0x330e <H_Lcd_WriteCommand+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e6:	6f 81       	ldd	r22, Y+7	; 0x07
    32e8:	78 85       	ldd	r23, Y+8	; 0x08
    32ea:	89 85       	ldd	r24, Y+9	; 0x09
    32ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	9e 83       	std	Y+6, r25	; 0x06
    32f8:	8d 83       	std	Y+5, r24	; 0x05
    32fa:	8d 81       	ldd	r24, Y+5	; 0x05
    32fc:	9e 81       	ldd	r25, Y+6	; 0x06
    32fe:	9a 83       	std	Y+2, r25	; 0x02
    3300:	89 83       	std	Y+1, r24	; 0x01
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	01 97       	sbiw	r24, 0x01	; 1
    3308:	f1 f7       	brne	.-4      	; 0x3306 <H_Lcd_WriteCommand+0x404>
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	#endif
}
    330e:	e9 96       	adiw	r28, 0x39	; 57
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <H_Lcd_WriteString>:

void H_Lcd_WriteString(u8*Local_u8_Ptr)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <H_Lcd_WriteString+0x6>
    3326:	0f 92       	push	r0
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	9b 83       	std	Y+3, r25	; 0x03
    332e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0;
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	0e c0       	rjmp	.+28     	; 0x3350 <H_Lcd_WriteString+0x30>
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	fc 01       	movw	r30, r24
    3340:	e2 0f       	add	r30, r18
    3342:	f3 1f       	adc	r31, r19
    3344:	80 81       	ld	r24, Z
    3346:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	8f 5f       	subi	r24, 0xFF	; 255
    334e:	89 83       	std	Y+1, r24	; 0x01
}

void H_Lcd_WriteString(u8*Local_u8_Ptr)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	9b 81       	ldd	r25, Y+3	; 0x03
    335a:	fc 01       	movw	r30, r24
    335c:	e2 0f       	add	r30, r18
    335e:	f3 1f       	adc	r31, r19
    3360:	80 81       	ld	r24, Z
    3362:	88 23       	and	r24, r24
    3364:	39 f7       	brne	.-50     	; 0x3334 <H_Lcd_WriteString+0x14>
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
		Local_u8_Counter++;
	}
}
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <H_Lcd_WriteNum>:


void H_Lcd_WriteNum(f32 Local_f32_Num)
{
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
    337a:	66 97       	sbiw	r28, 0x16	; 22
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	6b 8b       	std	Y+19, r22	; 0x13
    3388:	7c 8b       	std	Y+20, r23	; 0x14
    338a:	8d 8b       	std	Y+21, r24	; 0x15
    338c:	9e 8b       	std	Y+22, r25	; 0x16
	f32 Local_f32_temp = 0;
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	a0 e0       	ldi	r26, 0x00	; 0
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	8f 83       	std	Y+7, r24	; 0x07
    3398:	98 87       	std	Y+8, r25	; 0x08
    339a:	a9 87       	std	Y+9, r26	; 0x09
    339c:	ba 87       	std	Y+10, r27	; 0x0a
	s32 Local_s32_Num = 0;
    339e:	1b 82       	std	Y+3, r1	; 0x03
    33a0:	1c 82       	std	Y+4, r1	; 0x04
    33a2:	1d 82       	std	Y+5, r1	; 0x05
    33a4:	1e 82       	std	Y+6, r1	; 0x06
	u8 Local_u8_Unit = 0;
    33a6:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_s8_Counter = 0;
    33a8:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8_arr[8] = {0}; // all array elements are zero
    33aa:	88 e0       	ldi	r24, 0x08	; 8
    33ac:	fe 01       	movw	r30, r28
    33ae:	3b 96       	adiw	r30, 0x0b	; 11
    33b0:	df 01       	movw	r26, r30
    33b2:	98 2f       	mov	r25, r24
    33b4:	1d 92       	st	X+, r1
    33b6:	9a 95       	dec	r25
    33b8:	e9 f7       	brne	.-6      	; 0x33b4 <H_Lcd_WriteNum+0x42>
	// checking for zero
	if (Local_f32_Num == 0)
    33ba:	6b 89       	ldd	r22, Y+19	; 0x13
    33bc:	7c 89       	ldd	r23, Y+20	; 0x14
    33be:	8d 89       	ldd	r24, Y+21	; 0x15
    33c0:	9e 89       	ldd	r25, Y+22	; 0x16
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e0       	ldi	r20, 0x00	; 0
    33c8:	50 e0       	ldi	r21, 0x00	; 0
    33ca:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	21 f4       	brne	.+8      	; 0x33da <H_Lcd_WriteNum+0x68>
	{
		H_Lcd_WriteCharacter('0');
    33d2:	80 e3       	ldi	r24, 0x30	; 48
    33d4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
    33d8:	df c0       	rjmp	.+446    	; 0x3598 <H_Lcd_WriteNum+0x226>
	}

	else
	{
		// checking for negative
		if (Local_f32_Num<0)
    33da:	6b 89       	ldd	r22, Y+19	; 0x13
    33dc:	7c 89       	ldd	r23, Y+20	; 0x14
    33de:	8d 89       	ldd	r24, Y+21	; 0x15
    33e0:	9e 89       	ldd	r25, Y+22	; 0x16
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	40 e0       	ldi	r20, 0x00	; 0
    33e8:	50 e0       	ldi	r21, 0x00	; 0
    33ea:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    33ee:	88 23       	and	r24, r24
    33f0:	64 f4       	brge	.+24     	; 0x340a <H_Lcd_WriteNum+0x98>
		{
			H_Lcd_WriteCharacter('-');
    33f2:	8d e2       	ldi	r24, 0x2D	; 45
    33f4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
			Local_f32_Num *= (-1);
    33f8:	8b 89       	ldd	r24, Y+19	; 0x13
    33fa:	9c 89       	ldd	r25, Y+20	; 0x14
    33fc:	ad 89       	ldd	r26, Y+21	; 0x15
    33fe:	be 89       	ldd	r27, Y+22	; 0x16
    3400:	b0 58       	subi	r27, 0x80	; 128
    3402:	8b 8b       	std	Y+19, r24	; 0x13
    3404:	9c 8b       	std	Y+20, r25	; 0x14
    3406:	ad 8b       	std	Y+21, r26	; 0x15
    3408:	be 8b       	std	Y+22, r27	; 0x16
		}

		// getting float and integer parts
		Local_f32_temp = Local_f32_Num;
    340a:	8b 89       	ldd	r24, Y+19	; 0x13
    340c:	9c 89       	ldd	r25, Y+20	; 0x14
    340e:	ad 89       	ldd	r26, Y+21	; 0x15
    3410:	be 89       	ldd	r27, Y+22	; 0x16
    3412:	8f 83       	std	Y+7, r24	; 0x07
    3414:	98 87       	std	Y+8, r25	; 0x08
    3416:	a9 87       	std	Y+9, r26	; 0x09
    3418:	ba 87       	std	Y+10, r27	; 0x0a
		Local_s32_Num = Local_f32_Num;
    341a:	6b 89       	ldd	r22, Y+19	; 0x13
    341c:	7c 89       	ldd	r23, Y+20	; 0x14
    341e:	8d 89       	ldd	r24, Y+21	; 0x15
    3420:	9e 89       	ldd	r25, Y+22	; 0x16
    3422:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	8b 83       	std	Y+3, r24	; 0x03
    342c:	9c 83       	std	Y+4, r25	; 0x04
    342e:	ad 83       	std	Y+5, r26	; 0x05
    3430:	be 83       	std	Y+6, r27	; 0x06
		Local_f32_temp = Local_f32_temp - Local_s32_Num;
    3432:	6b 81       	ldd	r22, Y+3	; 0x03
    3434:	7c 81       	ldd	r23, Y+4	; 0x04
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    343e:	9b 01       	movw	r18, r22
    3440:	ac 01       	movw	r20, r24
    3442:	6f 81       	ldd	r22, Y+7	; 0x07
    3444:	78 85       	ldd	r23, Y+8	; 0x08
    3446:	89 85       	ldd	r24, Y+9	; 0x09
    3448:	9a 85       	ldd	r25, Y+10	; 0x0a
    344a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8f 83       	std	Y+7, r24	; 0x07
    3454:	98 87       	std	Y+8, r25	; 0x08
    3456:	a9 87       	std	Y+9, r26	; 0x09
    3458:	ba 87       	std	Y+10, r27	; 0x0a
    345a:	30 c0       	rjmp	.+96     	; 0x34bc <H_Lcd_WriteNum+0x14a>

		// printing integer part
		while(Local_s32_Num != 0)
		{
			Local_u8_Unit = Local_s32_Num % 10;
    345c:	8b 81       	ldd	r24, Y+3	; 0x03
    345e:	9c 81       	ldd	r25, Y+4	; 0x04
    3460:	ad 81       	ldd	r26, Y+5	; 0x05
    3462:	be 81       	ldd	r27, Y+6	; 0x06
    3464:	2a e0       	ldi	r18, 0x0A	; 10
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8_arr[Local_s8_Counter] = Local_u8_Unit;
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	33 27       	eor	r19, r19
    3480:	27 fd       	sbrc	r18, 7
    3482:	30 95       	com	r19
    3484:	ce 01       	movw	r24, r28
    3486:	0b 96       	adiw	r24, 0x0b	; 11
    3488:	fc 01       	movw	r30, r24
    348a:	e2 0f       	add	r30, r18
    348c:	f3 1f       	adc	r31, r19
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	80 83       	st	Z, r24
			Local_s8_Counter++;
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	8f 5f       	subi	r24, 0xFF	; 255
    3496:	89 83       	std	Y+1, r24	; 0x01
			Local_s32_Num = Local_s32_Num / 10;
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	ad 81       	ldd	r26, Y+5	; 0x05
    349e:	be 81       	ldd	r27, Y+6	; 0x06
    34a0:	2a e0       	ldi	r18, 0x0A	; 10
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	40 e0       	ldi	r20, 0x00	; 0
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 4c 22 	call	0x4498	; 0x4498 <__divmodsi4>
    34b0:	da 01       	movw	r26, r20
    34b2:	c9 01       	movw	r24, r18
    34b4:	8b 83       	std	Y+3, r24	; 0x03
    34b6:	9c 83       	std	Y+4, r25	; 0x04
    34b8:	ad 83       	std	Y+5, r26	; 0x05
    34ba:	be 83       	std	Y+6, r27	; 0x06
		Local_f32_temp = Local_f32_Num;
		Local_s32_Num = Local_f32_Num;
		Local_f32_temp = Local_f32_temp - Local_s32_Num;

		// printing integer part
		while(Local_s32_Num != 0)
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	ad 81       	ldd	r26, Y+5	; 0x05
    34c2:	be 81       	ldd	r27, Y+6	; 0x06
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	a1 05       	cpc	r26, r1
    34c8:	b1 05       	cpc	r27, r1
    34ca:	41 f6       	brne	.-112    	; 0x345c <H_Lcd_WriteNum+0xea>
			Local_u8_Unit = Local_s32_Num % 10;
			Local_u8_arr[Local_s8_Counter] = Local_u8_Unit;
			Local_s8_Counter++;
			Local_s32_Num = Local_s32_Num / 10;
		}
		Local_s8_Counter--;
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	81 50       	subi	r24, 0x01	; 1
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	11 c0       	rjmp	.+34     	; 0x34f6 <H_Lcd_WriteNum+0x184>
		while(Local_s8_Counter>=0)
		{
			H_Lcd_WriteCharacter(Local_u8_arr[Local_s8_Counter]+48);
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	28 2f       	mov	r18, r24
    34d8:	33 27       	eor	r19, r19
    34da:	27 fd       	sbrc	r18, 7
    34dc:	30 95       	com	r19
    34de:	ce 01       	movw	r24, r28
    34e0:	0b 96       	adiw	r24, 0x0b	; 11
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	80 81       	ld	r24, Z
    34ea:	80 5d       	subi	r24, 0xD0	; 208
    34ec:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
			Local_s8_Counter--;
    34f0:	89 81       	ldd	r24, Y+1	; 0x01
    34f2:	81 50       	subi	r24, 0x01	; 1
    34f4:	89 83       	std	Y+1, r24	; 0x01
			Local_u8_arr[Local_s8_Counter] = Local_u8_Unit;
			Local_s8_Counter++;
			Local_s32_Num = Local_s32_Num / 10;
		}
		Local_s8_Counter--;
		while(Local_s8_Counter>=0)
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	88 23       	and	r24, r24
    34fa:	64 f7       	brge	.-40     	; 0x34d4 <H_Lcd_WriteNum+0x162>
			H_Lcd_WriteCharacter(Local_u8_arr[Local_s8_Counter]+48);
			Local_s8_Counter--;
		}

		// printing float part
		if(Local_f32_temp > 0)
    34fc:	6f 81       	ldd	r22, Y+7	; 0x07
    34fe:	78 85       	ldd	r23, Y+8	; 0x08
    3500:	89 85       	ldd	r24, Y+9	; 0x09
    3502:	9a 85       	ldd	r25, Y+10	; 0x0a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	40 e0       	ldi	r20, 0x00	; 0
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3510:	18 16       	cp	r1, r24
    3512:	0c f0       	brlt	.+2      	; 0x3516 <H_Lcd_WriteNum+0x1a4>
    3514:	41 c0       	rjmp	.+130    	; 0x3598 <H_Lcd_WriteNum+0x226>
		{
			H_Lcd_WriteCharacter('.');
    3516:	8e e2       	ldi	r24, 0x2E	; 46
    3518:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
			for(Local_s8_Counter = 0; Local_s8_Counter < FLOAT_PRESISION; Local_s8_Counter++) // setting the number of digits after the decimal point to "FLOAT_PRESISION"
    351c:	19 82       	std	Y+1, r1	; 0x01
    351e:	39 c0       	rjmp	.+114    	; 0x3592 <H_Lcd_WriteNum+0x220>
			{
				Local_f32_temp *= 10;
    3520:	6f 81       	ldd	r22, Y+7	; 0x07
    3522:	78 85       	ldd	r23, Y+8	; 0x08
    3524:	89 85       	ldd	r24, Y+9	; 0x09
    3526:	9a 85       	ldd	r25, Y+10	; 0x0a
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	40 e2       	ldi	r20, 0x20	; 32
    352e:	51 e4       	ldi	r21, 0x41	; 65
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8f 83       	std	Y+7, r24	; 0x07
    353a:	98 87       	std	Y+8, r25	; 0x08
    353c:	a9 87       	std	Y+9, r26	; 0x09
    353e:	ba 87       	std	Y+10, r27	; 0x0a
				Local_u8_Unit = Local_f32_temp;
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	8a 83       	std	Y+2, r24	; 0x02
				H_Lcd_WriteCharacter(Local_u8_Unit + 48);
    3552:	8a 81       	ldd	r24, Y+2	; 0x02
    3554:	80 5d       	subi	r24, 0xD0	; 208
    3556:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
				Local_f32_temp = Local_f32_temp - Local_u8_Unit;
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	aa 27       	eor	r26, r26
    3562:	97 fd       	sbrc	r25, 7
    3564:	a0 95       	com	r26
    3566:	ba 2f       	mov	r27, r26
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    3570:	9b 01       	movw	r18, r22
    3572:	ac 01       	movw	r20, r24
    3574:	6f 81       	ldd	r22, Y+7	; 0x07
    3576:	78 85       	ldd	r23, Y+8	; 0x08
    3578:	89 85       	ldd	r24, Y+9	; 0x09
    357a:	9a 85       	ldd	r25, Y+10	; 0x0a
    357c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3580:	dc 01       	movw	r26, r24
    3582:	cb 01       	movw	r24, r22
    3584:	8f 83       	std	Y+7, r24	; 0x07
    3586:	98 87       	std	Y+8, r25	; 0x08
    3588:	a9 87       	std	Y+9, r26	; 0x09
    358a:	ba 87       	std	Y+10, r27	; 0x0a

		// printing float part
		if(Local_f32_temp > 0)
		{
			H_Lcd_WriteCharacter('.');
			for(Local_s8_Counter = 0; Local_s8_Counter < FLOAT_PRESISION; Local_s8_Counter++) // setting the number of digits after the decimal point to "FLOAT_PRESISION"
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	89 83       	std	Y+1, r24	; 0x01
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	84 30       	cpi	r24, 0x04	; 4
    3596:	24 f2       	brlt	.-120    	; 0x3520 <H_Lcd_WriteNum+0x1ae>
				H_Lcd_WriteCharacter(Local_u8_Unit + 48);
				Local_f32_temp = Local_f32_temp - Local_u8_Unit;
			}
		}
	}
}
    3598:	66 96       	adiw	r28, 0x16	; 22
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	de bf       	out	0x3e, r29	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	cd bf       	out	0x3d, r28	; 61
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <H_Lcd_Clr>:


void H_Lcd_Clr(void)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_WriteCommand(LCD_CLR);
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
}
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <H_Lcd_GoTo>:

void H_Lcd_GoTo(u8 Local_u8_Row,u8 Local_u8_Col)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	00 d0       	rcall	.+0      	; 0x35c4 <H_Lcd_GoTo+0x6>
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <H_Lcd_GoTo+0x8>
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
    35ca:	8b 83       	std	Y+3, r24	; 0x03
    35cc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8_arr [2] = {0x80,0xC0};
    35ce:	80 e8       	ldi	r24, 0x80	; 128
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	80 ec       	ldi	r24, 0xC0	; 192
    35d4:	8a 83       	std	Y+2, r24	; 0x02
	H_Lcd_WriteCommand(Local_u8_arr[Local_u8_Row] + Local_u8_Col);
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	28 2f       	mov	r18, r24
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	ce 01       	movw	r24, r28
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	fc 01       	movw	r30, r24
    35e2:	e2 0f       	add	r30, r18
    35e4:	f3 1f       	adc	r31, r19
    35e6:	90 81       	ld	r25, Z
    35e8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ea:	89 0f       	add	r24, r25
    35ec:	0e 94 81 17 	call	0x2f02	; 0x2f02 <H_Lcd_WriteCommand>
}
    35f0:	0f 90       	pop	r0
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	cf 91       	pop	r28
    35fa:	df 91       	pop	r29
    35fc:	08 95       	ret

000035fe <H_Lcd_ClockDisplay>:


void H_Lcd_ClockDisplay(u8 Local_u8_Hrs, u8 Local_u8_Min, u8 Local_u8_Sec)
{
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	61 97       	sbiw	r28, 0x11	; 17
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	8f 87       	std	Y+15, r24	; 0x0f
    3614:	68 8b       	std	Y+16, r22	; 0x10
    3616:	49 8b       	std	Y+17, r20	; 0x11
    3618:	c0 c0       	rjmp	.+384    	; 0x379a <H_Lcd_ClockDisplay+0x19c>
		{
			while(Local_u8_Min < 60)
			{
				while(Local_u8_Sec < 60)
				{
					H_Lcd_WriteCharacter(48 + (Local_u8_Hrs/10));
    361a:	8f 85       	ldd	r24, Y+15	; 0x0f
    361c:	9a e0       	ldi	r25, 0x0A	; 10
    361e:	69 2f       	mov	r22, r25
    3620:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    3624:	80 5d       	subi	r24, 0xD0	; 208
    3626:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(48 + (Local_u8_Hrs%10));
    362a:	8f 85       	ldd	r24, Y+15	; 0x0f
    362c:	9a e0       	ldi	r25, 0x0A	; 10
    362e:	69 2f       	mov	r22, r25
    3630:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    3634:	89 2f       	mov	r24, r25
    3636:	80 5d       	subi	r24, 0xD0	; 208
    3638:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(':');
    363c:	8a e3       	ldi	r24, 0x3A	; 58
    363e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(48 + (Local_u8_Min/10));
    3642:	88 89       	ldd	r24, Y+16	; 0x10
    3644:	9a e0       	ldi	r25, 0x0A	; 10
    3646:	69 2f       	mov	r22, r25
    3648:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    364c:	80 5d       	subi	r24, 0xD0	; 208
    364e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(48 + (Local_u8_Min%10));
    3652:	88 89       	ldd	r24, Y+16	; 0x10
    3654:	9a e0       	ldi	r25, 0x0A	; 10
    3656:	69 2f       	mov	r22, r25
    3658:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    365c:	89 2f       	mov	r24, r25
    365e:	80 5d       	subi	r24, 0xD0	; 208
    3660:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(':');
    3664:	8a e3       	ldi	r24, 0x3A	; 58
    3666:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(48 + (Local_u8_Sec/10));
    366a:	89 89       	ldd	r24, Y+17	; 0x11
    366c:	9a e0       	ldi	r25, 0x0A	; 10
    366e:	69 2f       	mov	r22, r25
    3670:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    3674:	80 5d       	subi	r24, 0xD0	; 208
    3676:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					H_Lcd_WriteCharacter(48 + (Local_u8_Sec%10));
    367a:	89 89       	ldd	r24, Y+17	; 0x11
    367c:	9a e0       	ldi	r25, 0x0A	; 10
    367e:	69 2f       	mov	r22, r25
    3680:	0e 94 fe 21 	call	0x43fc	; 0x43fc <__udivmodqi4>
    3684:	89 2f       	mov	r24, r25
    3686:	80 5d       	subi	r24, 0xD0	; 208
    3688:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
					Local_u8_Sec++;
    368c:	89 89       	ldd	r24, Y+17	; 0x11
    368e:	8f 5f       	subi	r24, 0xFF	; 255
    3690:	89 8b       	std	Y+17, r24	; 0x11
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	aa e7       	ldi	r26, 0x7A	; 122
    3698:	b4 e4       	ldi	r27, 0x44	; 68
    369a:	8b 87       	std	Y+11, r24	; 0x0b
    369c:	9c 87       	std	Y+12, r25	; 0x0c
    369e:	ad 87       	std	Y+13, r26	; 0x0d
    36a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	4a e7       	ldi	r20, 0x7A	; 122
    36b0:	55 e4       	ldi	r21, 0x45	; 69
    36b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	8f 83       	std	Y+7, r24	; 0x07
    36bc:	98 87       	std	Y+8, r25	; 0x08
    36be:	a9 87       	std	Y+9, r26	; 0x09
    36c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36c2:	6f 81       	ldd	r22, Y+7	; 0x07
    36c4:	78 85       	ldd	r23, Y+8	; 0x08
    36c6:	89 85       	ldd	r24, Y+9	; 0x09
    36c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e8       	ldi	r20, 0x80	; 128
    36d0:	5f e3       	ldi	r21, 0x3F	; 63
    36d2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	2c f4       	brge	.+10     	; 0x36e4 <H_Lcd_ClockDisplay+0xe6>
		__ticks = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	3f c0       	rjmp	.+126    	; 0x3762 <H_Lcd_ClockDisplay+0x164>
	else if (__tmp > 65535)
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	3f ef       	ldi	r19, 0xFF	; 255
    36f0:	4f e7       	ldi	r20, 0x7F	; 127
    36f2:	57 e4       	ldi	r21, 0x47	; 71
    36f4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    36f8:	18 16       	cp	r1, r24
    36fa:	4c f5       	brge	.+82     	; 0x374e <H_Lcd_ClockDisplay+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e2       	ldi	r20, 0x20	; 32
    370a:	51 e4       	ldi	r21, 0x41	; 65
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9e 83       	std	Y+6, r25	; 0x06
    3722:	8d 83       	std	Y+5, r24	; 0x05
    3724:	0f c0       	rjmp	.+30     	; 0x3744 <H_Lcd_ClockDisplay+0x146>
    3726:	80 e9       	ldi	r24, 0x90	; 144
    3728:	91 e0       	ldi	r25, 0x01	; 1
    372a:	9c 83       	std	Y+4, r25	; 0x04
    372c:	8b 83       	std	Y+3, r24	; 0x03
    372e:	8b 81       	ldd	r24, Y+3	; 0x03
    3730:	9c 81       	ldd	r25, Y+4	; 0x04
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <H_Lcd_ClockDisplay+0x134>
    3736:	9c 83       	std	Y+4, r25	; 0x04
    3738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373a:	8d 81       	ldd	r24, Y+5	; 0x05
    373c:	9e 81       	ldd	r25, Y+6	; 0x06
    373e:	01 97       	sbiw	r24, 0x01	; 1
    3740:	9e 83       	std	Y+6, r25	; 0x06
    3742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	69 f7       	brne	.-38     	; 0x3726 <H_Lcd_ClockDisplay+0x128>
    374c:	14 c0       	rjmp	.+40     	; 0x3776 <H_Lcd_ClockDisplay+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    374e:	6f 81       	ldd	r22, Y+7	; 0x07
    3750:	78 85       	ldd	r23, Y+8	; 0x08
    3752:	89 85       	ldd	r24, Y+9	; 0x09
    3754:	9a 85       	ldd	r25, Y+10	; 0x0a
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	8d 83       	std	Y+5, r24	; 0x05
    3762:	8d 81       	ldd	r24, Y+5	; 0x05
    3764:	9e 81       	ldd	r25, Y+6	; 0x06
    3766:	9a 83       	std	Y+2, r25	; 0x02
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	9a 81       	ldd	r25, Y+2	; 0x02
    376e:	01 97       	sbiw	r24, 0x01	; 1
    3770:	f1 f7       	brne	.-4      	; 0x376e <H_Lcd_ClockDisplay+0x170>
    3772:	9a 83       	std	Y+2, r25	; 0x02
    3774:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					H_Lcd_Clr();
    3776:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
	{
		while(Local_u8_Hrs < 24)
		{
			while(Local_u8_Min < 60)
			{
				while(Local_u8_Sec < 60)
    377a:	89 89       	ldd	r24, Y+17	; 0x11
    377c:	8c 33       	cpi	r24, 0x3C	; 60
    377e:	08 f4       	brcc	.+2      	; 0x3782 <H_Lcd_ClockDisplay+0x184>
    3780:	4c cf       	rjmp	.-360    	; 0x361a <H_Lcd_ClockDisplay+0x1c>
					H_Lcd_WriteCharacter(48 + (Local_u8_Sec%10));
					Local_u8_Sec++;
					_delay_ms(1000);
					H_Lcd_Clr();
				}
				Local_u8_Sec = 0;
    3782:	19 8a       	std	Y+17, r1	; 0x11
				Local_u8_Min++;
    3784:	88 89       	ldd	r24, Y+16	; 0x10
    3786:	8f 5f       	subi	r24, 0xFF	; 255
    3788:	88 8b       	std	Y+16, r24	; 0x10
{
	while(1)
	{
		while(Local_u8_Hrs < 24)
		{
			while(Local_u8_Min < 60)
    378a:	88 89       	ldd	r24, Y+16	; 0x10
    378c:	8c 33       	cpi	r24, 0x3C	; 60
    378e:	a8 f3       	brcs	.-22     	; 0x377a <H_Lcd_ClockDisplay+0x17c>
					H_Lcd_Clr();
				}
				Local_u8_Sec = 0;
				Local_u8_Min++;
			}
			Local_u8_Min = 0;
    3790:	18 8a       	std	Y+16, r1	; 0x10
			Local_u8_Sec = 0;
    3792:	19 8a       	std	Y+17, r1	; 0x11
			Local_u8_Hrs++;
    3794:	8f 85       	ldd	r24, Y+15	; 0x0f
    3796:	8f 5f       	subi	r24, 0xFF	; 255
    3798:	8f 87       	std	Y+15, r24	; 0x0f

void H_Lcd_ClockDisplay(u8 Local_u8_Hrs, u8 Local_u8_Min, u8 Local_u8_Sec)
{
	while(1)
	{
		while(Local_u8_Hrs < 24)
    379a:	8f 85       	ldd	r24, Y+15	; 0x0f
    379c:	88 31       	cpi	r24, 0x18	; 24
    379e:	a8 f3       	brcs	.-22     	; 0x378a <H_Lcd_ClockDisplay+0x18c>
			}
			Local_u8_Min = 0;
			Local_u8_Sec = 0;
			Local_u8_Hrs++;
		}
		Local_u8_Hrs = 0;
    37a0:	1f 86       	std	Y+15, r1	; 0x0f
		Local_u8_Min = 0;
    37a2:	18 8a       	std	Y+16, r1	; 0x10
		Local_u8_Sec = 0;
    37a4:	19 8a       	std	Y+17, r1	; 0x11
    37a6:	f9 cf       	rjmp	.-14     	; 0x379a <H_Lcd_ClockDisplay+0x19c>

000037a8 <H_Lcd_Shift>:
	}
}

void H_Lcd_Shift(u8*Local_u8_Ptr)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	62 97       	sbiw	r28, 0x12	; 18
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	9a 8b       	std	Y+18, r25	; 0x12
    37be:	89 8b       	std	Y+17, r24	; 0x11
	while(1)
	{
		u8 Local_u8_Counter_2 = 0;
    37c0:	18 8a       	std	Y+16, r1	; 0x10
    37c2:	87 c0       	rjmp	.+270    	; 0x38d2 <H_Lcd_Shift+0x12a>
		while(Local_u8_Counter_2 < 16)
		{
			u8 Local_u8_Counter_3 = 0;
    37c4:	1f 86       	std	Y+15, r1	; 0x0f
    37c6:	06 c0       	rjmp	.+12     	; 0x37d4 <H_Lcd_Shift+0x2c>
			while(Local_u8_Counter_3 < Local_u8_Counter_2)
			{
				H_Lcd_WriteCharacter(' ');
    37c8:	80 e2       	ldi	r24, 0x20	; 32
    37ca:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
				Local_u8_Counter_3++;
    37ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d0:	8f 5f       	subi	r24, 0xFF	; 255
    37d2:	8f 87       	std	Y+15, r24	; 0x0f
	{
		u8 Local_u8_Counter_2 = 0;
		while(Local_u8_Counter_2 < 16)
		{
			u8 Local_u8_Counter_3 = 0;
			while(Local_u8_Counter_3 < Local_u8_Counter_2)
    37d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    37d6:	88 89       	ldd	r24, Y+16	; 0x10
    37d8:	98 17       	cp	r25, r24
    37da:	b0 f3       	brcs	.-20     	; 0x37c8 <H_Lcd_Shift+0x20>
			{
				H_Lcd_WriteCharacter(' ');
				Local_u8_Counter_3++;
			}
			H_Lcd_WriteString(Local_u8_Ptr);
    37dc:	89 89       	ldd	r24, Y+17	; 0x11
    37de:	9a 89       	ldd	r25, Y+18	; 0x12
    37e0:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	a8 ec       	ldi	r26, 0xC8	; 200
    37ea:	b2 e4       	ldi	r27, 0x42	; 66
    37ec:	8b 87       	std	Y+11, r24	; 0x0b
    37ee:	9c 87       	std	Y+12, r25	; 0x0c
    37f0:	ad 87       	std	Y+13, r26	; 0x0d
    37f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	4a e7       	ldi	r20, 0x7A	; 122
    3802:	55 e4       	ldi	r21, 0x45	; 69
    3804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	8f 83       	std	Y+7, r24	; 0x07
    380e:	98 87       	std	Y+8, r25	; 0x08
    3810:	a9 87       	std	Y+9, r26	; 0x09
    3812:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3814:	6f 81       	ldd	r22, Y+7	; 0x07
    3816:	78 85       	ldd	r23, Y+8	; 0x08
    3818:	89 85       	ldd	r24, Y+9	; 0x09
    381a:	9a 85       	ldd	r25, Y+10	; 0x0a
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	40 e8       	ldi	r20, 0x80	; 128
    3822:	5f e3       	ldi	r21, 0x3F	; 63
    3824:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3828:	88 23       	and	r24, r24
    382a:	2c f4       	brge	.+10     	; 0x3836 <H_Lcd_Shift+0x8e>
		__ticks = 1;
    382c:	81 e0       	ldi	r24, 0x01	; 1
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	3f c0       	rjmp	.+126    	; 0x38b4 <H_Lcd_Shift+0x10c>
	else if (__tmp > 65535)
    3836:	6f 81       	ldd	r22, Y+7	; 0x07
    3838:	78 85       	ldd	r23, Y+8	; 0x08
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	9a 85       	ldd	r25, Y+10	; 0x0a
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	3f ef       	ldi	r19, 0xFF	; 255
    3842:	4f e7       	ldi	r20, 0x7F	; 127
    3844:	57 e4       	ldi	r21, 0x47	; 71
    3846:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    384a:	18 16       	cp	r1, r24
    384c:	4c f5       	brge	.+82     	; 0x38a0 <H_Lcd_Shift+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3850:	7c 85       	ldd	r23, Y+12	; 0x0c
    3852:	8d 85       	ldd	r24, Y+13	; 0x0d
    3854:	9e 85       	ldd	r25, Y+14	; 0x0e
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 e2       	ldi	r20, 0x20	; 32
    385c:	51 e4       	ldi	r21, 0x41	; 65
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	9e 83       	std	Y+6, r25	; 0x06
    3874:	8d 83       	std	Y+5, r24	; 0x05
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <H_Lcd_Shift+0xee>
    3878:	80 e9       	ldi	r24, 0x90	; 144
    387a:	91 e0       	ldi	r25, 0x01	; 1
    387c:	9c 83       	std	Y+4, r25	; 0x04
    387e:	8b 83       	std	Y+3, r24	; 0x03
    3880:	8b 81       	ldd	r24, Y+3	; 0x03
    3882:	9c 81       	ldd	r25, Y+4	; 0x04
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <H_Lcd_Shift+0xdc>
    3888:	9c 83       	std	Y+4, r25	; 0x04
    388a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388c:	8d 81       	ldd	r24, Y+5	; 0x05
    388e:	9e 81       	ldd	r25, Y+6	; 0x06
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	69 f7       	brne	.-38     	; 0x3878 <H_Lcd_Shift+0xd0>
    389e:	14 c0       	rjmp	.+40     	; 0x38c8 <H_Lcd_Shift+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a0:	6f 81       	ldd	r22, Y+7	; 0x07
    38a2:	78 85       	ldd	r23, Y+8	; 0x08
    38a4:	89 85       	ldd	r24, Y+9	; 0x09
    38a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9e 83       	std	Y+6, r25	; 0x06
    38b2:	8d 83       	std	Y+5, r24	; 0x05
    38b4:	8d 81       	ldd	r24, Y+5	; 0x05
    38b6:	9e 81       	ldd	r25, Y+6	; 0x06
    38b8:	9a 83       	std	Y+2, r25	; 0x02
    38ba:	89 83       	std	Y+1, r24	; 0x01
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	01 97       	sbiw	r24, 0x01	; 1
    38c2:	f1 f7       	brne	.-4      	; 0x38c0 <H_Lcd_Shift+0x118>
    38c4:	9a 83       	std	Y+2, r25	; 0x02
    38c6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			H_Lcd_Clr();
    38c8:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
			Local_u8_Counter_2++;
    38cc:	88 89       	ldd	r24, Y+16	; 0x10
    38ce:	8f 5f       	subi	r24, 0xFF	; 255
    38d0:	88 8b       	std	Y+16, r24	; 0x10
void H_Lcd_Shift(u8*Local_u8_Ptr)
{
	while(1)
	{
		u8 Local_u8_Counter_2 = 0;
		while(Local_u8_Counter_2 < 16)
    38d2:	88 89       	ldd	r24, Y+16	; 0x10
    38d4:	80 31       	cpi	r24, 0x10	; 16
    38d6:	08 f4       	brcc	.+2      	; 0x38da <H_Lcd_Shift+0x132>
    38d8:	75 cf       	rjmp	.-278    	; 0x37c4 <H_Lcd_Shift+0x1c>
    38da:	72 cf       	rjmp	.-284    	; 0x37c0 <H_Lcd_Shift+0x18>

000038dc <H_Keypad_Init>:


#include "Keypad.h"

void H_Keypad_Init(void)
{
    38dc:	df 93       	push	r29
    38de:	cf 93       	push	r28
    38e0:	cd b7       	in	r28, 0x3d	; 61
    38e2:	de b7       	in	r29, 0x3e	; 62
	M_Dio_PinMode(KEYPAD_R0, OUTPUT);
    38e4:	88 e1       	ldi	r24, 0x18	; 24
    38e6:	61 e0       	ldi	r22, 0x01	; 1
    38e8:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1, OUTPUT);
    38ec:	89 e1       	ldi	r24, 0x19	; 25
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2, OUTPUT);
    38f4:	8a e1       	ldi	r24, 0x1A	; 26
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3, OUTPUT);
    38fc:	8b e1       	ldi	r24, 0x1B	; 27
    38fe:	61 e0       	ldi	r22, 0x01	; 1
    3900:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>

	M_Dio_PinMode(KEYPAD_C0, INPUT);
    3904:	8b e2       	ldi	r24, 0x2B	; 43
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1, INPUT);
    390c:	8c e2       	ldi	r24, 0x2C	; 44
    390e:	60 e0       	ldi	r22, 0x00	; 0
    3910:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2, INPUT);
    3914:	8d e2       	ldi	r24, 0x2D	; 45
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	//M_Dio_PinMode(KEYPAD_C3, INPUT);


	// enable the pullup resistors
	M_Dio_PinWrite(KEYPAD_C0, HIGH);
    391c:	8b e2       	ldi	r24, 0x2B	; 43
    391e:	61 e0       	ldi	r22, 0x01	; 1
    3920:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_C1, HIGH);
    3924:	8c e2       	ldi	r24, 0x2C	; 44
    3926:	61 e0       	ldi	r22, 0x01	; 1
    3928:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_C2, HIGH);
    392c:	8d e2       	ldi	r24, 0x2D	; 45
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	//M_Dio_PinWrite(KEYPAD_C3, HIGH);

	M_Dio_PinWrite(KEYPAD_R0, HIGH);
    3934:	88 e1       	ldi	r24, 0x18	; 24
    3936:	61 e0       	ldi	r22, 0x01	; 1
    3938:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1, HIGH);
    393c:	89 e1       	ldi	r24, 0x19	; 25
    393e:	61 e0       	ldi	r22, 0x01	; 1
    3940:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2, HIGH);
    3944:	8a e1       	ldi	r24, 0x1A	; 26
    3946:	61 e0       	ldi	r22, 0x01	; 1
    3948:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3, HIGH);
    394c:	8b e1       	ldi	r24, 0x1B	; 27
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
}
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	08 95       	ret

0000395a <H_Keypad_Read>:

u8 H_Keypad_Read(void)
{
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	a7 97       	sbiw	r28, 0x27	; 39
    3964:	0f b6       	in	r0, 0x3f	; 63
    3966:	f8 94       	cli
    3968:	de bf       	out	0x3e, r29	; 62
    396a:	0f be       	out	0x3f, r0	; 63
    396c:	cd bf       	out	0x3d, r28	; 61
	#if KEYPAD_MODEL        ==  MODEL_1
	u8 Local_u8_KeypadArr [4][4] = {{'1', '2', '3', 'A'},
									{'4', '5', '6', 'B'},
									{'7', '8', '9', 'C'},
									{'*', '0', '#', 'D'}};
    396e:	ce 01       	movw	r24, r28
    3970:	42 96       	adiw	r24, 0x12	; 18
    3972:	9c a3       	std	Y+36, r25	; 0x24
    3974:	8b a3       	std	Y+35, r24	; 0x23
    3976:	ec ee       	ldi	r30, 0xEC	; 236
    3978:	f1 e0       	ldi	r31, 0x01	; 1
    397a:	fe a3       	std	Y+38, r31	; 0x26
    397c:	ed a3       	std	Y+37, r30	; 0x25
    397e:	f0 e1       	ldi	r31, 0x10	; 16
    3980:	ff a3       	std	Y+39, r31	; 0x27
    3982:	ed a1       	ldd	r30, Y+37	; 0x25
    3984:	fe a1       	ldd	r31, Y+38	; 0x26
    3986:	00 80       	ld	r0, Z
    3988:	8d a1       	ldd	r24, Y+37	; 0x25
    398a:	9e a1       	ldd	r25, Y+38	; 0x26
    398c:	01 96       	adiw	r24, 0x01	; 1
    398e:	9e a3       	std	Y+38, r25	; 0x26
    3990:	8d a3       	std	Y+37, r24	; 0x25
    3992:	eb a1       	ldd	r30, Y+35	; 0x23
    3994:	fc a1       	ldd	r31, Y+36	; 0x24
    3996:	00 82       	st	Z, r0
    3998:	8b a1       	ldd	r24, Y+35	; 0x23
    399a:	9c a1       	ldd	r25, Y+36	; 0x24
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	9c a3       	std	Y+36, r25	; 0x24
    39a0:	8b a3       	std	Y+35, r24	; 0x23
    39a2:	9f a1       	ldd	r25, Y+39	; 0x27
    39a4:	91 50       	subi	r25, 0x01	; 1
    39a6:	9f a3       	std	Y+39, r25	; 0x27
    39a8:	ef a1       	ldd	r30, Y+39	; 0x27
    39aa:	ee 23       	and	r30, r30
    39ac:	51 f7       	brne	.-44     	; 0x3982 <H_Keypad_Read+0x28>
									{'4', '5', '6', '-'},
									{'7', '8', '9', '*'},
									{'C', '0', '=', '/'}};
	#endif
	///////
	u8 Local_u8_Reading = 1;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_u8_Col = 0;
    39b2:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8_Row = 0;
    39b4:	1f 86       	std	Y+15, r1	; 0x0f

	for(Local_u8_Row = KEYPAD_R0; Local_u8_Row <= KEYPAD_R3; Local_u8_Row++)
    39b6:	88 e1       	ldi	r24, 0x18	; 24
    39b8:	8f 87       	std	Y+15, r24	; 0x0f
    39ba:	b4 c0       	rjmp	.+360    	; 0x3b24 <H_Keypad_Read+0x1ca>
	{
		M_Dio_PinWrite(Local_u8_Row, LOW);
    39bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
		for(Local_u8_Col = KEYPAD_C0; Local_u8_Col <= KEYPAD_C2; Local_u8_Col++)
    39c4:	8b e2       	ldi	r24, 0x2B	; 43
    39c6:	88 8b       	std	Y+16, r24	; 0x10
    39c8:	a2 c0       	rjmp	.+324    	; 0x3b0e <H_Keypad_Read+0x1b4>
		{
			Local_u8_Reading = M_Dio_PinRead(Local_u8_Col);
    39ca:	88 89       	ldd	r24, Y+16	; 0x10
    39cc:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    39d0:	89 8b       	std	Y+17, r24	; 0x11
			if(Local_u8_Reading == 0)
    39d2:	89 89       	ldd	r24, Y+17	; 0x11
    39d4:	88 23       	and	r24, r24
    39d6:	09 f0       	breq	.+2      	; 0x39da <H_Keypad_Read+0x80>
    39d8:	97 c0       	rjmp	.+302    	; 0x3b08 <H_Keypad_Read+0x1ae>
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	a0 ef       	ldi	r26, 0xF0	; 240
    39e0:	b2 e4       	ldi	r27, 0x42	; 66
    39e2:	8b 87       	std	Y+11, r24	; 0x0b
    39e4:	9c 87       	std	Y+12, r25	; 0x0c
    39e6:	ad 87       	std	Y+13, r26	; 0x0d
    39e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    39f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	4a e7       	ldi	r20, 0x7A	; 122
    39f8:	55 e4       	ldi	r21, 0x45	; 69
    39fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fe:	dc 01       	movw	r26, r24
    3a00:	cb 01       	movw	r24, r22
    3a02:	8f 83       	std	Y+7, r24	; 0x07
    3a04:	98 87       	std	Y+8, r25	; 0x08
    3a06:	a9 87       	std	Y+9, r26	; 0x09
    3a08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0c:	78 85       	ldd	r23, Y+8	; 0x08
    3a0e:	89 85       	ldd	r24, Y+9	; 0x09
    3a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e8       	ldi	r20, 0x80	; 128
    3a18:	5f e3       	ldi	r21, 0x3F	; 63
    3a1a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3a1e:	88 23       	and	r24, r24
    3a20:	2c f4       	brge	.+10     	; 0x3a2c <H_Keypad_Read+0xd2>
		__ticks = 1;
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	3f c0       	rjmp	.+126    	; 0x3aaa <H_Keypad_Read+0x150>
	else if (__tmp > 65535)
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	20 e0       	ldi	r18, 0x00	; 0
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	4f e7       	ldi	r20, 0x7F	; 127
    3a3a:	57 e4       	ldi	r21, 0x47	; 71
    3a3c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3a40:	18 16       	cp	r1, r24
    3a42:	4c f5       	brge	.+82     	; 0x3a96 <H_Keypad_Read+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a46:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	40 e2       	ldi	r20, 0x20	; 32
    3a52:	51 e4       	ldi	r21, 0x41	; 65
    3a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	bc 01       	movw	r22, r24
    3a5e:	cd 01       	movw	r24, r26
    3a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	9e 83       	std	Y+6, r25	; 0x06
    3a6a:	8d 83       	std	Y+5, r24	; 0x05
    3a6c:	0f c0       	rjmp	.+30     	; 0x3a8c <H_Keypad_Read+0x132>
    3a6e:	80 e9       	ldi	r24, 0x90	; 144
    3a70:	91 e0       	ldi	r25, 0x01	; 1
    3a72:	9c 83       	std	Y+4, r25	; 0x04
    3a74:	8b 83       	std	Y+3, r24	; 0x03
    3a76:	8b 81       	ldd	r24, Y+3	; 0x03
    3a78:	9c 81       	ldd	r25, Y+4	; 0x04
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	f1 f7       	brne	.-4      	; 0x3a7a <H_Keypad_Read+0x120>
    3a7e:	9c 83       	std	Y+4, r25	; 0x04
    3a80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	9e 83       	std	Y+6, r25	; 0x06
    3a8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	69 f7       	brne	.-38     	; 0x3a6e <H_Keypad_Read+0x114>
    3a94:	14 c0       	rjmp	.+40     	; 0x3abe <H_Keypad_Read+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a96:	6f 81       	ldd	r22, Y+7	; 0x07
    3a98:	78 85       	ldd	r23, Y+8	; 0x08
    3a9a:	89 85       	ldd	r24, Y+9	; 0x09
    3a9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa2:	dc 01       	movw	r26, r24
    3aa4:	cb 01       	movw	r24, r22
    3aa6:	9e 83       	std	Y+6, r25	; 0x06
    3aa8:	8d 83       	std	Y+5, r24	; 0x05
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	9a 83       	std	Y+2, r25	; 0x02
    3ab0:	89 83       	std	Y+1, r24	; 0x01
    3ab2:	89 81       	ldd	r24, Y+1	; 0x01
    3ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <H_Keypad_Read+0x15c>
    3aba:	9a 83       	std	Y+2, r25	; 0x02
    3abc:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(DEBOUNCING_TIME);
				if(M_Dio_PinRead(Local_u8_Col) == 0)
    3abe:	88 89       	ldd	r24, Y+16	; 0x10
    3ac0:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    3ac4:	88 23       	and	r24, r24
    3ac6:	01 f5       	brne	.+64     	; 0x3b08 <H_Keypad_Read+0x1ae>
				{
					while(M_Dio_PinRead(Local_u8_Col) == 0);
    3ac8:	88 89       	ldd	r24, Y+16	; 0x10
    3aca:	0e 94 03 0c 	call	0x1806	; 0x1806 <M_Dio_PinRead>
    3ace:	88 23       	and	r24, r24
    3ad0:	d9 f3       	breq	.-10     	; 0x3ac8 <H_Keypad_Read+0x16e>
					return Local_u8_KeypadArr[Local_u8_Row - KEYPAD_R0][Local_u8_Col - KEYPAD_C0];
    3ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad4:	88 2f       	mov	r24, r24
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	9c 01       	movw	r18, r24
    3ada:	28 51       	subi	r18, 0x18	; 24
    3adc:	30 40       	sbci	r19, 0x00	; 0
    3ade:	88 89       	ldd	r24, Y+16	; 0x10
    3ae0:	88 2f       	mov	r24, r24
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	ac 01       	movw	r20, r24
    3ae6:	4b 52       	subi	r20, 0x2B	; 43
    3ae8:	50 40       	sbci	r21, 0x00	; 0
    3aea:	22 0f       	add	r18, r18
    3aec:	33 1f       	adc	r19, r19
    3aee:	22 0f       	add	r18, r18
    3af0:	33 1f       	adc	r19, r19
    3af2:	ce 01       	movw	r24, r28
    3af4:	01 96       	adiw	r24, 0x01	; 1
    3af6:	82 0f       	add	r24, r18
    3af8:	93 1f       	adc	r25, r19
    3afa:	84 0f       	add	r24, r20
    3afc:	95 1f       	adc	r25, r21
    3afe:	fc 01       	movw	r30, r24
    3b00:	71 96       	adiw	r30, 0x11	; 17
    3b02:	80 81       	ld	r24, Z
    3b04:	8a a3       	std	Y+34, r24	; 0x22
    3b06:	13 c0       	rjmp	.+38     	; 0x3b2e <H_Keypad_Read+0x1d4>
	u8 Local_u8_Row = 0;

	for(Local_u8_Row = KEYPAD_R0; Local_u8_Row <= KEYPAD_R3; Local_u8_Row++)
	{
		M_Dio_PinWrite(Local_u8_Row, LOW);
		for(Local_u8_Col = KEYPAD_C0; Local_u8_Col <= KEYPAD_C2; Local_u8_Col++)
    3b08:	88 89       	ldd	r24, Y+16	; 0x10
    3b0a:	8f 5f       	subi	r24, 0xFF	; 255
    3b0c:	88 8b       	std	Y+16, r24	; 0x10
    3b0e:	88 89       	ldd	r24, Y+16	; 0x10
    3b10:	8e 32       	cpi	r24, 0x2E	; 46
    3b12:	08 f4       	brcc	.+2      	; 0x3b16 <H_Keypad_Read+0x1bc>
    3b14:	5a cf       	rjmp	.-332    	; 0x39ca <H_Keypad_Read+0x70>
					while(M_Dio_PinRead(Local_u8_Col) == 0);
					return Local_u8_KeypadArr[Local_u8_Row - KEYPAD_R0][Local_u8_Col - KEYPAD_C0];
				}
			}
		}
		M_Dio_PinWrite(Local_u8_Row, HIGH);
    3b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	///////
	u8 Local_u8_Reading = 1;
	u8 Local_u8_Col = 0;
	u8 Local_u8_Row = 0;

	for(Local_u8_Row = KEYPAD_R0; Local_u8_Row <= KEYPAD_R3; Local_u8_Row++)
    3b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	8f 87       	std	Y+15, r24	; 0x0f
    3b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b26:	8c 31       	cpi	r24, 0x1C	; 28
    3b28:	08 f4       	brcc	.+2      	; 0x3b2c <H_Keypad_Read+0x1d2>
    3b2a:	48 cf       	rjmp	.-368    	; 0x39bc <H_Keypad_Read+0x62>
				}
			}
		}
		M_Dio_PinWrite(Local_u8_Row, HIGH);
	}
	return 0;
    3b2c:	1a a2       	std	Y+34, r1	; 0x22
    3b2e:	8a a1       	ldd	r24, Y+34	; 0x22
}
    3b30:	a7 96       	adiw	r28, 0x27	; 39
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	08 95       	ret

00003b42 <H_DcMotorInit>:
 *      Author: Eng hadeer
 */

#include "DcMotor.h"
void H_DcMotorInit(void)
{
    3b42:	df 93       	push	r29
    3b44:	cf 93       	push	r28
    3b46:	cd b7       	in	r28, 0x3d	; 61
    3b48:	de b7       	in	r29, 0x3e	; 62
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
    3b4a:	85 e1       	ldi	r24, 0x15	; 21
    3b4c:	61 e0       	ldi	r22, 0x01	; 1
    3b4e:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_2,OUTPUT);
    3b52:	86 e1       	ldi	r24, 0x16	; 22
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
}
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <H_DcMotorDirection1>:

void H_DcMotorDirection1(void)
{
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	cd b7       	in	r28, 0x3d	; 61
    3b66:	de b7       	in	r29, 0x3e	; 62
	M_Dio_PinWrite(DC_MOTOR_PIN_1,HIGH);
    3b68:	85 e1       	ldi	r24, 0x15	; 21
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_2,LOW);
    3b70:	86 e1       	ldi	r24, 0x16	; 22
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
}
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <H_DcMotorDirection2>:

void H_DcMotorDirection2(void)
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);
    3b86:	85 e1       	ldi	r24, 0x15	; 21
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_2,HIGH);
    3b8e:	86 e1       	ldi	r24, 0x16	; 22
    3b90:	61 e0       	ldi	r22, 0x01	; 1
    3b92:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
}
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	08 95       	ret

00003b9c <H_DcMotorStop>:

void H_DcMotorStop(void)
{
    3b9c:	df 93       	push	r29
    3b9e:	cf 93       	push	r28
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);
    3ba4:	85 e1       	ldi	r24, 0x15	; 21
    3ba6:	60 e0       	ldi	r22, 0x00	; 0
    3ba8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_2,LOW);
    3bac:	86 e1       	ldi	r24, 0x16	; 22
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <M_Dio_PinWrite>
}
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	08 95       	ret

00003bba <H_DcMotorSpeed>:

void H_DcMotorSpeed(u8 Local_MotorSpeed)
{
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	0f 92       	push	r0
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_PinMode(DC_MOTOR_EN_PIN, OUTPUT);
    3bc6:	87 e1       	ldi	r24, 0x17	; 23
    3bc8:	61 e0       	ldi	r22, 0x01	; 1
    3bca:	0e 94 4b 09 	call	0x1296	; 0x1296 <M_Dio_PinMode>
	M_Timer0_voidTimerStart();
    3bce:	0e 94 b7 06 	call	0xd6e	; 0xd6e <M_Timer0_voidTimerStart>
	M_Timer0_voidSetPhasePWM(Local_MotorSpeed);
    3bd2:	89 81       	ldd	r24, Y+1	; 0x01
    3bd4:	0e 94 85 07 	call	0xf0a	; 0xf0a <M_Timer0_voidSetPhasePWM>
}
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <A_AppInit>:
 */
#include "App.h"

// Initiating all peripherals
void A_AppInit(void)
{
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
	H_DcMotorInit();
    3be8:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <H_DcMotorInit>
	H_Lcd_Init();
    3bec:	0e 94 c3 14 	call	0x2986	; 0x2986 <H_Lcd_Init>
	H_Led_Init(RED_LED);
    3bf0:	83 e0       	ldi	r24, 0x03	; 3
    3bf2:	0e 94 da 10 	call	0x21b4	; 0x21b4 <H_Led_Init>
	H_Led_Init(GRN_LED);
    3bf6:	82 e0       	ldi	r24, 0x02	; 2
    3bf8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <H_Led_Init>
	H_Led_Init(BLU_LED);
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	0e 94 da 10 	call	0x21b4	; 0x21b4 <H_Led_Init>
	H_Keypad_Init();
    3c02:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <H_Keypad_Init>
	H_TempSensor_Init();
    3c06:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <H_TempSensor_Init>
	M_Timer0_voidInit();
    3c0a:	0e 94 80 06 	call	0xd00	; 0xd00 <M_Timer0_voidInit>
	M_ExtInt_Init();
    3c0e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <M_ExtInt_Init>
}
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <A_LoginPassword>:

// Get password from user and log in if correct or wrong
void A_LoginPassword(void)
{
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	27 97       	sbiw	r28, 0x07	; 7
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8_UserInput[PASSWORD_LENGTH] = {0};
    3c30:	1c 82       	std	Y+4, r1	; 0x04
    3c32:	1d 82       	std	Y+5, r1	; 0x05
    3c34:	1e 82       	std	Y+6, r1	; 0x06
    3c36:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_u8_PasswordCount = 0;
    3c38:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8_counter = 0;
    3c3a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8_PasswordFlag = 0;
    3c3c:	19 82       	std	Y+1, r1	; 0x01
    3c3e:	6d c0       	rjmp	.+218    	; 0x3d1a <A_LoginPassword+0x102>
	// Repeat enter password while RightPasswordFlag = 0
	while(Local_u8_PasswordFlag != 1)
	{
		H_Lcd_Clr();
    3c40:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
		H_Lcd_WriteString(" Enter Password ");
    3c44:	80 e6       	ldi	r24, 0x60	; 96
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
		H_Lcd_WriteString("      ----      ");
    3c54:	81 e7       	ldi	r24, 0x71	; 113
    3c56:	90 e0       	ldi	r25, 0x00	; 0
    3c58:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
		H_Lcd_GoTo(1,6);
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	66 e0       	ldi	r22, 0x06	; 6
    3c60:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>

		// Get 4 user inputs && store in User Input array
		for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3c64:	1a 82       	std	Y+2, r1	; 0x02
    3c66:	1d c0       	rjmp	.+58     	; 0x3ca2 <A_LoginPassword+0x8a>
		{
			while(Local_u8_UserInput[Local_u8_counter] == 0)
			{
				Local_u8_UserInput[Local_u8_counter] = H_Keypad_Read();
    3c68:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6a:	08 2f       	mov	r16, r24
    3c6c:	10 e0       	ldi	r17, 0x00	; 0
    3c6e:	0e 94 ad 1c 	call	0x395a	; 0x395a <H_Keypad_Read>
    3c72:	28 2f       	mov	r18, r24
    3c74:	ce 01       	movw	r24, r28
    3c76:	04 96       	adiw	r24, 0x04	; 4
    3c78:	fc 01       	movw	r30, r24
    3c7a:	e0 0f       	add	r30, r16
    3c7c:	f1 1f       	adc	r31, r17
    3c7e:	20 83       	st	Z, r18
		H_Lcd_GoTo(1,6);

		// Get 4 user inputs && store in User Input array
		for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
		{
			while(Local_u8_UserInput[Local_u8_counter] == 0)
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	28 2f       	mov	r18, r24
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	ce 01       	movw	r24, r28
    3c88:	04 96       	adiw	r24, 0x04	; 4
    3c8a:	fc 01       	movw	r30, r24
    3c8c:	e2 0f       	add	r30, r18
    3c8e:	f3 1f       	adc	r31, r19
    3c90:	80 81       	ld	r24, Z
    3c92:	88 23       	and	r24, r24
    3c94:	49 f3       	breq	.-46     	; 0x3c68 <A_LoginPassword+0x50>
			{
				Local_u8_UserInput[Local_u8_counter] = H_Keypad_Read();
			}

			H_Lcd_WriteCharacter('*'); // Display '*' for every user input
    3c96:	8a e2       	ldi	r24, 0x2A	; 42
    3c98:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
		H_Lcd_GoTo(1,0);
		H_Lcd_WriteString("      ----      ");
		H_Lcd_GoTo(1,6);

		// Get 4 user inputs && store in User Input array
		for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ca0:	8a 83       	std	Y+2, r24	; 0x02
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	84 30       	cpi	r24, 0x04	; 4
    3ca6:	60 f3       	brcs	.-40     	; 0x3c80 <A_LoginPassword+0x68>

			H_Lcd_WriteCharacter('*'); // Display '*' for every user input
		}

		// set password flag to 1 to if user input == the password system
		Local_u8_PasswordFlag = A_CheckPassword(Local_u8_UserInput);
    3ca8:	ce 01       	movw	r24, r28
    3caa:	04 96       	adiw	r24, 0x04	; 4
    3cac:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <A_CheckPassword>
    3cb0:	89 83       	std	Y+1, r24	; 0x01

		// choose Correct or wrong password check
		if(Local_u8_PasswordFlag == 1)
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	81 30       	cpi	r24, 0x01	; 1
    3cb6:	a1 f4       	brne	.+40     	; 0x3ce0 <A_LoginPassword+0xc8>
		{
			A_CorrectPassword(); // display true password message
    3cb8:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <A_CorrectPassword>
			// set user input array to 0
			for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3cbc:	1a 82       	std	Y+2, r1	; 0x02
    3cbe:	0c c0       	rjmp	.+24     	; 0x3cd8 <A_LoginPassword+0xc0>
			{
				Local_u8_UserInput[Local_u8_counter] = 0;
    3cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc2:	28 2f       	mov	r18, r24
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	04 96       	adiw	r24, 0x04	; 4
    3cca:	fc 01       	movw	r30, r24
    3ccc:	e2 0f       	add	r30, r18
    3cce:	f3 1f       	adc	r31, r19
    3cd0:	10 82       	st	Z, r1
		// choose Correct or wrong password check
		if(Local_u8_PasswordFlag == 1)
		{
			A_CorrectPassword(); // display true password message
			// set user input array to 0
			for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	8f 5f       	subi	r24, 0xFF	; 255
    3cd6:	8a 83       	std	Y+2, r24	; 0x02
    3cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cda:	84 30       	cpi	r24, 0x04	; 4
    3cdc:	88 f3       	brcs	.-30     	; 0x3cc0 <A_LoginPassword+0xa8>
    3cde:	1d c0       	rjmp	.+58     	; 0x3d1a <A_LoginPassword+0x102>
			}
		}

		else
		{
			A_WrongPassword(); // display wrong password message
    3ce0:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <A_WrongPassword>
			// set user input array to 0
			for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3ce4:	1a 82       	std	Y+2, r1	; 0x02
    3ce6:	0c c0       	rjmp	.+24     	; 0x3d00 <A_LoginPassword+0xe8>
			{
				Local_u8_UserInput[Local_u8_counter] = 0;
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	28 2f       	mov	r18, r24
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	ce 01       	movw	r24, r28
    3cf0:	04 96       	adiw	r24, 0x04	; 4
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	e2 0f       	add	r30, r18
    3cf6:	f3 1f       	adc	r31, r19
    3cf8:	10 82       	st	Z, r1

		else
		{
			A_WrongPassword(); // display wrong password message
			// set user input array to 0
			for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfc:	8f 5f       	subi	r24, 0xFF	; 255
    3cfe:	8a 83       	std	Y+2, r24	; 0x02
    3d00:	8a 81       	ldd	r24, Y+2	; 0x02
    3d02:	84 30       	cpi	r24, 0x04	; 4
    3d04:	88 f3       	brcs	.-30     	; 0x3ce8 <A_LoginPassword+0xd0>
			{
				Local_u8_UserInput[Local_u8_counter] = 0;
			}
			Local_u8_PasswordCount++; // increment wrong Password Count
    3d06:	8b 81       	ldd	r24, Y+3	; 0x03
    3d08:	8f 5f       	subi	r24, 0xFF	; 255
    3d0a:	8b 83       	std	Y+3, r24	; 0x03
			 // check if wrong Password Count try 3 times
			if(Local_u8_PasswordCount >= 3)
    3d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0e:	83 30       	cpi	r24, 0x03	; 3
    3d10:	20 f0       	brcs	.+8      	; 0x3d1a <A_LoginPassword+0x102>
			{
				A_LockCount(SYSTEM_LOCK_TIME); // lock the system for 2 MINS
    3d12:	82 e0       	ldi	r24, 0x02	; 2
    3d14:	0e 94 00 20 	call	0x4000	; 0x4000 <A_LockCount>
				Local_u8_PasswordCount = 0; // Reset wrong PasswordCount back to 0
    3d18:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8_UserInput[PASSWORD_LENGTH] = {0};
	u8 Local_u8_PasswordCount = 0;
	u8 Local_u8_counter = 0;
	u8 Local_u8_PasswordFlag = 0;
	// Repeat enter password while RightPasswordFlag = 0
	while(Local_u8_PasswordFlag != 1)
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	81 30       	cpi	r24, 0x01	; 1
    3d1e:	09 f0       	breq	.+2      	; 0x3d22 <A_LoginPassword+0x10a>
    3d20:	8f cf       	rjmp	.-226    	; 0x3c40 <A_LoginPassword+0x28>
				A_LockCount(SYSTEM_LOCK_TIME); // lock the system for 2 MINS
				Local_u8_PasswordCount = 0; // Reset wrong PasswordCount back to 0
			}
		}
	}
	Local_u8_PasswordFlag = 0; //set password flag to 0 for next time login again
    3d22:	19 82       	std	Y+1, r1	; 0x01
}
    3d24:	27 96       	adiw	r28, 0x07	; 7
    3d26:	0f b6       	in	r0, 0x3f	; 63
    3d28:	f8 94       	cli
    3d2a:	de bf       	out	0x3e, r29	; 62
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	cd bf       	out	0x3d, r28	; 61
    3d30:	cf 91       	pop	r28
    3d32:	df 91       	pop	r29
    3d34:	1f 91       	pop	r17
    3d36:	0f 91       	pop	r16
    3d38:	08 95       	ret

00003d3a <A_CheckPassword>:

// check  enter password == system password
u8 A_CheckPassword(u8* Local_u8_UserInput)
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	28 97       	sbiw	r28, 0x08	; 8
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	9f 83       	std	Y+7, r25	; 0x07
    3d50:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8_Password[] = {'1','2','3','4'}; // system password
    3d52:	81 e3       	ldi	r24, 0x31	; 49
    3d54:	8a 83       	std	Y+2, r24	; 0x02
    3d56:	82 e3       	ldi	r24, 0x32	; 50
    3d58:	8b 83       	std	Y+3, r24	; 0x03
    3d5a:	83 e3       	ldi	r24, 0x33	; 51
    3d5c:	8c 83       	std	Y+4, r24	; 0x04
    3d5e:	84 e3       	ldi	r24, 0x34	; 52
    3d60:	8d 83       	std	Y+5, r24	; 0x05
	u8 Local_u8_counter = 0;
    3d62:	19 82       	std	Y+1, r1	; 0x01
	// in case of wrong password return 0  and 1 in case of right password
	for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3d64:	19 82       	std	Y+1, r1	; 0x01
    3d66:	19 c0       	rjmp	.+50     	; 0x3d9a <A_CheckPassword+0x60>
	{
		if(Local_u8_UserInput[Local_u8_counter] == Local_u8_Password[Local_u8_counter])
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	28 2f       	mov	r18, r24
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d70:	9f 81       	ldd	r25, Y+7	; 0x07
    3d72:	fc 01       	movw	r30, r24
    3d74:	e2 0f       	add	r30, r18
    3d76:	f3 1f       	adc	r31, r19
    3d78:	40 81       	ld	r20, Z
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	28 2f       	mov	r18, r24
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	ce 01       	movw	r24, r28
    3d82:	02 96       	adiw	r24, 0x02	; 2
    3d84:	fc 01       	movw	r30, r24
    3d86:	e2 0f       	add	r30, r18
    3d88:	f3 1f       	adc	r31, r19
    3d8a:	80 81       	ld	r24, Z
    3d8c:	48 17       	cp	r20, r24
    3d8e:	11 f0       	breq	.+4      	; 0x3d94 <A_CheckPassword+0x5a>
		{
			// Do Nothing
		}
		else
		{// wrong
			return 0;
    3d90:	18 86       	std	Y+8, r1	; 0x08
    3d92:	08 c0       	rjmp	.+16     	; 0x3da4 <A_CheckPassword+0x6a>
u8 A_CheckPassword(u8* Local_u8_UserInput)
{
	u8 Local_u8_Password[] = {'1','2','3','4'}; // system password
	u8 Local_u8_counter = 0;
	// in case of wrong password return 0  and 1 in case of right password
	for(Local_u8_counter = 0; Local_u8_counter < PASSWORD_LENGTH; Local_u8_counter++)
    3d94:	89 81       	ldd	r24, Y+1	; 0x01
    3d96:	8f 5f       	subi	r24, 0xFF	; 255
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	84 30       	cpi	r24, 0x04	; 4
    3d9e:	20 f3       	brcs	.-56     	; 0x3d68 <A_CheckPassword+0x2e>
		else
		{// wrong
			return 0;
		}
	}
	return 1;
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	88 87       	std	Y+8, r24	; 0x08
    3da4:	88 85       	ldd	r24, Y+8	; 0x08
}
    3da6:	28 96       	adiw	r28, 0x08	; 8
    3da8:	0f b6       	in	r0, 0x3f	; 63
    3daa:	f8 94       	cli
    3dac:	de bf       	out	0x3e, r29	; 62
    3dae:	0f be       	out	0x3f, r0	; 63
    3db0:	cd bf       	out	0x3d, r28	; 61
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <A_CorrectPassword>:

// right password message
void A_CorrectPassword(void)
{
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	cd b7       	in	r28, 0x3d	; 61
    3dbe:	de b7       	in	r29, 0x3e	; 62
    3dc0:	2e 97       	sbiw	r28, 0x0e	; 14
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	f8 94       	cli
    3dc6:	de bf       	out	0x3e, r29	; 62
    3dc8:	0f be       	out	0x3f, r0	; 63
    3dca:	cd bf       	out	0x3d, r28	; 61
	H_Led_BlinkTwice(GRN_LED);
    3dcc:	82 e0       	ldi	r24, 0x02	; 2
    3dce:	0e 94 2e 13 	call	0x265c	; 0x265c <H_Led_BlinkTwice>
	H_Lcd_Clr();
    3dd2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
	H_Lcd_WriteString(" Welcome To Home");
    3dd6:	82 e8       	ldi	r24, 0x82	; 130
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	aa e7       	ldi	r26, 0x7A	; 122
    3de4:	b4 e4       	ldi	r27, 0x44	; 68
    3de6:	8b 87       	std	Y+11, r24	; 0x0b
    3de8:	9c 87       	std	Y+12, r25	; 0x0c
    3dea:	ad 87       	std	Y+13, r26	; 0x0d
    3dec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3df0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3df2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	4a e7       	ldi	r20, 0x7A	; 122
    3dfc:	55 e4       	ldi	r21, 0x45	; 69
    3dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	8f 83       	std	Y+7, r24	; 0x07
    3e08:	98 87       	std	Y+8, r25	; 0x08
    3e0a:	a9 87       	std	Y+9, r26	; 0x09
    3e0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e0e:	6f 81       	ldd	r22, Y+7	; 0x07
    3e10:	78 85       	ldd	r23, Y+8	; 0x08
    3e12:	89 85       	ldd	r24, Y+9	; 0x09
    3e14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e16:	20 e0       	ldi	r18, 0x00	; 0
    3e18:	30 e0       	ldi	r19, 0x00	; 0
    3e1a:	40 e8       	ldi	r20, 0x80	; 128
    3e1c:	5f e3       	ldi	r21, 0x3F	; 63
    3e1e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3e22:	88 23       	and	r24, r24
    3e24:	2c f4       	brge	.+10     	; 0x3e30 <A_CorrectPassword+0x78>
		__ticks = 1;
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	9e 83       	std	Y+6, r25	; 0x06
    3e2c:	8d 83       	std	Y+5, r24	; 0x05
    3e2e:	3f c0       	rjmp	.+126    	; 0x3eae <A_CorrectPassword+0xf6>
	else if (__tmp > 65535)
    3e30:	6f 81       	ldd	r22, Y+7	; 0x07
    3e32:	78 85       	ldd	r23, Y+8	; 0x08
    3e34:	89 85       	ldd	r24, Y+9	; 0x09
    3e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	3f ef       	ldi	r19, 0xFF	; 255
    3e3c:	4f e7       	ldi	r20, 0x7F	; 127
    3e3e:	57 e4       	ldi	r21, 0x47	; 71
    3e40:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3e44:	18 16       	cp	r1, r24
    3e46:	4c f5       	brge	.+82     	; 0x3e9a <A_CorrectPassword+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	40 e2       	ldi	r20, 0x20	; 32
    3e56:	51 e4       	ldi	r21, 0x41	; 65
    3e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	9e 83       	std	Y+6, r25	; 0x06
    3e6e:	8d 83       	std	Y+5, r24	; 0x05
    3e70:	0f c0       	rjmp	.+30     	; 0x3e90 <A_CorrectPassword+0xd8>
    3e72:	80 e9       	ldi	r24, 0x90	; 144
    3e74:	91 e0       	ldi	r25, 0x01	; 1
    3e76:	9c 83       	std	Y+4, r25	; 0x04
    3e78:	8b 83       	std	Y+3, r24	; 0x03
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e7e:	01 97       	sbiw	r24, 0x01	; 1
    3e80:	f1 f7       	brne	.-4      	; 0x3e7e <A_CorrectPassword+0xc6>
    3e82:	9c 83       	std	Y+4, r25	; 0x04
    3e84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
    3e88:	9e 81       	ldd	r25, Y+6	; 0x06
    3e8a:	01 97       	sbiw	r24, 0x01	; 1
    3e8c:	9e 83       	std	Y+6, r25	; 0x06
    3e8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	69 f7       	brne	.-38     	; 0x3e72 <A_CorrectPassword+0xba>
    3e98:	14 c0       	rjmp	.+40     	; 0x3ec2 <A_CorrectPassword+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e9c:	78 85       	ldd	r23, Y+8	; 0x08
    3e9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ea6:	dc 01       	movw	r26, r24
    3ea8:	cb 01       	movw	r24, r22
    3eaa:	9e 83       	std	Y+6, r25	; 0x06
    3eac:	8d 83       	std	Y+5, r24	; 0x05
    3eae:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3eb2:	9a 83       	std	Y+2, r25	; 0x02
    3eb4:	89 83       	std	Y+1, r24	; 0x01
    3eb6:	89 81       	ldd	r24, Y+1	; 0x01
    3eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	f1 f7       	brne	.-4      	; 0x3eba <A_CorrectPassword+0x102>
    3ebe:	9a 83       	std	Y+2, r25	; 0x02
    3ec0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    3ec2:	2e 96       	adiw	r28, 0x0e	; 14
    3ec4:	0f b6       	in	r0, 0x3f	; 63
    3ec6:	f8 94       	cli
    3ec8:	de bf       	out	0x3e, r29	; 62
    3eca:	0f be       	out	0x3f, r0	; 63
    3ecc:	cd bf       	out	0x3d, r28	; 61
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	08 95       	ret

00003ed4 <A_WrongPassword>:

// wrong password message
void A_WrongPassword(void)
{
    3ed4:	df 93       	push	r29
    3ed6:	cf 93       	push	r28
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	2e 97       	sbiw	r28, 0x0e	; 14
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
	H_Led_BlinkTwice(RED_LED);
    3ee8:	83 e0       	ldi	r24, 0x03	; 3
    3eea:	0e 94 2e 13 	call	0x265c	; 0x265c <H_Led_BlinkTwice>
	H_Lcd_Clr();
    3eee:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
	H_Lcd_WriteString("Wrong Password");
    3ef2:	83 e9       	ldi	r24, 0x93	; 147
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	60 e0       	ldi	r22, 0x00	; 0
    3efe:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
	H_Lcd_WriteString("Please Try Again");
    3f02:	82 ea       	ldi	r24, 0xA2	; 162
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
    3f0a:	80 e0       	ldi	r24, 0x00	; 0
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	aa e7       	ldi	r26, 0x7A	; 122
    3f10:	b4 e4       	ldi	r27, 0x44	; 68
    3f12:	8b 87       	std	Y+11, r24	; 0x0b
    3f14:	9c 87       	std	Y+12, r25	; 0x0c
    3f16:	ad 87       	std	Y+13, r26	; 0x0d
    3f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	20 e0       	ldi	r18, 0x00	; 0
    3f24:	30 e0       	ldi	r19, 0x00	; 0
    3f26:	4a e7       	ldi	r20, 0x7A	; 122
    3f28:	55 e4       	ldi	r21, 0x45	; 69
    3f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	8f 83       	std	Y+7, r24	; 0x07
    3f34:	98 87       	std	Y+8, r25	; 0x08
    3f36:	a9 87       	std	Y+9, r26	; 0x09
    3f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3f3c:	78 85       	ldd	r23, Y+8	; 0x08
    3f3e:	89 85       	ldd	r24, Y+9	; 0x09
    3f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	40 e8       	ldi	r20, 0x80	; 128
    3f48:	5f e3       	ldi	r21, 0x3F	; 63
    3f4a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3f4e:	88 23       	and	r24, r24
    3f50:	2c f4       	brge	.+10     	; 0x3f5c <A_WrongPassword+0x88>
		__ticks = 1;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	9e 83       	std	Y+6, r25	; 0x06
    3f58:	8d 83       	std	Y+5, r24	; 0x05
    3f5a:	3f c0       	rjmp	.+126    	; 0x3fda <A_WrongPassword+0x106>
	else if (__tmp > 65535)
    3f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f5e:	78 85       	ldd	r23, Y+8	; 0x08
    3f60:	89 85       	ldd	r24, Y+9	; 0x09
    3f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f64:	20 e0       	ldi	r18, 0x00	; 0
    3f66:	3f ef       	ldi	r19, 0xFF	; 255
    3f68:	4f e7       	ldi	r20, 0x7F	; 127
    3f6a:	57 e4       	ldi	r21, 0x47	; 71
    3f6c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3f70:	18 16       	cp	r1, r24
    3f72:	4c f5       	brge	.+82     	; 0x3fc6 <A_WrongPassword+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e2       	ldi	r20, 0x20	; 32
    3f82:	51 e4       	ldi	r21, 0x41	; 65
    3f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f94:	dc 01       	movw	r26, r24
    3f96:	cb 01       	movw	r24, r22
    3f98:	9e 83       	std	Y+6, r25	; 0x06
    3f9a:	8d 83       	std	Y+5, r24	; 0x05
    3f9c:	0f c0       	rjmp	.+30     	; 0x3fbc <A_WrongPassword+0xe8>
    3f9e:	80 e9       	ldi	r24, 0x90	; 144
    3fa0:	91 e0       	ldi	r25, 0x01	; 1
    3fa2:	9c 83       	std	Y+4, r25	; 0x04
    3fa4:	8b 83       	std	Y+3, r24	; 0x03
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <A_WrongPassword+0xd6>
    3fae:	9c 83       	std	Y+4, r25	; 0x04
    3fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	01 97       	sbiw	r24, 0x01	; 1
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	69 f7       	brne	.-38     	; 0x3f9e <A_WrongPassword+0xca>
    3fc4:	14 c0       	rjmp	.+40     	; 0x3fee <A_WrongPassword+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fc8:	78 85       	ldd	r23, Y+8	; 0x08
    3fca:	89 85       	ldd	r24, Y+9	; 0x09
    3fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	9e 83       	std	Y+6, r25	; 0x06
    3fd8:	8d 83       	std	Y+5, r24	; 0x05
    3fda:	8d 81       	ldd	r24, Y+5	; 0x05
    3fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <A_WrongPassword+0x112>
    3fea:	9a 83       	std	Y+2, r25	; 0x02
    3fec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    3fee:	2e 96       	adiw	r28, 0x0e	; 14
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	f8 94       	cli
    3ff4:	de bf       	out	0x3e, r29	; 62
    3ff6:	0f be       	out	0x3f, r0	; 63
    3ff8:	cd bf       	out	0x3d, r28	; 61
    3ffa:	cf 91       	pop	r28
    3ffc:	df 91       	pop	r29
    3ffe:	08 95       	ret

00004000 <A_LockCount>:

// blocking the user from entering for 2 MINs
void A_LockCount(u8 Local_u8_LockTime)
{
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	6f 97       	sbiw	r28, 0x1f	; 31
    400a:	0f b6       	in	r0, 0x3f	; 63
    400c:	f8 94       	cli
    400e:	de bf       	out	0x3e, r29	; 62
    4010:	0f be       	out	0x3f, r0	; 63
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	8f 8f       	std	Y+31, r24	; 0x1f
	s8 Local_S8_Min = Local_u8_LockTime; // set count down time
    4016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4018:	8e 8f       	std	Y+30, r24	; 0x1e
	s8 Local_S8_Sec = 0;
    401a:	1d 8e       	std	Y+29, r1	; 0x1d
	H_Lcd_Clr();
    401c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <H_Lcd_Clr>
	H_Lcd_WriteString(" System Locked");
    4020:	83 eb       	ldi	r24, 0xB3	; 179
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	90 e0       	ldi	r25, 0x00	; 0
    402c:	aa ef       	ldi	r26, 0xFA	; 250
    402e:	b3 e4       	ldi	r27, 0x43	; 67
    4030:	89 8f       	std	Y+25, r24	; 0x19
    4032:	9a 8f       	std	Y+26, r25	; 0x1a
    4034:	ab 8f       	std	Y+27, r26	; 0x1b
    4036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4038:	69 8d       	ldd	r22, Y+25	; 0x19
    403a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    403c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	4a e7       	ldi	r20, 0x7A	; 122
    4046:	55 e4       	ldi	r21, 0x45	; 69
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	8d 8b       	std	Y+21, r24	; 0x15
    4052:	9e 8b       	std	Y+22, r25	; 0x16
    4054:	af 8b       	std	Y+23, r26	; 0x17
    4056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4058:	6d 89       	ldd	r22, Y+21	; 0x15
    405a:	7e 89       	ldd	r23, Y+22	; 0x16
    405c:	8f 89       	ldd	r24, Y+23	; 0x17
    405e:	98 8d       	ldd	r25, Y+24	; 0x18
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e8       	ldi	r20, 0x80	; 128
    4066:	5f e3       	ldi	r21, 0x3F	; 63
    4068:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    406c:	88 23       	and	r24, r24
    406e:	2c f4       	brge	.+10     	; 0x407a <A_LockCount+0x7a>
		__ticks = 1;
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	9c 8b       	std	Y+20, r25	; 0x14
    4076:	8b 8b       	std	Y+19, r24	; 0x13
    4078:	3f c0       	rjmp	.+126    	; 0x40f8 <A_LockCount+0xf8>
	else if (__tmp > 65535)
    407a:	6d 89       	ldd	r22, Y+21	; 0x15
    407c:	7e 89       	ldd	r23, Y+22	; 0x16
    407e:	8f 89       	ldd	r24, Y+23	; 0x17
    4080:	98 8d       	ldd	r25, Y+24	; 0x18
    4082:	20 e0       	ldi	r18, 0x00	; 0
    4084:	3f ef       	ldi	r19, 0xFF	; 255
    4086:	4f e7       	ldi	r20, 0x7F	; 127
    4088:	57 e4       	ldi	r21, 0x47	; 71
    408a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    408e:	18 16       	cp	r1, r24
    4090:	4c f5       	brge	.+82     	; 0x40e4 <A_LockCount+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4092:	69 8d       	ldd	r22, Y+25	; 0x19
    4094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e2       	ldi	r20, 0x20	; 32
    40a0:	51 e4       	ldi	r21, 0x41	; 65
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	bc 01       	movw	r22, r24
    40ac:	cd 01       	movw	r24, r26
    40ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	9c 8b       	std	Y+20, r25	; 0x14
    40b8:	8b 8b       	std	Y+19, r24	; 0x13
    40ba:	0f c0       	rjmp	.+30     	; 0x40da <A_LockCount+0xda>
    40bc:	80 e9       	ldi	r24, 0x90	; 144
    40be:	91 e0       	ldi	r25, 0x01	; 1
    40c0:	9a 8b       	std	Y+18, r25	; 0x12
    40c2:	89 8b       	std	Y+17, r24	; 0x11
    40c4:	89 89       	ldd	r24, Y+17	; 0x11
    40c6:	9a 89       	ldd	r25, Y+18	; 0x12
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <A_LockCount+0xc8>
    40cc:	9a 8b       	std	Y+18, r25	; 0x12
    40ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d0:	8b 89       	ldd	r24, Y+19	; 0x13
    40d2:	9c 89       	ldd	r25, Y+20	; 0x14
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	9c 8b       	std	Y+20, r25	; 0x14
    40d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40da:	8b 89       	ldd	r24, Y+19	; 0x13
    40dc:	9c 89       	ldd	r25, Y+20	; 0x14
    40de:	00 97       	sbiw	r24, 0x00	; 0
    40e0:	69 f7       	brne	.-38     	; 0x40bc <A_LockCount+0xbc>
    40e2:	c1 c0       	rjmp	.+386    	; 0x4266 <A_LockCount+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e4:	6d 89       	ldd	r22, Y+21	; 0x15
    40e6:	7e 89       	ldd	r23, Y+22	; 0x16
    40e8:	8f 89       	ldd	r24, Y+23	; 0x17
    40ea:	98 8d       	ldd	r25, Y+24	; 0x18
    40ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f0:	dc 01       	movw	r26, r24
    40f2:	cb 01       	movw	r24, r22
    40f4:	9c 8b       	std	Y+20, r25	; 0x14
    40f6:	8b 8b       	std	Y+19, r24	; 0x13
    40f8:	8b 89       	ldd	r24, Y+19	; 0x13
    40fa:	9c 89       	ldd	r25, Y+20	; 0x14
    40fc:	98 8b       	std	Y+16, r25	; 0x10
    40fe:	8f 87       	std	Y+15, r24	; 0x0f
    4100:	8f 85       	ldd	r24, Y+15	; 0x0f
    4102:	98 89       	ldd	r25, Y+16	; 0x10
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <A_LockCount+0x104>
    4108:	98 8b       	std	Y+16, r25	; 0x10
    410a:	8f 87       	std	Y+15, r24	; 0x0f
    410c:	ac c0       	rjmp	.+344    	; 0x4266 <A_LockCount+0x266>
	_delay_ms(500);
	// display 2 MIN count down
	while(Local_S8_Min >= 0)
	{
		H_Lcd_GoTo(1,5);
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	65 e0       	ldi	r22, 0x05	; 5
    4112:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
		H_Lcd_WriteCharacter(48 + (Local_S8_Min/10));
    4116:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4118:	9a e0       	ldi	r25, 0x0A	; 10
    411a:	69 2f       	mov	r22, r25
    411c:	0e 94 0a 22 	call	0x4414	; 0x4414 <__divmodqi4>
    4120:	80 5d       	subi	r24, 0xD0	; 208
    4122:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
		H_Lcd_WriteCharacter(48 + (Local_S8_Min%10));
    4126:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4128:	9a e0       	ldi	r25, 0x0A	; 10
    412a:	69 2f       	mov	r22, r25
    412c:	0e 94 0a 22 	call	0x4414	; 0x4414 <__divmodqi4>
    4130:	89 2f       	mov	r24, r25
    4132:	80 5d       	subi	r24, 0xD0	; 208
    4134:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
		H_Lcd_WriteCharacter(':');
    4138:	8a e3       	ldi	r24, 0x3A	; 58
    413a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
    413e:	8a c0       	rjmp	.+276    	; 0x4254 <A_LockCount+0x254>
		while(Local_S8_Sec >= 0)
		{
			H_Lcd_GoTo(1,8);
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	68 e0       	ldi	r22, 0x08	; 8
    4144:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
			H_Lcd_WriteCharacter(48 + (Local_S8_Sec/10));
    4148:	8d 8d       	ldd	r24, Y+29	; 0x1d
    414a:	9a e0       	ldi	r25, 0x0A	; 10
    414c:	69 2f       	mov	r22, r25
    414e:	0e 94 0a 22 	call	0x4414	; 0x4414 <__divmodqi4>
    4152:	80 5d       	subi	r24, 0xD0	; 208
    4154:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
			H_Lcd_WriteCharacter(48 + (Local_S8_Sec%10));
    4158:	8d 8d       	ldd	r24, Y+29	; 0x1d
    415a:	9a e0       	ldi	r25, 0x0A	; 10
    415c:	69 2f       	mov	r22, r25
    415e:	0e 94 0a 22 	call	0x4414	; 0x4414 <__divmodqi4>
    4162:	89 2f       	mov	r24, r25
    4164:	80 5d       	subi	r24, 0xD0	; 208
    4166:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <H_Lcd_WriteCharacter>
			Local_S8_Sec--;
    416a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    416c:	81 50       	subi	r24, 0x01	; 1
    416e:	8d 8f       	std	Y+29, r24	; 0x1d
    4170:	80 e0       	ldi	r24, 0x00	; 0
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	aa e7       	ldi	r26, 0x7A	; 122
    4176:	b4 e4       	ldi	r27, 0x44	; 68
    4178:	8b 87       	std	Y+11, r24	; 0x0b
    417a:	9c 87       	std	Y+12, r25	; 0x0c
    417c:	ad 87       	std	Y+13, r26	; 0x0d
    417e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4180:	6b 85       	ldd	r22, Y+11	; 0x0b
    4182:	7c 85       	ldd	r23, Y+12	; 0x0c
    4184:	8d 85       	ldd	r24, Y+13	; 0x0d
    4186:	9e 85       	ldd	r25, Y+14	; 0x0e
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	4a e7       	ldi	r20, 0x7A	; 122
    418e:	55 e4       	ldi	r21, 0x45	; 69
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	8f 83       	std	Y+7, r24	; 0x07
    419a:	98 87       	std	Y+8, r25	; 0x08
    419c:	a9 87       	std	Y+9, r26	; 0x09
    419e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41a0:	6f 81       	ldd	r22, Y+7	; 0x07
    41a2:	78 85       	ldd	r23, Y+8	; 0x08
    41a4:	89 85       	ldd	r24, Y+9	; 0x09
    41a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e8       	ldi	r20, 0x80	; 128
    41ae:	5f e3       	ldi	r21, 0x3F	; 63
    41b0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	2c f4       	brge	.+10     	; 0x41c2 <A_LockCount+0x1c2>
		__ticks = 1;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9e 83       	std	Y+6, r25	; 0x06
    41be:	8d 83       	std	Y+5, r24	; 0x05
    41c0:	3f c0       	rjmp	.+126    	; 0x4240 <A_LockCount+0x240>
	else if (__tmp > 65535)
    41c2:	6f 81       	ldd	r22, Y+7	; 0x07
    41c4:	78 85       	ldd	r23, Y+8	; 0x08
    41c6:	89 85       	ldd	r24, Y+9	; 0x09
    41c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	3f ef       	ldi	r19, 0xFF	; 255
    41ce:	4f e7       	ldi	r20, 0x7F	; 127
    41d0:	57 e4       	ldi	r21, 0x47	; 71
    41d2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    41d6:	18 16       	cp	r1, r24
    41d8:	4c f5       	brge	.+82     	; 0x422c <A_LockCount+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41da:	6b 85       	ldd	r22, Y+11	; 0x0b
    41dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41de:	8d 85       	ldd	r24, Y+13	; 0x0d
    41e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41e2:	20 e0       	ldi	r18, 0x00	; 0
    41e4:	30 e0       	ldi	r19, 0x00	; 0
    41e6:	40 e2       	ldi	r20, 0x20	; 32
    41e8:	51 e4       	ldi	r21, 0x41	; 65
    41ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	bc 01       	movw	r22, r24
    41f4:	cd 01       	movw	r24, r26
    41f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	9e 83       	std	Y+6, r25	; 0x06
    4200:	8d 83       	std	Y+5, r24	; 0x05
    4202:	0f c0       	rjmp	.+30     	; 0x4222 <A_LockCount+0x222>
    4204:	80 e9       	ldi	r24, 0x90	; 144
    4206:	91 e0       	ldi	r25, 0x01	; 1
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
    420c:	8b 81       	ldd	r24, Y+3	; 0x03
    420e:	9c 81       	ldd	r25, Y+4	; 0x04
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	f1 f7       	brne	.-4      	; 0x4210 <A_LockCount+0x210>
    4214:	9c 83       	std	Y+4, r25	; 0x04
    4216:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4218:	8d 81       	ldd	r24, Y+5	; 0x05
    421a:	9e 81       	ldd	r25, Y+6	; 0x06
    421c:	01 97       	sbiw	r24, 0x01	; 1
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4222:	8d 81       	ldd	r24, Y+5	; 0x05
    4224:	9e 81       	ldd	r25, Y+6	; 0x06
    4226:	00 97       	sbiw	r24, 0x00	; 0
    4228:	69 f7       	brne	.-38     	; 0x4204 <A_LockCount+0x204>
    422a:	14 c0       	rjmp	.+40     	; 0x4254 <A_LockCount+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    422c:	6f 81       	ldd	r22, Y+7	; 0x07
    422e:	78 85       	ldd	r23, Y+8	; 0x08
    4230:	89 85       	ldd	r24, Y+9	; 0x09
    4232:	9a 85       	ldd	r25, Y+10	; 0x0a
    4234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4238:	dc 01       	movw	r26, r24
    423a:	cb 01       	movw	r24, r22
    423c:	9e 83       	std	Y+6, r25	; 0x06
    423e:	8d 83       	std	Y+5, r24	; 0x05
    4240:	8d 81       	ldd	r24, Y+5	; 0x05
    4242:	9e 81       	ldd	r25, Y+6	; 0x06
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	9a 81       	ldd	r25, Y+2	; 0x02
    424c:	01 97       	sbiw	r24, 0x01	; 1
    424e:	f1 f7       	brne	.-4      	; 0x424c <A_LockCount+0x24c>
    4250:	9a 83       	std	Y+2, r25	; 0x02
    4252:	89 83       	std	Y+1, r24	; 0x01
	{
		H_Lcd_GoTo(1,5);
		H_Lcd_WriteCharacter(48 + (Local_S8_Min/10));
		H_Lcd_WriteCharacter(48 + (Local_S8_Min%10));
		H_Lcd_WriteCharacter(':');
		while(Local_S8_Sec >= 0)
    4254:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4256:	88 23       	and	r24, r24
    4258:	0c f0       	brlt	.+2      	; 0x425c <A_LockCount+0x25c>
    425a:	72 cf       	rjmp	.-284    	; 0x4140 <A_LockCount+0x140>
			H_Lcd_WriteCharacter(48 + (Local_S8_Sec/10));
			H_Lcd_WriteCharacter(48 + (Local_S8_Sec%10));
			Local_S8_Sec--;
			_delay_ms(1000);
		}
		Local_S8_Sec = 60;
    425c:	8c e3       	ldi	r24, 0x3C	; 60
    425e:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_S8_Min--;
    4260:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4262:	81 50       	subi	r24, 0x01	; 1
    4264:	8e 8f       	std	Y+30, r24	; 0x1e
	s8 Local_S8_Sec = 0;
	H_Lcd_Clr();
	H_Lcd_WriteString(" System Locked");
	_delay_ms(500);
	// display 2 MIN count down
	while(Local_S8_Min >= 0)
    4266:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4268:	88 23       	and	r24, r24
    426a:	0c f0       	brlt	.+2      	; 0x426e <A_LockCount+0x26e>
    426c:	50 cf       	rjmp	.-352    	; 0x410e <A_LockCount+0x10e>
			_delay_ms(1000);
		}
		Local_S8_Sec = 60;
		Local_S8_Min--;
	}
	Local_S8_Min = Local_u8_LockTime; // reset count down time
    426e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4270:	8e 8f       	std	Y+30, r24	; 0x1e
	Local_S8_Sec = 0;
    4272:	1d 8e       	std	Y+29, r1	; 0x1d
}
    4274:	6f 96       	adiw	r28, 0x1f	; 31
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <A_LedOption>:

// led control screen
void A_LedOption(void)
{
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	cd b7       	in	r28, 0x3d	; 61
    428c:	de b7       	in	r29, 0x3e	; 62
	H_Lcd_GoTo(0,0);
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
	H_Lcd_WriteString("1- LEDs ON      ");
    4296:	82 ec       	ldi	r24, 0xC2	; 194
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	60 e0       	ldi	r22, 0x00	; 0
    42a2:	0e 94 df 1a 	call	0x35be	; 0x35be <H_Lcd_GoTo>
	H_Lcd_WriteString("2- LEDs OFF     ");
    42a6:	83 ed       	ldi	r24, 0xD3	; 211
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	0e 94 90 19 	call	0x3320	; 0x3320 <H_Lcd_WriteString>
}
    42ae:	cf 91       	pop	r28
    42b0:	df 91       	pop	r29
    42b2:	08 95       	ret

000042b4 <A_LedControl>:

void A_LedControl(void)
{
    42b4:	df 93       	push	r29
    42b6:	cf 93       	push	r28
    42b8:	00 d0       	rcall	.+0      	; 0x42ba <A_LedControl+0x6>
    42ba:	0f 92       	push	r0
    42bc:	cd b7       	in	r28, 0x3d	; 61
    42be:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_LedReading = 0;
    42c0:	19 82       	std	Y+1, r1	; 0x01
	Local_u8_LedReading = H_Keypad_Read();     // getting keypad read
    42c2:	0e 94 ad 1c 	call	0x395a	; 0x395a <H_Keypad_Read>
    42c6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_LedReading)
    42c8:	89 81       	ldd	r24, Y+1	; 0x01
    42ca:	28 2f       	mov	r18, r24
    42cc:	30 e0       	ldi	r19, 0x00	; 0
    42ce:	3b 83       	std	Y+3, r19	; 0x03
    42d0:	2a 83       	std	Y+2, r18	; 0x02
    42d2:	8a 81       	ldd	r24, Y+2	; 0x02
    42d4:	9b 81       	ldd	r25, Y+3	; 0x03
    42d6:	81 33       	cpi	r24, 0x31	; 49
    42d8:	91 05       	cpc	r25, r1
    42da:	31 f0       	breq	.+12     	; 0x42e8 <A_LedControl+0x34>
    42dc:	2a 81       	ldd	r18, Y+2	; 0x02
    42de:	3b 81       	ldd	r19, Y+3	; 0x03
    42e0:	22 33       	cpi	r18, 0x32	; 50
    42e2:	31 05       	cpc	r19, r1
    42e4:	29 f0       	breq	.+10     	; 0x42f0 <A_LedControl+0x3c>
    42e6:	07 c0       	rjmp	.+14     	; 0x42f6 <A_LedControl+0x42>
	{
		case '1': H_Led_On(BLU_LED);    break; // setting blue LED on if user input = '1'
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	0e 94 09 11 	call	0x2212	; 0x2212 <H_Led_On>
    42ee:	03 c0       	rjmp	.+6      	; 0x42f6 <A_LedControl+0x42>
		case '2': H_Led_Off(BLU_LED);   break; // setting blue LED off if user input = '2'
    42f0:	81 e0       	ldi	r24, 0x01	; 1
    42f2:	0e 94 38 11 	call	0x2270	; 0x2270 <H_Led_Off>
		default:                        break;
	}
}
    42f6:	0f 90       	pop	r0
    42f8:	0f 90       	pop	r0
    42fa:	0f 90       	pop	r0
    42fc:	cf 91       	pop	r28
    42fe:	df 91       	pop	r29
    4300:	08 95       	ret

00004302 <A_FanControl>:

// fan control system
void A_FanControl(void)
{
    4302:	df 93       	push	r29
    4304:	cf 93       	push	r28
    4306:	0f 92       	push	r0
    4308:	cd b7       	in	r28, 0x3d	; 61
    430a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_TempReading;
	Local_u8_TempReading = H_TempSensor_Read(); // get temperature sensor reading
    430c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <H_TempSensor_Read>
    4310:	89 83       	std	Y+1, r24	; 0x01
	// check temperature sensor read && set fan speed
	if (Local_u8_TempReading >= MAX_TEMP)
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	8e 31       	cpi	r24, 0x1E	; 30
    4316:	20 f0       	brcs	.+8      	; 0x4320 <A_FanControl+0x1e>
	{
		A_FanSpeed(100); // Fan motor at 100% of full speed
    4318:	84 e6       	ldi	r24, 0x64	; 100
    431a:	0e 94 a3 21 	call	0x4346	; 0x4346 <A_FanSpeed>
    431e:	0f c0       	rjmp	.+30     	; 0x433e <A_FanControl+0x3c>
	}
	else if ((Local_u8_TempReading > MIN_TEMP) && (Local_u8_TempReading < MAX_TEMP))
    4320:	89 81       	ldd	r24, Y+1	; 0x01
    4322:	8a 31       	cpi	r24, 0x1A	; 26
    4324:	38 f0       	brcs	.+14     	; 0x4334 <A_FanControl+0x32>
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	8e 31       	cpi	r24, 0x1E	; 30
    432a:	20 f4       	brcc	.+8      	; 0x4334 <A_FanControl+0x32>
	{
		A_FanSpeed(50); // Fan motor at 50% of full speed
    432c:	82 e3       	ldi	r24, 0x32	; 50
    432e:	0e 94 a3 21 	call	0x4346	; 0x4346 <A_FanSpeed>
    4332:	05 c0       	rjmp	.+10     	; 0x433e <A_FanControl+0x3c>
	}
	else
	{
		A_FanSpeed(0);
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	0e 94 a3 21 	call	0x4346	; 0x4346 <A_FanSpeed>
		H_DcMotorStop(); // Fan motor stop
    433a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <H_DcMotorStop>

	}

}
    433e:	0f 90       	pop	r0
    4340:	cf 91       	pop	r28
    4342:	df 91       	pop	r29
    4344:	08 95       	ret

00004346 <A_FanSpeed>:

// set fan motor speed
void A_FanSpeed(u8 Local_u8_FanSpeed)
{
    4346:	df 93       	push	r29
    4348:	cf 93       	push	r28
    434a:	0f 92       	push	r0
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	89 83       	std	Y+1, r24	; 0x01
	H_DcMotorDirection1(); // set motor on in Direction1
    4352:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <H_DcMotorDirection1>
	H_DcMotorSpeed(Local_u8_FanSpeed); // Set motor speed
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <H_DcMotorSpeed>
}
    435c:	0f 90       	pop	r0
    435e:	cf 91       	pop	r28
    4360:	df 91       	pop	r29
    4362:	08 95       	ret

00004364 <main>:
 */
#include "App.h"
void A_ExtIntExc(void);

u8 Global_u8_ExitKeyFlag = 0;
int main(){
    4364:	df 93       	push	r29
    4366:	cf 93       	push	r28
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62

	A_AppInit();
    436c:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <A_AppInit>
		M_ExtInt_SetCallBack(A_ExtIntExc);
    4370:	85 ed       	ldi	r24, 0xD5	; 213
    4372:	91 e2       	ldi	r25, 0x21	; 33
    4374:	0e 94 0c 09 	call	0x1218	; 0x1218 <M_ExtInt_SetCallBack>
		while(1)
		{
			M_GIE_voidDisable();  // disable GIE to block the use of INT0 while enter password
    4378:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <M_GIE_voidDisable>
			A_LoginPassword();
    437c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <A_LoginPassword>
			A_LedOption();
    4380:	0e 94 43 21 	call	0x4286	; 0x4286 <A_LedOption>
			M_GIE_voidEnbale();   // enable GIE to use INT0 for Logout
    4384:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <M_GIE_voidEnbale>
    4388:	04 c0       	rjmp	.+8      	; 0x4392 <main+0x2e>

			// program runs until Exit key is pressed then disable the fan, the lEDs,
			// and sets ExitKeyFlag back to 0 and returns to login screen
			while(Global_u8_ExitKeyFlag != 1)
			{
				A_FanControl();
    438a:	0e 94 81 21 	call	0x4302	; 0x4302 <A_FanControl>
				A_LedControl();
    438e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <A_LedControl>
			A_LedOption();
			M_GIE_voidEnbale();   // enable GIE to use INT0 for Logout

			// program runs until Exit key is pressed then disable the fan, the lEDs,
			// and sets ExitKeyFlag back to 0 and returns to login screen
			while(Global_u8_ExitKeyFlag != 1)
    4392:	80 91 02 02 	lds	r24, 0x0202
    4396:	81 30       	cpi	r24, 0x01	; 1
    4398:	c1 f7       	brne	.-16     	; 0x438a <main+0x26>
			{
				A_FanControl();
				A_LedControl();
			}

			H_DcMotorStop();      // turning the fan motor off
    439a:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <H_DcMotorStop>
			H_Led_Off(BLU_LED);   // turning the lights off if it was on
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	0e 94 38 11 	call	0x2270	; 0x2270 <H_Led_Off>
			Global_u8_ExitKeyFlag = 0; // setting ExitKeyRead back to 0
    43a4:	10 92 02 02 	sts	0x0202, r1
    43a8:	e7 cf       	rjmp	.-50     	; 0x4378 <main+0x14>

000043aa <A_ExtIntExc>:
		return 0;
	}


	void A_ExtIntExc(void)
	{
    43aa:	df 93       	push	r29
    43ac:	cf 93       	push	r28
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
		Global_u8_ExitKeyFlag = 1;
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	80 93 02 02 	sts	0x0202, r24
	}
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	08 95       	ret

000043be <__mulsi3>:
    43be:	62 9f       	mul	r22, r18
    43c0:	d0 01       	movw	r26, r0
    43c2:	73 9f       	mul	r23, r19
    43c4:	f0 01       	movw	r30, r0
    43c6:	82 9f       	mul	r24, r18
    43c8:	e0 0d       	add	r30, r0
    43ca:	f1 1d       	adc	r31, r1
    43cc:	64 9f       	mul	r22, r20
    43ce:	e0 0d       	add	r30, r0
    43d0:	f1 1d       	adc	r31, r1
    43d2:	92 9f       	mul	r25, r18
    43d4:	f0 0d       	add	r31, r0
    43d6:	83 9f       	mul	r24, r19
    43d8:	f0 0d       	add	r31, r0
    43da:	74 9f       	mul	r23, r20
    43dc:	f0 0d       	add	r31, r0
    43de:	65 9f       	mul	r22, r21
    43e0:	f0 0d       	add	r31, r0
    43e2:	99 27       	eor	r25, r25
    43e4:	72 9f       	mul	r23, r18
    43e6:	b0 0d       	add	r27, r0
    43e8:	e1 1d       	adc	r30, r1
    43ea:	f9 1f       	adc	r31, r25
    43ec:	63 9f       	mul	r22, r19
    43ee:	b0 0d       	add	r27, r0
    43f0:	e1 1d       	adc	r30, r1
    43f2:	f9 1f       	adc	r31, r25
    43f4:	bd 01       	movw	r22, r26
    43f6:	cf 01       	movw	r24, r30
    43f8:	11 24       	eor	r1, r1
    43fa:	08 95       	ret

000043fc <__udivmodqi4>:
    43fc:	99 1b       	sub	r25, r25
    43fe:	79 e0       	ldi	r23, 0x09	; 9
    4400:	04 c0       	rjmp	.+8      	; 0x440a <__udivmodqi4_ep>

00004402 <__udivmodqi4_loop>:
    4402:	99 1f       	adc	r25, r25
    4404:	96 17       	cp	r25, r22
    4406:	08 f0       	brcs	.+2      	; 0x440a <__udivmodqi4_ep>
    4408:	96 1b       	sub	r25, r22

0000440a <__udivmodqi4_ep>:
    440a:	88 1f       	adc	r24, r24
    440c:	7a 95       	dec	r23
    440e:	c9 f7       	brne	.-14     	; 0x4402 <__udivmodqi4_loop>
    4410:	80 95       	com	r24
    4412:	08 95       	ret

00004414 <__divmodqi4>:
    4414:	87 fb       	bst	r24, 7
    4416:	08 2e       	mov	r0, r24
    4418:	06 26       	eor	r0, r22
    441a:	87 fd       	sbrc	r24, 7
    441c:	81 95       	neg	r24
    441e:	67 fd       	sbrc	r22, 7
    4420:	61 95       	neg	r22
    4422:	ec df       	rcall	.-40     	; 0x43fc <__udivmodqi4>
    4424:	0e f4       	brtc	.+2      	; 0x4428 <__divmodqi4_1>
    4426:	91 95       	neg	r25

00004428 <__divmodqi4_1>:
    4428:	07 fc       	sbrc	r0, 7
    442a:	81 95       	neg	r24

0000442c <__divmodqi4_exit>:
    442c:	08 95       	ret

0000442e <__divmodhi4>:
    442e:	97 fb       	bst	r25, 7
    4430:	09 2e       	mov	r0, r25
    4432:	07 26       	eor	r0, r23
    4434:	0a d0       	rcall	.+20     	; 0x444a <__divmodhi4_neg1>
    4436:	77 fd       	sbrc	r23, 7
    4438:	04 d0       	rcall	.+8      	; 0x4442 <__divmodhi4_neg2>
    443a:	49 d0       	rcall	.+146    	; 0x44ce <__udivmodhi4>
    443c:	06 d0       	rcall	.+12     	; 0x444a <__divmodhi4_neg1>
    443e:	00 20       	and	r0, r0
    4440:	1a f4       	brpl	.+6      	; 0x4448 <__divmodhi4_exit>

00004442 <__divmodhi4_neg2>:
    4442:	70 95       	com	r23
    4444:	61 95       	neg	r22
    4446:	7f 4f       	sbci	r23, 0xFF	; 255

00004448 <__divmodhi4_exit>:
    4448:	08 95       	ret

0000444a <__divmodhi4_neg1>:
    444a:	f6 f7       	brtc	.-4      	; 0x4448 <__divmodhi4_exit>
    444c:	90 95       	com	r25
    444e:	81 95       	neg	r24
    4450:	9f 4f       	sbci	r25, 0xFF	; 255
    4452:	08 95       	ret

00004454 <__udivmodsi4>:
    4454:	a1 e2       	ldi	r26, 0x21	; 33
    4456:	1a 2e       	mov	r1, r26
    4458:	aa 1b       	sub	r26, r26
    445a:	bb 1b       	sub	r27, r27
    445c:	fd 01       	movw	r30, r26
    445e:	0d c0       	rjmp	.+26     	; 0x447a <__udivmodsi4_ep>

00004460 <__udivmodsi4_loop>:
    4460:	aa 1f       	adc	r26, r26
    4462:	bb 1f       	adc	r27, r27
    4464:	ee 1f       	adc	r30, r30
    4466:	ff 1f       	adc	r31, r31
    4468:	a2 17       	cp	r26, r18
    446a:	b3 07       	cpc	r27, r19
    446c:	e4 07       	cpc	r30, r20
    446e:	f5 07       	cpc	r31, r21
    4470:	20 f0       	brcs	.+8      	; 0x447a <__udivmodsi4_ep>
    4472:	a2 1b       	sub	r26, r18
    4474:	b3 0b       	sbc	r27, r19
    4476:	e4 0b       	sbc	r30, r20
    4478:	f5 0b       	sbc	r31, r21

0000447a <__udivmodsi4_ep>:
    447a:	66 1f       	adc	r22, r22
    447c:	77 1f       	adc	r23, r23
    447e:	88 1f       	adc	r24, r24
    4480:	99 1f       	adc	r25, r25
    4482:	1a 94       	dec	r1
    4484:	69 f7       	brne	.-38     	; 0x4460 <__udivmodsi4_loop>
    4486:	60 95       	com	r22
    4488:	70 95       	com	r23
    448a:	80 95       	com	r24
    448c:	90 95       	com	r25
    448e:	9b 01       	movw	r18, r22
    4490:	ac 01       	movw	r20, r24
    4492:	bd 01       	movw	r22, r26
    4494:	cf 01       	movw	r24, r30
    4496:	08 95       	ret

00004498 <__divmodsi4>:
    4498:	97 fb       	bst	r25, 7
    449a:	09 2e       	mov	r0, r25
    449c:	05 26       	eor	r0, r21
    449e:	0e d0       	rcall	.+28     	; 0x44bc <__divmodsi4_neg1>
    44a0:	57 fd       	sbrc	r21, 7
    44a2:	04 d0       	rcall	.+8      	; 0x44ac <__divmodsi4_neg2>
    44a4:	d7 df       	rcall	.-82     	; 0x4454 <__udivmodsi4>
    44a6:	0a d0       	rcall	.+20     	; 0x44bc <__divmodsi4_neg1>
    44a8:	00 1c       	adc	r0, r0
    44aa:	38 f4       	brcc	.+14     	; 0x44ba <__divmodsi4_exit>

000044ac <__divmodsi4_neg2>:
    44ac:	50 95       	com	r21
    44ae:	40 95       	com	r20
    44b0:	30 95       	com	r19
    44b2:	21 95       	neg	r18
    44b4:	3f 4f       	sbci	r19, 0xFF	; 255
    44b6:	4f 4f       	sbci	r20, 0xFF	; 255
    44b8:	5f 4f       	sbci	r21, 0xFF	; 255

000044ba <__divmodsi4_exit>:
    44ba:	08 95       	ret

000044bc <__divmodsi4_neg1>:
    44bc:	f6 f7       	brtc	.-4      	; 0x44ba <__divmodsi4_exit>
    44be:	90 95       	com	r25
    44c0:	80 95       	com	r24
    44c2:	70 95       	com	r23
    44c4:	61 95       	neg	r22
    44c6:	7f 4f       	sbci	r23, 0xFF	; 255
    44c8:	8f 4f       	sbci	r24, 0xFF	; 255
    44ca:	9f 4f       	sbci	r25, 0xFF	; 255
    44cc:	08 95       	ret

000044ce <__udivmodhi4>:
    44ce:	aa 1b       	sub	r26, r26
    44d0:	bb 1b       	sub	r27, r27
    44d2:	51 e1       	ldi	r21, 0x11	; 17
    44d4:	07 c0       	rjmp	.+14     	; 0x44e4 <__udivmodhi4_ep>

000044d6 <__udivmodhi4_loop>:
    44d6:	aa 1f       	adc	r26, r26
    44d8:	bb 1f       	adc	r27, r27
    44da:	a6 17       	cp	r26, r22
    44dc:	b7 07       	cpc	r27, r23
    44de:	10 f0       	brcs	.+4      	; 0x44e4 <__udivmodhi4_ep>
    44e0:	a6 1b       	sub	r26, r22
    44e2:	b7 0b       	sbc	r27, r23

000044e4 <__udivmodhi4_ep>:
    44e4:	88 1f       	adc	r24, r24
    44e6:	99 1f       	adc	r25, r25
    44e8:	5a 95       	dec	r21
    44ea:	a9 f7       	brne	.-22     	; 0x44d6 <__udivmodhi4_loop>
    44ec:	80 95       	com	r24
    44ee:	90 95       	com	r25
    44f0:	bc 01       	movw	r22, r24
    44f2:	cd 01       	movw	r24, r26
    44f4:	08 95       	ret

000044f6 <__prologue_saves__>:
    44f6:	2f 92       	push	r2
    44f8:	3f 92       	push	r3
    44fa:	4f 92       	push	r4
    44fc:	5f 92       	push	r5
    44fe:	6f 92       	push	r6
    4500:	7f 92       	push	r7
    4502:	8f 92       	push	r8
    4504:	9f 92       	push	r9
    4506:	af 92       	push	r10
    4508:	bf 92       	push	r11
    450a:	cf 92       	push	r12
    450c:	df 92       	push	r13
    450e:	ef 92       	push	r14
    4510:	ff 92       	push	r15
    4512:	0f 93       	push	r16
    4514:	1f 93       	push	r17
    4516:	cf 93       	push	r28
    4518:	df 93       	push	r29
    451a:	cd b7       	in	r28, 0x3d	; 61
    451c:	de b7       	in	r29, 0x3e	; 62
    451e:	ca 1b       	sub	r28, r26
    4520:	db 0b       	sbc	r29, r27
    4522:	0f b6       	in	r0, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	0f be       	out	0x3f, r0	; 63
    452a:	cd bf       	out	0x3d, r28	; 61
    452c:	09 94       	ijmp

0000452e <__epilogue_restores__>:
    452e:	2a 88       	ldd	r2, Y+18	; 0x12
    4530:	39 88       	ldd	r3, Y+17	; 0x11
    4532:	48 88       	ldd	r4, Y+16	; 0x10
    4534:	5f 84       	ldd	r5, Y+15	; 0x0f
    4536:	6e 84       	ldd	r6, Y+14	; 0x0e
    4538:	7d 84       	ldd	r7, Y+13	; 0x0d
    453a:	8c 84       	ldd	r8, Y+12	; 0x0c
    453c:	9b 84       	ldd	r9, Y+11	; 0x0b
    453e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4540:	b9 84       	ldd	r11, Y+9	; 0x09
    4542:	c8 84       	ldd	r12, Y+8	; 0x08
    4544:	df 80       	ldd	r13, Y+7	; 0x07
    4546:	ee 80       	ldd	r14, Y+6	; 0x06
    4548:	fd 80       	ldd	r15, Y+5	; 0x05
    454a:	0c 81       	ldd	r16, Y+4	; 0x04
    454c:	1b 81       	ldd	r17, Y+3	; 0x03
    454e:	aa 81       	ldd	r26, Y+2	; 0x02
    4550:	b9 81       	ldd	r27, Y+1	; 0x01
    4552:	ce 0f       	add	r28, r30
    4554:	d1 1d       	adc	r29, r1
    4556:	0f b6       	in	r0, 0x3f	; 63
    4558:	f8 94       	cli
    455a:	de bf       	out	0x3e, r29	; 62
    455c:	0f be       	out	0x3f, r0	; 63
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	ed 01       	movw	r28, r26
    4562:	08 95       	ret

00004564 <_exit>:
    4564:	f8 94       	cli

00004566 <__stop_program>:
    4566:	ff cf       	rjmp	.-2      	; 0x4566 <__stop_program>
